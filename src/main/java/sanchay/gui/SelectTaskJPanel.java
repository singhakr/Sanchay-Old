/*
 * TamMarkerJPanel.java
 *
 * Created on September 26, 2005, 10:14 PM
 */

package sanchay.gui;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.*;
import java.awt.*;
import javax.swing.*;

import sanchay.GlobalProperties;
import sanchay.common.types.PropertyType;
import sanchay.corpus.parallel.gui.ParallelMarkupAnalyzerJPanel;
import sanchay.corpus.parallel.gui.ParallelMarkupTaskSetupJPanel;
import sanchay.corpus.parallel.gui.ParallelMarkupWorkJPanel;
import sanchay.gui.clients.AnnotationClient;
import sanchay.gui.clients.SanchayClient;
import sanchay.gui.common.JPanelDialog;
import sanchay.gui.common.SanchayJDialog;
import sanchay.corpus.ssf.gui.*;
import sanchay.gui.common.DialogFactory;
import sanchay.gui.common.GenerateTasksJPanel;
import sanchay.properties.KeyValueProperties;
import sanchay.properties.PropertiesManager;
import sanchay.properties.PropertiesTable;

/**
 *
 * @author  anil
 */
public class SelectTaskJPanel extends JPanel implements TaskSetupJPanelInterface, JPanelDialog {
    
    private JFrame owner;
    private JDialog dialog;

    private JPanel taskJPanel;
    private AnnotationClient annotationClient;
    
    public static final int PARALLEL_MARKUP_TASK = 0;
    public static final int SYNTACTIC_ANNOTATION_TASK = 1;
    public static final int PROPBANK_ANNOTATION_TASK = 2;
    public static final int SENTENCE_ALIGNMENT_TASK = 4;
    
    private int taskType;
    private boolean isDiff;

    private DefaultComboBoxModel taskListComboBoxModel;
    
    /** Creates new form TamMarkerJPanel */
    public SelectTaskJPanel(int taskType, AnnotationClient annotationClient) {
        this(taskType);
        
        this.annotationClient = annotationClient;
    }
    
    public SelectTaskJPanel(int taskType) {
        initComponents();
        
        this.taskType = taskType;
	isDiff = false;
    }

    public SelectTaskJPanel(int taskType, boolean isDif) {
        initComponents();
        
        this.taskType = taskType;
	isDiff = isDif;
	
	if(isDiff == true)
	{
	    ((CardLayout) commandsCardJPanel.getLayout()).show(commandsCardJPanel, "diffCard");
	}
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topJPanel = new javax.swing.JPanel();
        modeJPanel = new javax.swing.JPanel();
        modeJLabel = new javax.swing.JLabel();
        modeJComboBox = new javax.swing.JComboBox();
        taskGroupJPanel = new javax.swing.JPanel();
        taskGroupJLabel = new javax.swing.JLabel();
        taskGroupJComboBox = new javax.swing.JComboBox();
        taskCardJPanel = new javax.swing.JPanel();
        selectTaskJPanel = new javax.swing.JPanel();
        selectTaskJLabel = new javax.swing.JLabel();
        selectTaskJComboBox = new javax.swing.JComboBox();
        selectTasksJPanel = new javax.swing.JPanel();
        selectTasksJLabel = new javax.swing.JLabel();
        selectTasksJScrollPane = new javax.swing.JScrollPane();
        selectTasksJList = new javax.swing.JList();
        commandsCardJPanel = new javax.swing.JPanel();
        workCommandsJPanel = new javax.swing.JPanel();
        workJButton = new javax.swing.JButton();
        setupCommandsJPanel = new javax.swing.JPanel();
        createTaskGroupJButton = new javax.swing.JButton();
        createTaskJButton = new javax.swing.JButton();
        deleteTaskJButton = new javax.swing.JButton();
        editTaskJButton = new javax.swing.JButton();
        compareCommandsJPanel = new javax.swing.JPanel();
        compareJButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Task Panel"));
        setLayout(new java.awt.BorderLayout(0, 4));

        topJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        modeJPanel.setLayout(new javax.swing.BoxLayout(modeJPanel, javax.swing.BoxLayout.LINE_AXIS));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        modeJLabel.setText(bundle.getString("Mode:")); // NOI18N
        modeJLabel.setPreferredSize(new java.awt.Dimension(80, 15));
        modeJPanel.add(modeJLabel);

        modeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Work", "Compare", "Setup" }));
        modeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeJComboBoxActionPerformed(evt);
            }
        });
        modeJPanel.add(modeJComboBox);

        topJPanel.add(modeJPanel);

        taskGroupJPanel.setLayout(new javax.swing.BoxLayout(taskGroupJPanel, javax.swing.BoxLayout.LINE_AXIS));

        taskGroupJLabel.setLabelFor(taskGroupJComboBox);
        taskGroupJLabel.setText("Task group:");
        taskGroupJLabel.setPreferredSize(new java.awt.Dimension(80, 15));
        taskGroupJPanel.add(taskGroupJLabel);

        taskGroupJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskGroupJComboBoxActionPerformed(evt);
            }
        });
        taskGroupJPanel.add(taskGroupJComboBox);

        topJPanel.add(taskGroupJPanel);

        add(topJPanel, java.awt.BorderLayout.NORTH);

        taskCardJPanel.setLayout(new java.awt.CardLayout());

        selectTaskJPanel.setLayout(new javax.swing.BoxLayout(selectTaskJPanel, javax.swing.BoxLayout.LINE_AXIS));

        selectTaskJLabel.setLabelFor(selectTaskJComboBox);
        selectTaskJLabel.setText("Select task:");
        selectTaskJLabel.setPreferredSize(new java.awt.Dimension(80, 15));
        selectTaskJPanel.add(selectTaskJLabel);

        selectTaskJPanel.add(selectTaskJComboBox);

        taskCardJPanel.add(selectTaskJPanel, "taskCard");

        selectTasksJPanel.setLayout(new javax.swing.BoxLayout(selectTasksJPanel, javax.swing.BoxLayout.LINE_AXIS));

        selectTasksJLabel.setLabelFor(selectTasksJList);
        selectTasksJLabel.setText("Select tasks:");
        selectTasksJLabel.setPreferredSize(new java.awt.Dimension(80, 15));
        selectTasksJPanel.add(selectTasksJLabel);

        selectTasksJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        selectTasksJScrollPane.setViewportView(selectTasksJList);

        selectTasksJPanel.add(selectTasksJScrollPane);

        taskCardJPanel.add(selectTasksJPanel, "tasksCard");

        add(taskCardJPanel, java.awt.BorderLayout.CENTER);

        commandsCardJPanel.setLayout(new java.awt.CardLayout());

        workJButton.setText("Start Work");
        workJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workJButtonActionPerformed(evt);
            }
        });
        workCommandsJPanel.add(workJButton);

        commandsCardJPanel.add(workCommandsJPanel, "workCard");

        createTaskGroupJButton.setText("Create Task Group");
        createTaskGroupJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTaskGroupJButtonActionPerformed(evt);
            }
        });
        setupCommandsJPanel.add(createTaskGroupJButton);

        createTaskJButton.setText("Create Task");
        createTaskJButton.setEnabled(false);
        createTaskJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTaskJButtonActionPerformed(evt);
            }
        });
        setupCommandsJPanel.add(createTaskJButton);

        deleteTaskJButton.setText("Delete Task");
        deleteTaskJButton.setEnabled(false);
        deleteTaskJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTaskJButtonActionPerformed(evt);
            }
        });
        setupCommandsJPanel.add(deleteTaskJButton);

        editTaskJButton.setText("Edit Task");
        editTaskJButton.setEnabled(false);
        editTaskJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTaskJButtonActionPerformed(evt);
            }
        });
        setupCommandsJPanel.add(editTaskJButton);

        commandsCardJPanel.add(setupCommandsJPanel, "setupCard");

        compareJButton.setText(bundle.getString("Compare")); // NOI18N
        compareJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareJButtonActionPerformed(evt);
            }
        });
        compareCommandsJPanel.add(compareJButton);

        commandsCardJPanel.add(compareCommandsJPanel, "compareCard");

        add(commandsCardJPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void createTaskGroupJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTaskGroupJButtonActionPerformed
// TODO add your handling code here:
        SanchayJDialog gtDialog = (SanchayJDialog) DialogFactory.showDialog(GenerateTasksJPanel.class, owner, "GenerateTasksJPanel", true);
        
        GenerateTasksJPanel gtPanel = (GenerateTasksJPanel) gtDialog.getJPanel();
        String tgName = gtPanel.getTaskGroupName();
        PropertiesTable tlist = gtPanel.getTaskList();

        if(tgName.equals("") || tgName == null || tlist == null)
            return;
        
        gtDialog.setVisible(false);
        
        addTaskGroup(tgName, tlist);
    }//GEN-LAST:event_createTaskGroupJButtonActionPerformed

    private void taskGroupJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskGroupJComboBoxActionPerformed
// TODO add your handling code here:
        selectTask();
    }//GEN-LAST:event_taskGroupJComboBoxActionPerformed

    private void compareJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_compareJButtonActionPerformed
    {//GEN-HEADEREND:event_compareJButtonActionPerformed
// TODO add your handling code here:
	Object tasks[] = selectTasksJList.getSelectedValues();
	
	if(tasks == null || tasks.length <= 0)
	{
	    JOptionPane.showMessageDialog(this, GlobalProperties.getIntlString("Tasks_not_selected."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
	    return;
	}

	String taskNames[] = new String[tasks.length];

	for(int i = 0; i < tasks.length; i++)
	{
	    taskNames[i] = (String) tasks[i];
	}
	
        JDialog workDialog = new JDialog(this.getOwner(), GlobalProperties.getIntlString("Annotation_Comparison"), true);

        PropertiesTable taskList = getTaskList();

        if(taskList.getRowCount() == 0)
        {
            JOptionPane.showMessageDialog(this, "No task found for which you are the adjudicator.", GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(taskType == SYNTACTIC_ANNOTATION_TASK || taskType == PROPBANK_ANNOTATION_TASK)
	{
            if(taskType == PROPBANK_ANNOTATION_TASK)
            {
                annotationClient = (AnnotationClient) new SSFCorpusAnalyzerJPanel(true);
            }
            else
                annotationClient = (AnnotationClient) new SSFCorpusAnalyzerJPanel();

            selectTasksJList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);

	    annotationClient.setOwner(getOwner());

            ((SSFCorpusAnalyzerJPanel) annotationClient).setTaskList(taskList);

	    ((SSFCorpusAnalyzerJPanel) annotationClient).setTaskName(taskNames[0]);
	    ((SSFCorpusAnalyzerJPanel) annotationClient).setTaskNames(taskNames);
            ((SSFCorpusAnalyzerJPanel) annotationClient).setSelectTaskJPanel(this);
	}
	else if(taskType == PARALLEL_MARKUP_TASK)
	{
            annotationClient = (AnnotationClient) new ParallelMarkupAnalyzerJPanel();
	    ((ParallelMarkupAnalyzerJPanel) annotationClient).setTaskNames(taskNames);
	}

        ((SanchayClient) annotationClient).setOwner(this.getOwner());
        ((JPanelDialog) annotationClient).setDialog(workDialog);
        ((WorkJPanelInterface) annotationClient).configure();

//	((SSFCompareJPanel) workJPanel).compare();
        
        workDialog.add((JPanel) annotationClient);
//        workDialog.setBounds(230, 30, 600, 700);
	
        int inset = 5;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        workDialog.setBounds(inset, inset,
		screenSize.width  - inset*2,
		screenSize.height - inset*9);

	workDialog.setVisible(true);
	
	annotationClient.setWorkJPanel((JPanel) annotationClient);
    }//GEN-LAST:event_compareJButtonActionPerformed

    private void modeJComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_modeJComboBoxActionPerformed
    {//GEN-HEADEREND:event_modeJComboBoxActionPerformed
// TODO add your handling code here:
        if(modeJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Work")))
        {
            ((CardLayout) taskCardJPanel.getLayout()).show(taskCardJPanel, "taskCard");
            ((CardLayout) commandsCardJPanel.getLayout()).show(commandsCardJPanel, "workCard");
        }
        else if(modeJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Compare")))
        {
            ((CardLayout) taskCardJPanel.getLayout()).show(taskCardJPanel, "tasksCard");
            ((CardLayout) commandsCardJPanel.getLayout()).show(commandsCardJPanel, "compareCard");
        }
        else if(modeJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Setup")))
        {
            ((CardLayout) taskCardJPanel.getLayout()).show(taskCardJPanel, "taskCard");
            ((CardLayout) commandsCardJPanel.getLayout()).show(commandsCardJPanel, "setupCard");
        }

        selectTask();
    }//GEN-LAST:event_modeJComboBoxActionPerformed

    private void editTaskJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTaskJButtonActionPerformed
// TODO add your handling code here:
        String taskName = (String) selectTaskJComboBox.getSelectedItem();
        PropertiesTable taskList = getTaskList();
        Vector rows = taskList.getRows("TaskName", taskName);
        
        if(rows.size() != 1)
        {
            JOptionPane.showMessageDialog(this, GlobalProperties.getIntlString("Task_not_found:_") + taskName, GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            return;
        }
       
        String cols[] = {"TaskKVPropFile", "TaskKVPropCharset"};
        Vector vals = taskList.getValues("TaskName", taskName, cols);

        vals = (Vector) vals.get(0);
        String taskKVPropFile = (String) vals.get(0);
        String taskKVPropCharset = (String) vals.get(1);

        try
        {
            KeyValueProperties kvp = new KeyValueProperties(taskKVPropFile, taskKVPropCharset);
            JDialog taskDialog = new JDialog(this.getOwner(), GlobalProperties.getIntlString("Edit_Task"), true);
            
            if(taskType == PARALLEL_MARKUP_TASK)
                taskJPanel = new ParallelMarkupTaskSetupJPanel(kvp);
            else if(taskType == SYNTACTIC_ANNOTATION_TASK || taskType == PROPBANK_ANNOTATION_TASK)
                taskJPanel = new SyntacticAnnotationTaskSetupJPanel(kvp);
                    
            ((SanchayClient) taskJPanel).setOwner(this.getOwner());
            ((JPanelDialog) taskJPanel).setDialog(taskDialog);
                    
            taskDialog.add(taskJPanel);
            taskDialog.setBounds(280, 180, 500, 400);

            ((TaskSetupJPanelInterface) taskJPanel).setTaskList((DefaultComboBoxModel) selectTaskJComboBox.getModel());
            
            taskDialog.setVisible(true);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, GlobalProperties.getIntlString("Error_in_task_properties_for_the_task:_") + taskName, GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_editTaskJButtonActionPerformed

    private void deleteTaskJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTaskJButtonActionPerformed
        // TODO add your handling code here:
        String taskName = (String) selectTaskJComboBox.getSelectedItem();
        PropertiesTable taskList = getTaskList();
        Vector rows = taskList.getRows(GlobalProperties.getIntlString("TaskName"), taskName);
        
        if(rows.size() == 0)
        {
            JOptionPane.showMessageDialog(this, GlobalProperties.getIntlString("Task_name_does_not_exist:_") + taskName, GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        selectTaskJComboBox.removeItem(taskName);
        
        taskList.removeRows("TaskName", taskName);

        try {
            taskList.save();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, GlobalProperties.getIntlString("Error"), GlobalProperties.getIntlString("Could_not_save_task_list."), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteTaskJButtonActionPerformed

    private void workJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workJButtonActionPerformed
        // TODO add your handling code here:
        String taskName = (String) selectTaskJComboBox.getSelectedItem();
        
        if(annotationClient instanceof JPanel)
        {
            ((WorkJPanelInterface) annotationClient).setTaskName(taskName);
            ((WorkJPanelInterface) annotationClient).configure();
            dialog.setVisible(false);
        }
        else
        {
            JDialog workDialog = new JDialog(owner, taskName, Dialog.ModalityType.APPLICATION_MODAL);
            
            if(taskType == PARALLEL_MARKUP_TASK)
                annotationClient = (AnnotationClient) new ParallelMarkupWorkJPanel();
            else if(taskType == SYNTACTIC_ANNOTATION_TASK || taskType == PROPBANK_ANNOTATION_TASK)
                annotationClient = (AnnotationClient) new SyntacticAnnotationWorkJPanel();
    //        else if(taskType == SENTENCE_ALIGNMENT_TASK)
    //            annotationClient = new SenAlignWorkJPanel();

            ((SanchayClient) annotationClient).setOwner(owner);
            ((JPanelDialog) annotationClient).setDialog(workDialog);
            ((WorkJPanelInterface) annotationClient).setTaskName(taskName);
            ((WorkJPanelInterface) annotationClient).configure();

            workDialog.add((JPanel) annotationClient);
    //        workDialog.setBounds(230, 30, 600, 700);

            int inset = 5;
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            workDialog.setBounds(inset, inset,
                    screenSize.width  - inset*2,
                    screenSize.height - inset*9);

            annotationClient.setWorkJPanel((JPanel) annotationClient); 

            workDialog.setVisible(true);
        }

    }//GEN-LAST:event_workJButtonActionPerformed

    private void createTaskJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTaskJButtonActionPerformed
        // TODO add your handling code here:
        JDialog taskDialog = new JDialog(this.getOwner(), GlobalProperties.getIntlString("Task_Panel"), true);

        if(taskType == PARALLEL_MARKUP_TASK)
            taskJPanel = new ParallelMarkupTaskSetupJPanel();
        else if(taskType == SYNTACTIC_ANNOTATION_TASK || taskType == PROPBANK_ANNOTATION_TASK)
            taskJPanel = new SyntacticAnnotationTaskSetupJPanel();
//        else if(taskType == SENTENCE_ALIGNMENT_TASK)
//            taskJPanel = new TaskSetup();
        
        ((SanchayClient) taskJPanel).setOwner(this.getOwner());
        ((JPanelDialog) taskJPanel).setDialog(taskDialog);
        
        taskDialog.add(taskJPanel);
        taskDialog.setBounds(280, 180, 500, 400);
        
        ((TaskSetupJPanelInterface) taskJPanel).setTaskList((DefaultComboBoxModel) selectTaskJComboBox.getModel());

        taskDialog.setVisible(true);
    }//GEN-LAST:event_createTaskJButtonActionPerformed
    
    public Frame getOwner()
    {
        return owner;
    }

    public void setOwner(Frame jframe)
    {
        owner = (JFrame) jframe;        
    }
    
    public void setAnnotationClient(AnnotationClient annotationClient)
    {
        this.annotationClient = annotationClient;
        
        PropertiesManager pm = annotationClient.getPropertiesManager();
        
        PropertiesTable taskGroups = (PropertiesTable) pm.getPropertyContainer("TaskGroups", PropertyType.PROPERTY_TABLE);
        Vector vtg = taskGroups.getColumn("TaskGroup");
        DefaultComboBoxModel tgcm = new DefaultComboBoxModel(vtg);
        taskGroupJComboBox.setModel(tgcm);        
        
        selectTask();
    }
    
    private void selectTask()
    {
        PropertiesTable taskList = getTaskList();
        
        Vector vtl = taskList.getColumn("TaskName");
        DefaultComboBoxModel tlcm = new DefaultComboBoxModel(vtl);
        selectTaskJComboBox.setModel(tlcm);
	selectTasksJList.setModel(tlcm);        
    }
    
    public PropertiesTable getTaskList()
    {
        PropertiesManager pm = annotationClient.getPropertiesManager();
        
        PropertiesTable taskGroups = (PropertiesTable) pm.getPropertyContainer("TaskGroups", PropertyType.PROPERTY_TABLE);

        String selTaskGroup = (String) taskGroupJComboBox.getSelectedItem();
        String selTaskList = (String) taskGroups.getValue("TaskGroup", selTaskGroup, "TaskList");
        String selTaskListCharset = (String) taskGroups.getValue("TaskGroup", selTaskGroup, "TaskListCharset");

        PropertiesTable taskList = null;
        
        try {
            taskList = new PropertiesTable(selTaskList, selTaskListCharset);
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

        if(modeJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Work")))
        {
            int rcount = taskList.getRowCount();

            for (int i = 0; i >= 0 && i < rcount; i++)
            {
                String tname = (String) taskList.getValueAt(i, 0);

                if(isOwnTask(taskList, tname) == false
                        && isTaskClaimed(taskList, tname))
                {
                    taskList.removeRow(i--);
                    rcount--;
                }
            }
        }
        else if(modeJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Compare")))
        {
            int rcount = taskList.getRowCount();

            for (int i = 0; i >= 0 && i < rcount; i++)
            {
                String tname = (String) taskList.getValueAt(i, 0);

                if(isTaskClaimed(taskList, tname) == false || isAdjudicator(taskList, tname) == false)
                {
                    taskList.removeRow(i--);
                    rcount--;
                }
            }
        }
        
        annotationClient.setTaskList(taskList);
        
        return taskList;
    }

    public static boolean isOwnTask(PropertiesTable taskList, String tn)
    {
        String user = System.getProperty("user.name");

        String u1 = (String) taskList.getValue("TaskName", tn, "User1");
        String u2 = (String) taskList.getValue("TaskName", tn, "User2");

        if(u1.equalsIgnoreCase(user) || u2.equalsIgnoreCase(user))
            return true;

        return false;
    }

    public static boolean isTaskClaimed(PropertiesTable taskList, String tn)
    {
        String u1 = (String) taskList.getValue("TaskName", tn, "User1");
        String u2 = (String) taskList.getValue("TaskName", tn, "User2");

        if(!u1.equalsIgnoreCase("NONE") && !u2.equalsIgnoreCase("NONE"))
            return true;

        return false;
    }

    public static boolean isAdjudicator(PropertiesTable taskList, String tn)
    {
        if(taskList == null || taskList.getRowCount() <= 0)
            return false;

        String user = System.getProperty("user.name");

        String a1 = (String) taskList.getValue("TaskName", tn, "Adjudicator1");
        String a2 = (String) taskList.getValue("TaskName", tn, "Adjudicator2");

        if(a1.equalsIgnoreCase(user) || a2.equalsIgnoreCase(user))
            return true;

        return false;
    }

    public static String[] getTaskUsers(PropertiesTable taskList, String tn)
    {
        String u1 = (String) taskList.getValue("TaskName", tn, "User1");
        String u2 = (String) taskList.getValue("TaskName", tn, "User2");

        return new String[]{u1, u2};
    }
    
    public void addTaskGroup(String tgName, PropertiesTable tl)
    {
        PropertiesManager pm = annotationClient.getPropertiesManager();
        
        PropertiesTable taskGroups = (PropertiesTable) pm.getPropertyContainer("TaskGroups", PropertyType.PROPERTY_TABLE);

        String newTaskListPath = (String) tl.getFilePath();
        String newTaskListCharset = (String) tl.getCharset();
        
        Vector v = taskGroups.getRows("TaskGroup", tgName);

        if(v != null && v.size() > 0)
        {
            JOptionPane.showMessageDialog(this, GlobalProperties.getIntlString("Error"), GlobalProperties.getIntlString("Task_group_already_exists."), JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        taskGroups.addRow(new String[]{tgName, newTaskListPath, newTaskListCharset});
        
        try {
            taskGroups.save();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        Vector vtg = taskGroups.getColumn("TaskGroup");
        DefaultComboBoxModel tgcm = new DefaultComboBoxModel(vtg);
        taskGroupJComboBox.setModel(tgcm);
        
        taskGroupJComboBox.setSelectedItem(tgName);
        
        selectTask();
    }
    
    public void setDialog(JDialog d)
    {
        dialog = d;
    }
    
    public void setTaskList(DefaultComboBoxModel l)
    {
        taskListComboBoxModel = l;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel commandsCardJPanel;
    public javax.swing.JPanel compareCommandsJPanel;
    public javax.swing.JButton compareJButton;
    public javax.swing.JButton createTaskGroupJButton;
    public javax.swing.JButton createTaskJButton;
    public javax.swing.JButton deleteTaskJButton;
    public javax.swing.JButton editTaskJButton;
    public javax.swing.JComboBox modeJComboBox;
    public javax.swing.JLabel modeJLabel;
    public javax.swing.JPanel modeJPanel;
    public javax.swing.JComboBox selectTaskJComboBox;
    public javax.swing.JLabel selectTaskJLabel;
    public javax.swing.JPanel selectTaskJPanel;
    public javax.swing.JLabel selectTasksJLabel;
    public javax.swing.JList selectTasksJList;
    public javax.swing.JPanel selectTasksJPanel;
    public javax.swing.JScrollPane selectTasksJScrollPane;
    public javax.swing.JPanel setupCommandsJPanel;
    public javax.swing.JPanel taskCardJPanel;
    public javax.swing.JComboBox taskGroupJComboBox;
    public javax.swing.JLabel taskGroupJLabel;
    public javax.swing.JPanel taskGroupJPanel;
    public javax.swing.JPanel topJPanel;
    public javax.swing.JPanel workCommandsJPanel;
    public javax.swing.JButton workJButton;
    // End of variables declaration//GEN-END:variables
    
}
