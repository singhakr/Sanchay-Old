/*
 * FindReplaceJPanel.java
 *
 * Created on March 1, 2006, 8:03 PM
 */

package sanchay.gui.common;

import java.awt.event.ActionEvent;
import java.io.*;
import java.awt.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathExpressionException;
import org.xml.sax.SAXException;
import sanchay.GlobalProperties;
import sanchay.common.types.*;
import sanchay.context.KWIKContextModels;
import sanchay.corpus.manager.gui.KwikJPanel;
import sanchay.gui.actions.FindReplaceAction;
import sanchay.gui.clients.SanchayClient;
import sanchay.text.editor.gui.TextEditorJPanel;
import sanchay.util.UtilityFunctions;
import sanchay.util.query.FindReplace;
import sanchay.util.query.FindReplaceOptions;
import sanchay.common.types.ClientType;

/**
 *
 * @author  anil
 */
public class IntegratedResourceAccessorJPanel extends javax.swing.JPanel implements SanchayClient , sanchay.gui.common.JPanelDialog {

    protected ClientType clientType = ClientType.INTEGRATED_RESOURCE_ACCESSOR;
    
    protected JFrame owner;
    protected JDialog dialog;
    protected Component parentComponent;

    protected String title = "";
    protected String langEnc;
    
    protected FindReplace findReplace;

    protected FindReplaceOptions findReplaceOptions;
    
    protected DefaultComboBoxModel readCorpusTypes;
    protected DefaultComboBoxModel writeCorpusTypes;

    protected JPanel contentJPanel;
    
    protected int matchCount;
    
    protected File inputFile;
    protected File outputFile;
    
    protected File selFile;
    
    protected Hashtable actionMap;
    protected FindReplaceAction actions[];
    
    protected boolean optionsShown;
    protected boolean kwikViewShown;

    private DefaultComboBoxModel langauges;
    protected ResourceQueryOptionsJPanel resourceQueryOptionsJPanel;

    /** Creates new form IntegratedResourceAccessorJPanel */
    public IntegratedResourceAccessorJPanel() {
	this(false, false);
    }

    // Non-stand-alone mode
    public IntegratedResourceAccessorJPanel(boolean replaceMode, boolean batchMode, JPanel contentJPanel) {
	this(replaceMode, batchMode);

	findReplaceOptions.standAlone = false;
	this.contentJPanel = contentJPanel;
	
	initLanguage();
	
	if(contentJPanel instanceof TextEditorJPanel)
	{
	    selFile = new File( ((TextEditorJPanel) contentJPanel).getDisplayedFile(null));
	    findReplaceOptions.charset = ((TextEditorJPanel) contentJPanel).getCharset(null);

	    String findText = ((TextEditorJPanel) contentJPanel).textJTextArea.getSelectedText();
	    findTextJComboBox.getEditor().setItem(findText);
	    
	    findTextEdited();
	}
	
	commonOptionsJPanel.remove(cleanBeforeJCheckBox);
	commonOptionsJPanel.remove(recreateDirStrJCheckBox);
	commonOptionsJPanel.remove(extractionModeJCheckBox);
	((GridLayout) commonOptionsJPanel.getLayout()).setColumns(3);
    }

    // Stand-alone mode
    public IntegratedResourceAccessorJPanel(boolean replaceMode, boolean batchMode) {
	super();
	
	optionsShown = true;

	findReplaceOptions = new FindReplaceOptions();

	findReplaceOptions.standAlone = true;
	findReplaceOptions.replaceMode = replaceMode;
	findReplaceOptions.batchMode = batchMode;

	initComponents();
	
        parentComponent = this;
	langauges = new DefaultComboBoxModel();
	SanchayLanguages.fillLanguages(langauges);
	languageJComboBox.setModel(langauges);
	
	initActions();
	fillActionButtions();
       

	resourceQueryOptionsJPanel = new ResourceQueryOptionsJPanel();
        //ssfOptionsJPanel.add(resourceQueryOptionsJPanel, BorderLayout.CENTER);
        //ngramOptionsJPanel.add(resourceQueryOptionsJPanel, BorderLayout.CENTER);
        //xmlOptionsJPanel.add(resourceQueryOptionsJPanel, BorderLayout.CENTER);
        readCorpusTypes = new DefaultComboBoxModel();
        writeCorpusTypes = new DefaultComboBoxModel();
	
	configure();
	setDefaults();
	
	initLanguage();
	
	contentJPanel = mainContentJPanel;

	replaceModeJCheckBox.setSelected(replaceMode);
	enableReplaceMode(replaceMode);

	topJPanel.setVisible(batchMode);
	filesJSplitPane.setVisible(batchMode);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topJPanel = new javax.swing.JPanel();
        languageJPanel = new javax.swing.JPanel();
        languageJLabel = new javax.swing.JLabel();
        languageJComboBox = new javax.swing.JComboBox();
        corpusTypeJPanel = new javax.swing.JPanel();
        corpusTypeLeftJPanel = new javax.swing.JPanel();
        readAsJLabel = new javax.swing.JLabel();
        saveAsJLabel = new javax.swing.JLabel();
        corpusTypeRightJPanel = new javax.swing.JPanel();
        readAsJComboBox = new javax.swing.JComboBox();
        saveAsJComboBox = new javax.swing.JComboBox();
        ioJPanel = new javax.swing.JPanel();
        inDirJPanel = new javax.swing.JPanel();
        inDirJLabel = new javax.swing.JLabel();
        inDirJTextField = new javax.swing.JTextField();
        inDirJButton = new javax.swing.JButton();
        outDirJPanel = new javax.swing.JPanel();
        outDirJLabel = new javax.swing.JLabel();
        outDirJTextField = new javax.swing.JTextField();
        outDirJButton = new javax.swing.JButton();
        charsetJPanel = new javax.swing.JPanel();
        charsetJLabel = new javax.swing.JLabel();
        charsetJTextField = new javax.swing.JTextField();
        mainJPanel = new javax.swing.JPanel();
        textJPanel = new javax.swing.JPanel();
        innerTextJPanel = new javax.swing.JPanel();
        leftJPanel = new javax.swing.JPanel();
        findTextJLabel = new javax.swing.JLabel();
        replaceWithJLabel = new javax.swing.JLabel();
        rightJPanel = new javax.swing.JPanel();
        findTextJComboBox = new javax.swing.JComboBox();
        replaceWithJComboBox = new javax.swing.JComboBox();
        optionsJPanel = new javax.swing.JPanel();
        commonOptionsJPanel = new javax.swing.JPanel();
        replaceModeJCheckBox = new javax.swing.JCheckBox();
        searchBackwardsJCheckBox = new javax.swing.JCheckBox();
        highlightResultsJCheckBox = new javax.swing.JCheckBox();
        regexJCheckBox = new javax.swing.JCheckBox();
        matchCaseJCheckBox = new javax.swing.JCheckBox();
        multilineJCheckBox = new javax.swing.JCheckBox();
        unicodeCaseJCheckBox = new javax.swing.JCheckBox();
        unixLinesJCheckBox = new javax.swing.JCheckBox();
        canonicalEqJCheckBox = new javax.swing.JCheckBox();
        cleanBeforeJCheckBox = new javax.swing.JCheckBox();
        recreateDirStrJCheckBox = new javax.swing.JCheckBox();
        extractionModeJCheckBox = new javax.swing.JCheckBox();
        corpusOptionsJPanel = new javax.swing.JPanel();
        allCorpusOptionsJPanel = new javax.swing.JPanel();
        commonCorpusOptionsJPanel = new javax.swing.JPanel();
        specialCorpusOptionsJPanel = new javax.swing.JPanel();
        filesJSplitPane = new javax.swing.JSplitPane();
        leftListJPanel = new javax.swing.JPanel();
        listTopJPanel = new javax.swing.JPanel();
        listTopJLabel = new javax.swing.JLabel();
        fileListJScrollPane = new javax.swing.JScrollPane();
        fileListJList = new javax.swing.JList();
        fileContentJPanel = new javax.swing.JPanel();
        mainContentJPanel = new javax.swing.JPanel();
        kwikContentJPanel = new javax.swing.JPanel();
        commandsJPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout(4, 4));

        topJPanel.setLayout(new javax.swing.BoxLayout(topJPanel, javax.swing.BoxLayout.Y_AXIS));

        languageJPanel.setLayout(new java.awt.BorderLayout());

        languageJLabel.setLabelFor(languageJComboBox);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        languageJLabel.setText(bundle.getString("Language:_")); // NOI18N
        languageJPanel.add(languageJLabel, java.awt.BorderLayout.WEST);

        languageJPanel.add(languageJComboBox, java.awt.BorderLayout.CENTER);

        topJPanel.add(languageJPanel);

        corpusTypeJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Corpus Type"));
        corpusTypeJPanel.setLayout(new java.awt.BorderLayout());

        corpusTypeLeftJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        readAsJLabel.setLabelFor(readAsJComboBox);
        readAsJLabel.setText(bundle.getString("Read_as:_")); // NOI18N
        corpusTypeLeftJPanel.add(readAsJLabel);

        saveAsJLabel.setLabelFor(saveAsJComboBox);
        saveAsJLabel.setText(bundle.getString("Save_as:_")); // NOI18N
        corpusTypeLeftJPanel.add(saveAsJLabel);

        corpusTypeJPanel.add(corpusTypeLeftJPanel, java.awt.BorderLayout.WEST);

        corpusTypeRightJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        readAsJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readAsJComboBoxActionPerformed(evt);
            }
        });
        corpusTypeRightJPanel.add(readAsJComboBox);

        saveAsJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsJComboBoxActionPerformed(evt);
            }
        });
        corpusTypeRightJPanel.add(saveAsJComboBox);

        corpusTypeJPanel.add(corpusTypeRightJPanel, java.awt.BorderLayout.CENTER);

        topJPanel.add(corpusTypeJPanel);

        ioJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("I/O"));
        ioJPanel.setLayout(new javax.swing.BoxLayout(ioJPanel, javax.swing.BoxLayout.Y_AXIS));

        inDirJPanel.setLayout(new java.awt.BorderLayout());

        inDirJLabel.setDisplayedMnemonic('I');
        inDirJLabel.setLabelFor(inDirJTextField);
        inDirJLabel.setText(bundle.getString("Input_directory:")); // NOI18N
        inDirJPanel.add(inDirJLabel, java.awt.BorderLayout.NORTH);
        inDirJPanel.add(inDirJTextField, java.awt.BorderLayout.CENTER);

        inDirJButton.setText(bundle.getString("Browse")); // NOI18N
        inDirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inDirJButtonActionPerformed(evt);
            }
        });
        inDirJPanel.add(inDirJButton, java.awt.BorderLayout.EAST);

        ioJPanel.add(inDirJPanel);

        outDirJPanel.setLayout(new java.awt.BorderLayout());

        outDirJLabel.setDisplayedMnemonic('O');
        outDirJLabel.setLabelFor(outDirJTextField);
        outDirJLabel.setText(bundle.getString("Output_directory:")); // NOI18N
        outDirJPanel.add(outDirJLabel, java.awt.BorderLayout.NORTH);
        outDirJPanel.add(outDirJTextField, java.awt.BorderLayout.CENTER);

        outDirJButton.setText(bundle.getString("Browse")); // NOI18N
        outDirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outDirJButtonActionPerformed(evt);
            }
        });
        outDirJPanel.add(outDirJButton, java.awt.BorderLayout.EAST);

        ioJPanel.add(outDirJPanel);

        charsetJPanel.setLayout(new java.awt.BorderLayout());

        charsetJLabel.setLabelFor(charsetJTextField);
        charsetJLabel.setText(bundle.getString("Charset_or_encoding:_")); // NOI18N
        charsetJPanel.add(charsetJLabel, java.awt.BorderLayout.WEST);

        charsetJTextField.setText(bundle.getString("UTF8")); // NOI18N
        charsetJPanel.add(charsetJTextField, java.awt.BorderLayout.CENTER);

        ioJPanel.add(charsetJPanel);

        topJPanel.add(ioJPanel);

        add(topJPanel, java.awt.BorderLayout.NORTH);

        mainJPanel.setLayout(new java.awt.BorderLayout(0, 4));

        textJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Text"));
        textJPanel.setLayout(new java.awt.BorderLayout(4, 4));

        innerTextJPanel.setLayout(new java.awt.BorderLayout());

        leftJPanel.setLayout(new java.awt.GridLayout(0, 1, 4, 4));

        findTextJLabel.setDisplayedMnemonic('T');
        findTextJLabel.setLabelFor(findTextJComboBox);
        findTextJLabel.setText(bundle.getString("Find_text:")); // NOI18N
        leftJPanel.add(findTextJLabel);

        replaceWithJLabel.setDisplayedMnemonic('W');
        replaceWithJLabel.setLabelFor(replaceWithJComboBox);
        replaceWithJLabel.setText(bundle.getString("Replace_with:")); // NOI18N
        leftJPanel.add(replaceWithJLabel);

        innerTextJPanel.add(leftJPanel, java.awt.BorderLayout.WEST);

        rightJPanel.setLayout(new java.awt.GridLayout(0, 1, 4, 4));

        findTextJComboBox.setEditable(true);
        findTextJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findTextJComboBoxActionPerformed(evt);
            }
        });
        rightJPanel.add(findTextJComboBox);

        replaceWithJComboBox.setEditable(true);
        replaceWithJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceWithJComboBoxActionPerformed(evt);
            }
        });
        rightJPanel.add(replaceWithJComboBox);

        innerTextJPanel.add(rightJPanel, java.awt.BorderLayout.CENTER);

        textJPanel.add(innerTextJPanel, java.awt.BorderLayout.NORTH);

        optionsJPanel.setLayout(new java.awt.BorderLayout());

        commonOptionsJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Find/Replace Options"));
        commonOptionsJPanel.setLayout(new java.awt.GridLayout(0, 4, 4, 4));

        replaceModeJCheckBox.setText(bundle.getString("Replace_mode")); // NOI18N
        replaceModeJCheckBox.setToolTipText(bundle.getString("Replace_mode")); // NOI18N
        replaceModeJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        replaceModeJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceModeJCheckBoxActionPerformed(evt);
            }
        });
        commonOptionsJPanel.add(replaceModeJCheckBox);

        searchBackwardsJCheckBox.setText(bundle.getString("Search_backwards")); // NOI18N
        searchBackwardsJCheckBox.setToolTipText(bundle.getString("Search_backwards")); // NOI18N
        searchBackwardsJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        searchBackwardsJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBackwardsJCheckBoxActionPerformed(evt);
            }
        });
        commonOptionsJPanel.add(searchBackwardsJCheckBox);

        highlightResultsJCheckBox.setSelected(true);
        highlightResultsJCheckBox.setText(bundle.getString("Highlight_Results")); // NOI18N
        highlightResultsJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        highlightResultsJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightResultsJCheckBoxActionPerformed(evt);
            }
        });
        commonOptionsJPanel.add(highlightResultsJCheckBox);

        regexJCheckBox.setText(bundle.getString("Regular_expressions")); // NOI18N
        regexJCheckBox.setToolTipText(bundle.getString("Regular_expressions")); // NOI18N
        regexJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        regexJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regexJCheckBoxActionPerformed(evt);
            }
        });
        commonOptionsJPanel.add(regexJCheckBox);

        matchCaseJCheckBox.setText(bundle.getString("Match_case")); // NOI18N
        matchCaseJCheckBox.setToolTipText(bundle.getString("Match_case")); // NOI18N
        matchCaseJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        matchCaseJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchCaseJCheckBoxActionPerformed(evt);
            }
        });
        commonOptionsJPanel.add(matchCaseJCheckBox);

        multilineJCheckBox.setText(bundle.getString("Multiline")); // NOI18N
        multilineJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        multilineJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multilineJCheckBoxActionPerformed(evt);
            }
        });
        commonOptionsJPanel.add(multilineJCheckBox);

        unicodeCaseJCheckBox.setText(bundle.getString("Unicode_case")); // NOI18N
        unicodeCaseJCheckBox.setToolTipText(bundle.getString("Enables_Unicode-aware_case_folding")); // NOI18N
        unicodeCaseJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        unicodeCaseJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unicodeCaseJCheckBoxActionPerformed(evt);
            }
        });
        commonOptionsJPanel.add(unicodeCaseJCheckBox);

        unixLinesJCheckBox.setText(bundle.getString("Unix_lines")); // NOI18N
        unixLinesJCheckBox.setToolTipText(bundle.getString("Enables_Unix_lines_mode")); // NOI18N
        unixLinesJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        unixLinesJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unixLinesJCheckBoxActionPerformed(evt);
            }
        });
        commonOptionsJPanel.add(unixLinesJCheckBox);

        canonicalEqJCheckBox.setText(bundle.getString("Canonical_equivalence")); // NOI18N
        canonicalEqJCheckBox.setToolTipText(bundle.getString("Enables_canonical_equivalence")); // NOI18N
        canonicalEqJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        canonicalEqJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canonicalEqJCheckBoxActionPerformed(evt);
            }
        });
        commonOptionsJPanel.add(canonicalEqJCheckBox);

        cleanBeforeJCheckBox.setSelected(true);
        cleanBeforeJCheckBox.setText(bundle.getString("Clean_output_directory_first")); // NOI18N
        cleanBeforeJCheckBox.setToolTipText(bundle.getString("Clean_output_directory_before_starting")); // NOI18N
        cleanBeforeJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cleanBeforeJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanBeforeJCheckBoxActionPerformed(evt);
            }
        });
        commonOptionsJPanel.add(cleanBeforeJCheckBox);

        recreateDirStrJCheckBox.setText(bundle.getString("Recreate_directory_structure")); // NOI18N
        recreateDirStrJCheckBox.setToolTipText(bundle.getString("Recreate_directory_structure")); // NOI18N
        recreateDirStrJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        recreateDirStrJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recreateDirStrJCheckBoxActionPerformed(evt);
            }
        });
        commonOptionsJPanel.add(recreateDirStrJCheckBox);

        extractionModeJCheckBox.setText(bundle.getString("Extraction_mode")); // NOI18N
        extractionModeJCheckBox.setToolTipText(bundle.getString("Show_only_extracted_matches")); // NOI18N
        extractionModeJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        extractionModeJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractionModeJCheckBoxActionPerformed(evt);
            }
        });
        commonOptionsJPanel.add(extractionModeJCheckBox);

        optionsJPanel.add(commonOptionsJPanel, java.awt.BorderLayout.NORTH);

        corpusOptionsJPanel.setLayout(new java.awt.BorderLayout());

        allCorpusOptionsJPanel.setLayout(new java.awt.BorderLayout());

        org.jdesktop.layout.GroupLayout commonCorpusOptionsJPanelLayout = new org.jdesktop.layout.GroupLayout(commonCorpusOptionsJPanel);
        commonCorpusOptionsJPanel.setLayout(commonCorpusOptionsJPanelLayout);
        commonCorpusOptionsJPanelLayout.setHorizontalGroup(
            commonCorpusOptionsJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 830, Short.MAX_VALUE)
        );
        commonCorpusOptionsJPanelLayout.setVerticalGroup(
            commonCorpusOptionsJPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 15, Short.MAX_VALUE)
        );

        allCorpusOptionsJPanel.add(commonCorpusOptionsJPanel, java.awt.BorderLayout.NORTH);

        specialCorpusOptionsJPanel.setLayout(new java.awt.BorderLayout());
        allCorpusOptionsJPanel.add(specialCorpusOptionsJPanel, java.awt.BorderLayout.CENTER);

        corpusOptionsJPanel.add(allCorpusOptionsJPanel, java.awt.BorderLayout.NORTH);

        optionsJPanel.add(corpusOptionsJPanel, java.awt.BorderLayout.CENTER);

        textJPanel.add(optionsJPanel, java.awt.BorderLayout.CENTER);

        mainJPanel.add(textJPanel, java.awt.BorderLayout.NORTH);

        filesJSplitPane.setOneTouchExpandable(true);

        leftListJPanel.setLayout(new java.awt.BorderLayout());

        listTopJPanel.setLayout(new java.awt.BorderLayout());

        listTopJLabel.setText(bundle.getString("__")); // NOI18N
        listTopJPanel.add(listTopJLabel, java.awt.BorderLayout.CENTER);

        leftListJPanel.add(listTopJPanel, java.awt.BorderLayout.NORTH);

        fileListJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileListJListMouseClicked(evt);
            }
        });
        fileListJScrollPane.setViewportView(fileListJList);

        leftListJPanel.add(fileListJScrollPane, java.awt.BorderLayout.CENTER);

        filesJSplitPane.setLeftComponent(leftListJPanel);

        fileContentJPanel.setLayout(new java.awt.CardLayout());

        mainContentJPanel.setLayout(new java.awt.BorderLayout());
        fileContentJPanel.add(mainContentJPanel, bundle.getString("MainContentPanel")); // NOI18N

        kwikContentJPanel.setLayout(new java.awt.BorderLayout());
        fileContentJPanel.add(kwikContentJPanel, bundle.getString("KWIKContentPanel")); // NOI18N

        filesJSplitPane.setRightComponent(fileContentJPanel);

        mainJPanel.add(filesJSplitPane, java.awt.BorderLayout.CENTER);

        add(mainJPanel, java.awt.BorderLayout.CENTER);
        add(commandsJPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void replaceModeJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceModeJCheckBoxActionPerformed
// TODO add your handling code here:
	enableReplaceMode(replaceModeJCheckBox.isSelected());
    }//GEN-LAST:event_replaceModeJCheckBoxActionPerformed

    private void recreateDirStrJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recreateDirStrJCheckBoxActionPerformed
// TODO add your handling code here:
	if(recreateDirStrJCheckBox.isSelected())
	    findReplaceOptions.recreateDirStr = false;
	else
	    findReplaceOptions.recreateDirStr = true;
    }//GEN-LAST:event_recreateDirStrJCheckBoxActionPerformed

    private void cleanBeforeJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanBeforeJCheckBoxActionPerformed
// TODO add your handling code here:
	if(cleanBeforeJCheckBox.isSelected())
	    findReplaceOptions.clean = false;
	else
	    findReplaceOptions.clean = true;	
    }//GEN-LAST:event_cleanBeforeJCheckBoxActionPerformed

    private void canonicalEqJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canonicalEqJCheckBoxActionPerformed
// TODO add your handling code here:
	if(canonicalEqJCheckBox.isSelected())
	    findReplaceOptions.canonicalEquivalence = false;
	else
	    findReplaceOptions.canonicalEquivalence = true;
    }//GEN-LAST:event_canonicalEqJCheckBoxActionPerformed

    private void unixLinesJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unixLinesJCheckBoxActionPerformed
// TODO add your handling code here:
	if(unixLinesJCheckBox.isSelected())
	    findReplaceOptions.unixLines = false;
	else
	    findReplaceOptions.unixLines = true;
    }//GEN-LAST:event_unixLinesJCheckBoxActionPerformed

    private void unicodeCaseJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unicodeCaseJCheckBoxActionPerformed
// TODO add your handling code here:
	if(unicodeCaseJCheckBox.isSelected())
	    findReplaceOptions.unicodeCase = false;
	else
	    findReplaceOptions.unicodeCase = true;
    }//GEN-LAST:event_unicodeCaseJCheckBoxActionPerformed

    private void multilineJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multilineJCheckBoxActionPerformed
// TODO add your handling code here:
	if(multilineJCheckBox.isSelected())
	    findReplaceOptions.multiline = false;
	else
	    findReplaceOptions.multiline = true;
    }//GEN-LAST:event_multilineJCheckBoxActionPerformed

    private void matchCaseJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchCaseJCheckBoxActionPerformed
// TODO add your handling code here:
	if(matchCaseJCheckBox.isSelected())
	    findReplaceOptions.caseInsensitive = false;
	else
	    findReplaceOptions.caseInsensitive = true;
    }//GEN-LAST:event_matchCaseJCheckBoxActionPerformed

    private void highlightResultsJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightResultsJCheckBoxActionPerformed
// TODO add your handling code here:
	if(highlightResultsJCheckBox.isSelected())
	    findReplaceOptions.highlightResults = true;
	else
	    findReplaceOptions.highlightResults = false;
    }//GEN-LAST:event_highlightResultsJCheckBoxActionPerformed

    private void searchBackwardsJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBackwardsJCheckBoxActionPerformed
// TODO add your handling code here:
	if(searchBackwardsJCheckBox.isSelected())
	    findReplaceOptions.searchBackwards = true;
	else
	    findReplaceOptions.searchBackwards = false;
    }//GEN-LAST:event_searchBackwardsJCheckBoxActionPerformed

    private void regexJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regexJCheckBoxActionPerformed
// TODO add your handling code here:
	enableRegex(regexJCheckBox.isSelected());
    }//GEN-LAST:event_regexJCheckBoxActionPerformed

    private void extractionModeJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractionModeJCheckBoxActionPerformed
// TODO add your handling code here:
	findReplace = null;
    /*
    try {
            initFindReplace();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(FindReplaceJPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(FindReplaceJPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (XPathExpressionException ex) {
            Logger.getLogger(FindReplaceJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
	*/
	enableExtractionMode(extractionModeJCheckBox.isSelected());
    }//GEN-LAST:event_extractionModeJCheckBoxActionPerformed

    private void fileListJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileListJListMouseClicked
// TODO add your handling code here:
	if(evt.getClickCount() == 2)
	{
	    selFile = (File) fileListJList.getSelectedValue();
	    
	    if(selFile != null)
	    {
                try {
                    initFindReplace();
                } catch (ParserConfigurationException ex) {
                    Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SAXException ex) {
                    Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (XPathExpressionException ex) {
                    Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
		
		try
		{
		    matchCount = findReplace.findAll(selFile);
		}
		catch(Exception ex)
		{
		    ex.printStackTrace();
		}
	    }
	}
    }//GEN-LAST:event_fileListJListMouseClicked

    private void replaceWithJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceWithJComboBoxActionPerformed
// TODO add your handling code here:
	replaceWithTextEdited();
    }//GEN-LAST:event_replaceWithJComboBoxActionPerformed

    private void findTextJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findTextJComboBoxActionPerformed
// TODO add your handling code here:
	findTextEdited();
    }//GEN-LAST:event_findTextJComboBoxActionPerformed

    private void outDirJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outDirJButtonActionPerformed
// TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(findReplaceOptions.outDirectory);
	chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
	
        if(returnVal == JFileChooser.APPROVE_OPTION) {
	    File outFile = chooser.getSelectedFile();
	    outDirJTextField.setText(outFile.getAbsolutePath());
        }
    }//GEN-LAST:event_outDirJButtonActionPerformed

    private void inDirJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inDirJButtonActionPerformed
// TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(findReplaceOptions.inDirectory);
	chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = chooser.showOpenDialog(this);
	
        if(returnVal == JFileChooser.APPROVE_OPTION) {
	    File inFile = chooser.getSelectedFile();
	    inDirJTextField.setText(inFile.getAbsolutePath());
        }
    }//GEN-LAST:event_inDirJButtonActionPerformed

    private void saveAsJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsJComboBoxActionPerformed
// TODO add your handling code here:
	String selWriteCorpusType = (String) saveAsJComboBox.getSelectedItem();
	findReplaceOptions.writeCorpusType = (CorpusType) CorpusType.findFromId(selWriteCorpusType);
/*	
	if(findReplaceOptions.writeCorpusType == CorpusType.XML_TAGGED)
	{
	    JOptionPane.showMessageDialog(this, "Saving as " + findReplaceOptions.writeCorpusType + " corpus is not yet supported. Hope it will be done soon.", "Error", JOptionPane.ERROR_MESSAGE);
	    saveAsJComboBox.setSelectedItem(CorpusType.RAW.toString());
	    return;
	}
 *
 */
    }//GEN-LAST:event_saveAsJComboBoxActionPerformed

    private void readAsJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readAsJComboBoxActionPerformed
// TODO add your handling code here:
        String selReadCorpusType = (String) readAsJComboBox.getSelectedItem();
	findReplaceOptions.readCorpusType = (CorpusType) CorpusType.findFromId(selReadCorpusType);

	if(findReplaceOptions.readCorpusType == CorpusType.CHUNKED
		|| findReplaceOptions.readCorpusType == CorpusType.POS_TAGGED
		|| findReplaceOptions.readCorpusType == CorpusType.CHUNKED
		|| findReplaceOptions.readCorpusType == CorpusType.VERTICAL_POS_TAGGED
		|| findReplaceOptions.readCorpusType == CorpusType.BI_FORMAT
		|| findReplaceOptions.readCorpusType == CorpusType.XML_FORMAT
		|| findReplaceOptions.readCorpusType == CorpusType.SSF_FORMAT)
        {
//            initFindReplace();
            
            replaceModeJCheckBox.setSelected(false);
            enableReplaceMode(false);

            extractionModeJCheckBox.setSelected(false);
            enableExtractionMode(false);

//            ssfOptionsJPanel.add(resourceQueryOptionsJPanel, BorderLayout.CENTER);
            ((CardLayout) resourceQueryOptionsJPanel.getLayout()).show(resourceQueryOptionsJPanel, GlobalProperties.getIntlString("Syntactic_Corpus_Query"));
	    corpusOptionsJPanel.setVisible(true);
//          findTextJComboBox.setEnabled(false);
        }
        else if(findReplaceOptions.readCorpusType == CorpusType.NGRAM)
        {
            replaceModeJCheckBox.setSelected(false);
            enableReplaceMode(false);

            extractionModeJCheckBox.setSelected(true);
            enableExtractionMode(true);

  //          ngramOptionsJPanel.add(resourceQueryOptionsJPanel, BorderLayout.CENTER);
            ((CardLayout) resourceQueryOptionsJPanel.getLayout()).show(resourceQueryOptionsJPanel, GlobalProperties.getIntlString("N-Gram_LM_Query"));
            
            corpusOptionsJPanel.setVisible(true);
        }
        else if(findReplaceOptions.readCorpusType == CorpusType.XML_FORMAT)
        {
            replaceModeJCheckBox.setSelected(false);
            enableReplaceMode(false);

            extractionModeJCheckBox.setSelected(false);
            enableExtractionMode(false);

//            ssfOptionsJPanel.add(resourceQueryOptionsJPanel, BorderLayout.CENTER);
            //xmlOptionsJPanel.add(resourceQueryOptionsJPanel, BorderLayout.CENTER);

            ((CardLayout) resourceQueryOptionsJPanel.getLayout()).show(resourceQueryOptionsJPanel, GlobalProperties.getIntlString("XML_Corpus_Query"));

            corpusOptionsJPanel.setVisible(true);
        }
        else
        {
            corpusOptionsJPanel.setVisible(false);
        }
    }//GEN-LAST:event_readAsJComboBoxActionPerformed

    public ClientType getClientType()
    {
        return clientType;
    }

    private void enableExtractionMode(boolean e)
    {
	findReplaceOptions.extractionMode = e;
	fillActionButtions();
    //System.out.println("Enabled Extract Mode");
    }

    private void enableReplaceMode(boolean r)
    {
	if(r == false)
	{
	    leftJPanel.remove(replaceWithJLabel);
	    rightJPanel.remove(replaceWithJComboBox);
	    
	    ((GridLayout) leftJPanel.getLayout()).setRows(1);
	    ((GridLayout) rightJPanel.getLayout()).setRows(1);
	}
	else
	{
	    leftJPanel.add(replaceWithJLabel);
	    rightJPanel.add(replaceWithJComboBox);
	    
	    ((GridLayout) leftJPanel.getLayout()).setRows(2);
	    ((GridLayout) rightJPanel.getLayout()).setRows(2);
	}

	findReplaceOptions.replaceMode = r;
	fillActionButtions();
    }

    private void enableRegex(boolean r)
    {
	findReplaceOptions.regex = r;
	
	if(r)
	{
	    canonicalEqJCheckBox.setEnabled(true);
	    matchCaseJCheckBox.setEnabled(true);
	    multilineJCheckBox.setEnabled(true);
	    unicodeCaseJCheckBox.setEnabled(true);
	    unixLinesJCheckBox.setEnabled(true);
	    
	    findReplaceOptions.multiline = true;
	    multilineJCheckBox.setSelected(true);
	    
	    findReplaceOptions.searchBackwards = false;
	    searchBackwardsJCheckBox.setEnabled(false);
	}
	else
	{
	    canonicalEqJCheckBox.setEnabled(false);
	    matchCaseJCheckBox.setEnabled(false);
	    multilineJCheckBox.setEnabled(false);
	    unicodeCaseJCheckBox.setEnabled(false);
	    unixLinesJCheckBox.setEnabled(false);

	    searchBackwardsJCheckBox.setEnabled(true);
	}
    }
    
    private void findTextEdited()
    {
	if(findTextJComboBox.getSelectedIndex() == -1)
	{
	    String txtString = (String) findTextJComboBox.getEditor().getItem();
	    UtilityFunctions.addItemToJCoboBox(findTextJComboBox, txtString);	
	}
    }
    
    private void replaceWithTextEdited()
    {
	if(replaceWithJComboBox.getSelectedIndex() == -1)
	{
	    String txtString = (String) replaceWithJComboBox.getEditor().getItem();
	    UtilityFunctions.addItemToJCoboBox(replaceWithJComboBox, txtString);	
	}
    }
    
    private void initActions() 
    {
	actionMap = new Hashtable(FindReplaceAction._TOTAL_ACTIONS_);
	actions = new FindReplaceAction[FindReplaceAction._TOTAL_ACTIONS_];
	
	for (int i = 0; i < FindReplaceAction._TOTAL_ACTIONS_; i++)
	{
	    FindReplaceAction act = FindReplaceAction.createAction(this, i);
	    actionMap.put(act.getValue(AbstractAction.NAME), act);
	    actions[i] = act;
	}
    }
    
    private void fillActionButtions()
    {
	commandsJPanel.removeAll();
	
	JButton button = new JButton(actions[FindReplaceAction.CLOSE_ACTION]);
	commandsJPanel.add(button);

	if(findReplaceOptions.batchMode)
	{
	    button = new JButton(actions[FindReplaceAction.SAVE_OUTPUT_ACTION]);
	    commandsJPanel.add(button);
	}

	if(findReplaceOptions.replaceMode)
	{
	    button = new JButton(actions[FindReplaceAction.REPLACE_ALL_ACTION]);
	    commandsJPanel.add(button);

	    button = new JButton(actions[FindReplaceAction.REPLACE_ACTION]);
	    commandsJPanel.add(button);
	}

	button = new JButton(actions[FindReplaceAction.DEFAULTS_ACTION]);
	commandsJPanel.add(button);

	if(findReplaceOptions.batchMode)
	{
	    button = new JButton(actions[FindReplaceAction.SHOW_OPTIONS_ACTION]);
	    commandsJPanel.add(button);
	}

	button = new JButton(actions[FindReplaceAction.FIND_EXTRACT_ACTION]);
	commandsJPanel.add(button);

	button = new JButton(actions[FindReplaceAction.KWIK_VIEW_ACTION]);
	commandsJPanel.add(button);

//	button = new JButton(actions[FindReplaceAction.SIMILAR_DOC_ACTION]);
//	commandsJPanel.add(button);
	
	commandsJPanel.setVisible(false);
	commandsJPanel.setVisible(true);
    }
    
    private boolean initFindReplace() throws ParserConfigurationException, ParserConfigurationException, SAXException, XPathExpressionException, Exception
    {	
	findTextEdited();
	replaceWithTextEdited();
	
	if(findReplace != null)
	{
	    if(findTextJComboBox.getSelectedItem().equals(findReplaceOptions.findText))
		return validateFRSpec();
	    else
		findReplace = null;
	}
	
	if(findReplace == null)
	{
	    if(validateFRSpec() == true)
	    {
		try {
		    if(findReplaceOptions.batchMode)
		    {
			mainContentJPanel.removeAll();
			kwikContentJPanel.removeAll();
			filesJSplitPane.setVisible(false);
			filesJSplitPane.setVisible(true);
			
			findReplace = new FindReplace(findReplaceOptions, fileListJList, mainContentJPanel);
			
//			if(fileListJList.getModel().getSize() > 0)
//			{
//			    fileListJList.setSelectedIndex(0);
//			    findReplace.findAll((File) fileListJList.getSelectedValue());
//			    findReplace.find();
//			}
		    }
		    else
			findReplace = new FindReplace(findReplaceOptions, contentJPanel);
		    
		    return true;
		    
		} catch (FileNotFoundException ex) {
		    ex.printStackTrace();
		} catch (IOException ex) {
		    ex.printStackTrace();
		}
	    }
	    else
		return false;
	}	
	
	return false;
    }
    
    private void find() throws ParserConfigurationException, SAXException, XPathExpressionException, Exception
    {
	initFindReplace();
	
	if(findReplace != null && findReplace.find() == FindReplace.NOT_FOUND
		&& ((findReplaceOptions.standAlone == false && contentJPanel != null)
		    || (findReplaceOptions.batchMode == true && contentJPanel.getComponentCount() > 0)))
	{
	    if(matchCount > 1)
    		find();
	}
    }
    
    private void replace() throws ParserConfigurationException, SAXException, XPathExpressionException, Exception
    {
	initFindReplace();
	
	if(findReplace != null && findReplace.replace() == FindReplace.NOT_FOUND
		&& ((findReplaceOptions.standAlone == false && contentJPanel != null)
		    || (findReplaceOptions.batchMode == true && contentJPanel.getComponentCount() > 0)))
	{
	    JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("All_possible_replacements_made."), GlobalProperties.getIntlString("Search_Ended"), JOptionPane.INFORMATION_MESSAGE);
//	    if(matchCount > 1)
//    		replace();
	}
    }
    
    public void configure()
    {
        if(readCorpusTypes != null)
            readCorpusTypes.removeAllElements();

	if(writeCorpusTypes != null)
            writeCorpusTypes.removeAllElements();

        Enumeration enm = CorpusType.elements();
        while(enm.hasMoreElements())
        {
            CorpusType ct = (CorpusType) enm.nextElement();
	    
	    readCorpusTypes.addElement(ct.toString());
	    writeCorpusTypes.addElement(ct.toString());
        }
        
        readAsJComboBox.setModel(readCorpusTypes);
        saveAsJComboBox.setModel(writeCorpusTypes);
	
	corpusOptionsJPanel.setVisible(false);

        specialCorpusOptionsJPanel.add(resourceQueryOptionsJPanel, BorderLayout.CENTER);
        ((CardLayout) fileContentJPanel.getLayout()).show(fileContentJPanel, GlobalProperties.getIntlString("MainContentPanel"));
    }

    public boolean validateFRSpec()
    {
	initLanguage();
	
	if(findReplaceOptions.batchMode)
	{
	    String selReadCorpusType = (String) readAsJComboBox.getSelectedItem();
	    findReplaceOptions.readCorpusType = (CorpusType) CorpusType.findFromId(selReadCorpusType);

	    String selWriteCorpusType = (String) saveAsJComboBox.getSelectedItem();
	    findReplaceOptions.writeCorpusType = (CorpusType) CorpusType.findFromId(selWriteCorpusType);

	    findReplaceOptions.inDirectory = inDirJTextField.getText();
	    findReplaceOptions.outDirectory = outDirJTextField.getText();

	    inputFile = new File(findReplaceOptions.inDirectory);
	    outputFile = new File(findReplaceOptions.outDirectory);

	    if(inputFile.exists() == false)
	    {
		JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Couldn't_find_input_directory."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
		return false;
	    }
	    else if(inputFile.canRead() == false)
	    {
		JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("No_read_permission_for_input_directory:\n") + findReplaceOptions.inDirectory, GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
		return false;
	    }
	    else if(inputFile.canWrite() == false)
	    {
		JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("No_write_permission_for_input_directory:\n") + findReplaceOptions.inDirectory, GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
		return false;
	    }

	    if(findReplaceOptions.outDirectory != null && findReplaceOptions.outDirectory.equals("") == false && outputFile.exists() == true && outputFile.canWrite() == false)
	    {
		JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("No_write_permission_for_output_directory:\n") + findReplaceOptions.inDirectory, GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
		return false;
	    }

	    findReplaceOptions.charset = charsetJTextField.getText();
/*
	    if(FileSplitter.validateCorpusType(inputFile, findReplaceOptions.charset, findReplaceOptions.readCorpusType) == false)
	    {
		JOptionPane.showMessageDialog(parentComponent, "Corpus type of input files may not be " + findReplaceOptions.readCorpusType.toString(), "Error", JOptionPane.ERROR_MESSAGE);
		return false;
	    }
 *
 */
	}
	
	findReplaceOptions.replaceMode = replaceModeJCheckBox.isSelected();

	findReplaceOptions.findText = (String) findTextJComboBox.getSelectedItem();
	findReplaceOptions.replaceWith = (String) replaceWithJComboBox.getSelectedItem();
	
	findReplaceOptions.searchBackwards = searchBackwardsJCheckBox.isSelected();
	findReplaceOptions.highlightResults = highlightResultsJCheckBox.isSelected();

	findReplaceOptions.regex = regexJCheckBox.isSelected();

	findReplaceOptions.canonicalEquivalence = canonicalEqJCheckBox.isSelected();
	findReplaceOptions.caseInsensitive = ! matchCaseJCheckBox.isSelected();
	findReplaceOptions.multiline = multilineJCheckBox.isSelected();
	findReplaceOptions.unicodeCase = unicodeCaseJCheckBox.isSelected();
	findReplaceOptions.unixLines = unixLinesJCheckBox.isSelected();

	findReplaceOptions.clean = cleanBeforeJCheckBox.isSelected();
	findReplaceOptions.recreateDirStr = recreateDirStrJCheckBox.isSelected();
	
	findReplaceOptions.extractionMode = extractionModeJCheckBox.isSelected();
	 
	if(findReplaceOptions.readCorpusType == CorpusType.CHUNKED
		|| findReplaceOptions.readCorpusType == CorpusType.POS_TAGGED
		|| findReplaceOptions.readCorpusType == CorpusType.CHUNKED
		|| findReplaceOptions.readCorpusType == CorpusType.VERTICAL_POS_TAGGED
		|| findReplaceOptions.readCorpusType == CorpusType.BI_FORMAT
		|| findReplaceOptions.readCorpusType == CorpusType.XML_FORMAT
		|| findReplaceOptions.readCorpusType == CorpusType.SSF_FORMAT)
        {
            resourceQueryOptionsJPanel.getOptionsSSF(findReplaceOptions.resourceQueryOptions);
        }
        if(findReplaceOptions.readCorpusType == CorpusType.NGRAM)
        {
            resourceQueryOptionsJPanel.getOptionsNGram(findReplaceOptions.resourceQueryOptions);
        }
        if(findReplaceOptions.readCorpusType == CorpusType.XML_FORMAT)
        {
            resourceQueryOptionsJPanel.getOptionsXML(findReplaceOptions.resourceQueryOptions);
        }
        	
	return true;
    }
    
    private void initLanguage()
    {
	if(findReplaceOptions.batchMode || findReplaceOptions.standAlone)
	{
	    findReplaceOptions.language = (String) languageJComboBox.getSelectedItem();
	    findReplaceOptions.language = SanchayLanguages.getLangEncCode(findReplaceOptions.language);
	}
	else
	{
	    if(contentJPanel instanceof TextEditorJPanel)
	    {
		findReplaceOptions.language = ((TextEditorJPanel) contentJPanel).getLangEnc();
	    }
	}

	UtilityFunctions.setComponentFont(findTextJComboBox, findReplaceOptions.language);
	UtilityFunctions.setComponentFont(replaceWithJComboBox, findReplaceOptions.language);
    }
    
    public void setDefaults()
    {
	languageJComboBox.setSelectedItem(findReplaceOptions.language);
	
	readAsJComboBox.setSelectedItem(CorpusType.RAW.toString());
	saveAsJComboBox.setSelectedItem(CorpusType.RAW.toString());

	inDirJTextField.setText(findReplaceOptions.inDirectory);
	outDirJTextField.setText(findReplaceOptions.outDirectory);
	charsetJTextField.setText(findReplaceOptions.charset);
	
	replaceModeJCheckBox.setSelected(findReplaceOptions.replaceMode);

	searchBackwardsJCheckBox.setSelected(findReplaceOptions.searchBackwards);
	highlightResultsJCheckBox.setSelected(findReplaceOptions.highlightResults);

	regexJCheckBox.setSelected(findReplaceOptions.regex);
	enableRegex(findReplaceOptions.regex);
	
	canonicalEqJCheckBox.setSelected(findReplaceOptions.canonicalEquivalence);
	matchCaseJCheckBox.setSelected(! findReplaceOptions.caseInsensitive);
	multilineJCheckBox.setSelected(findReplaceOptions.multiline);
	unicodeCaseJCheckBox.setSelected(findReplaceOptions.unicodeCase);
	unixLinesJCheckBox.setSelected(findReplaceOptions.unixLines);

	cleanBeforeJCheckBox.setSelected(findReplaceOptions.clean);
	recreateDirStrJCheckBox.setSelected(findReplaceOptions.recreateDirStr);
	
	extractionModeJCheckBox.setSelected(findReplaceOptions.extractionMode);
    }    

   
    public boolean inExtractionMode()
    {
        return extractionModeJCheckBox.isSelected();
    }
    
    // Actions methods
    public void close(ActionEvent e)
    {
	if(dialog != null)
	    dialog.setVisible(false);
	else if(owner != null)
	{
	    System.exit(0);
	}    
    }
    
    public void saveOutput(ActionEvent e)
    {
	if(validateFRSpec() == true)
	{
	    try {
	//        System.out.println("saved file-->"+inputFile);
		findReplace.saveOutput(inputFile);
	    } catch (FileNotFoundException ex) {
		ex.printStackTrace();
	    } catch (IOException ex) {
		ex.printStackTrace();
	    }
	}
    }

    public void replaceAll(ActionEvent e) throws ParserConfigurationException, Exception
    {
	findReplaceOptions.replaceWith = (String) replaceWithJComboBox.getSelectedItem();

        try {
            initFindReplace();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (XPathExpressionException ex) {
            Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

	if(findReplaceOptions.batchMode)
	{
	    selFile = (File) fileListJList.getSelectedValue();
	}

	if(selFile != null)
	{
            try {
                initFindReplace();
            } catch (ParserConfigurationException ex) {
                Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SAXException ex) {
                Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (XPathExpressionException ex) {
                Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
	    matchCount = findReplace.replaceAll(selFile);

	    JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Total_replacements_made:_") + matchCount, GlobalProperties.getIntlString("Search_Ended"), JOptionPane.INFORMATION_MESSAGE);
	    
	    matchCount = 0;
	}     
    }

    public void replace(ActionEvent e) throws Exception
    {
	findReplaceOptions.replaceWith = (String) replaceWithJComboBox.getSelectedItem();
        try {
            replace();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (XPathExpressionException ex) {
            Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void defaults(ActionEvent e)
    {
	setDefaults();
    }

    public void showOptions(ActionEvent e)
    {
	if(optionsShown == true)
	{
	    optionsShown = false;
	    
	    actions[FindReplaceAction.SHOW_OPTIONS_ACTION].putValue(AbstractAction.NAME, GlobalProperties.getIntlString("Show_Options"));
	    topJPanel.setVisible(false);
	    optionsJPanel.setVisible(false);
	}
	else
	{
	    optionsShown = true;
	    
	    actions[FindReplaceAction.SHOW_OPTIONS_ACTION].putValue(AbstractAction.NAME, GlobalProperties.getIntlString("Hide_Options"));
	    topJPanel.setVisible(true);
	    optionsJPanel.setVisible(true);
	}
    }
    
    /**
     * 
     * @param e 
     */
    public void findExtract(ActionEvent e) throws Exception
    {
        Cursor cursor = null;
        
        if(owner != null)
        {
            cursor = getParent().getCursor();
            owner.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        }
        
	if(findReplaceOptions.batchMode == false)
	{
	    if(findReplaceOptions.findText == null || findReplaceOptions.findText.equals(findTextJComboBox.getSelectedItem()) == false)
	    {
                try {
                    initFindReplace();
                    findReplace.findAll(selFile);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParserConfigurationException ex) {
                    Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SAXException ex) {
                    Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (XPathExpressionException ex) {
                    Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
	    }
	}	

	try {
            find();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (XPathExpressionException ex) {
            Logger.getLogger(IntegratedResourceAccessorJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    
        if(owner != null)
        {
            owner.setCursor(cursor);
        }
    }

    public void showKWIKView(ActionEvent e)
    {
	if(kwikViewShown == true)
	{
	    kwikViewShown = false;

	    actions[FindReplaceAction.KWIK_VIEW_ACTION].putValue(AbstractAction.NAME, GlobalProperties.getIntlString("Show_KWIK_View"));
            mainContentJPanel.setVisible(true);
            kwikContentJPanel.setVisible(false);
            ((CardLayout) fileContentJPanel.getLayout()).show(fileContentJPanel, "MainContentPanel");
	}
	else
	{
	    kwikViewShown = true;

            if(mainContentJPanel.getComponentCount() > 0)
            {
                JPanel cpanel = (JPanel) mainContentJPanel.getComponent(0);
                
                if(cpanel instanceof TextEditorJPanel)
                {
                    String text = ((TextEditorJPanel) cpanel).getText();
                    String lines[] = text.split("[\n]");

                    KwikJPanel kwikContentPane = new KwikJPanel(findReplaceOptions.language);
                    KWIKContextModels kwikContextModels = new KWIKContextModels();

                    kwikContextModels.fillModels(lines, findReplaceOptions);

                    kwikContentPane.addKwikContextModels(kwikContextModels);
                    kwikContentPane.resize();

                    kwikContentJPanel.add(kwikContentPane, BorderLayout.CENTER);

                    actions[FindReplaceAction.KWIK_VIEW_ACTION].putValue(AbstractAction.NAME, GlobalProperties.getIntlString("Hide_KWIK_View"));
                    mainContentJPanel.setVisible(false);
                    kwikContentJPanel.setVisible(true);
                    ((CardLayout) fileContentJPanel.getLayout()).show(fileContentJPanel, "KWIKContentPanel");
                }
            }
	}
    }

    public void findSimilarDocs(ActionEvent e)
    {
        selFile = (File) fileListJList.getSelectedValue();

        if(selFile != null)
        {
            int count = fileListJList.getModel().getSize();
            File files[] = new File[count];

            for (int i = 0; i < count; i++)
            {
                files[i] = (File) fileListJList.getModel().getElementAt(i);
            }

            int topN = 5;

//            Vector similarFiles = DefaultDeepSimilarity.getMostSimilarDocuments(selFile, files, topN, DeepSimilarity.LANG_ENC_DOCUMENT_SIMILARITY);
//
//            DefaultComboBoxModel fileList = new DefaultComboBoxModel(similarFiles);
//            fileListJList.setModel(fileList);
        }
    }

    public String getLangEnc()
    {
        return langEnc;
    }

    public Frame getOwner() {
            return owner;
    }

    public void setOwner(Frame f) 
    {
        owner = (JFrame) f;
    }

    public void setDialog(JDialog d)
    {
        dialog = d;
    }

    public void setParentComponent(Component parentComponent)
    {
        this.parentComponent = parentComponent;
    }
    public String getTitle() {
        return title;
    }

    public JMenuBar getJMenuBar() {
        return null;
    }

    public JPopupMenu getJPopupMenu() {
        return null;
    }

    public JToolBar getJToolBar() {
        return null;
    }
    
    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);

        //Create and set up the window.
        JFrame frame = new JFrame(GlobalProperties.getIntlString("Sanchay_Find_Replace_Tool"));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	frame.addWindowListener(new ExitListener());

        //Create and set up the content pane.
        IntegratedResourceAccessorJPanel newContentPane = new IntegratedResourceAccessorJPanel(true, true);
        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);
	newContentPane.setOwner(frame);

        //Display the window.
        frame.pack();
	
        int inset = 5;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setBounds(inset, inset,
		screenSize.width  - inset * 2,
		screenSize.height - inset * 9);

	frame.setVisible(true);
    }

    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JPanel allCorpusOptionsJPanel;
    protected javax.swing.JCheckBox canonicalEqJCheckBox;
    protected javax.swing.JLabel charsetJLabel;
    protected javax.swing.JPanel charsetJPanel;
    protected javax.swing.JTextField charsetJTextField;
    protected javax.swing.JCheckBox cleanBeforeJCheckBox;
    protected javax.swing.JPanel commandsJPanel;
    protected javax.swing.JPanel commonCorpusOptionsJPanel;
    protected javax.swing.JPanel commonOptionsJPanel;
    protected javax.swing.JPanel corpusOptionsJPanel;
    protected javax.swing.JPanel corpusTypeJPanel;
    protected javax.swing.JPanel corpusTypeLeftJPanel;
    protected javax.swing.JPanel corpusTypeRightJPanel;
    protected javax.swing.JCheckBox extractionModeJCheckBox;
    protected javax.swing.JPanel fileContentJPanel;
    protected javax.swing.JList fileListJList;
    protected javax.swing.JScrollPane fileListJScrollPane;
    protected javax.swing.JSplitPane filesJSplitPane;
    protected javax.swing.JComboBox findTextJComboBox;
    protected javax.swing.JLabel findTextJLabel;
    protected javax.swing.JCheckBox highlightResultsJCheckBox;
    protected javax.swing.JButton inDirJButton;
    protected javax.swing.JLabel inDirJLabel;
    protected javax.swing.JPanel inDirJPanel;
    protected javax.swing.JTextField inDirJTextField;
    protected javax.swing.JPanel innerTextJPanel;
    protected javax.swing.JPanel ioJPanel;
    protected javax.swing.JPanel kwikContentJPanel;
    protected javax.swing.JComboBox languageJComboBox;
    protected javax.swing.JLabel languageJLabel;
    protected javax.swing.JPanel languageJPanel;
    protected javax.swing.JPanel leftJPanel;
    protected javax.swing.JPanel leftListJPanel;
    protected javax.swing.JLabel listTopJLabel;
    protected javax.swing.JPanel listTopJPanel;
    protected javax.swing.JPanel mainContentJPanel;
    protected javax.swing.JPanel mainJPanel;
    protected javax.swing.JCheckBox matchCaseJCheckBox;
    protected javax.swing.JCheckBox multilineJCheckBox;
    protected javax.swing.JPanel optionsJPanel;
    protected javax.swing.JButton outDirJButton;
    protected javax.swing.JLabel outDirJLabel;
    protected javax.swing.JPanel outDirJPanel;
    protected javax.swing.JTextField outDirJTextField;
    protected javax.swing.JComboBox readAsJComboBox;
    protected javax.swing.JLabel readAsJLabel;
    protected javax.swing.JCheckBox recreateDirStrJCheckBox;
    protected javax.swing.JCheckBox regexJCheckBox;
    protected javax.swing.JCheckBox replaceModeJCheckBox;
    protected javax.swing.JComboBox replaceWithJComboBox;
    protected javax.swing.JLabel replaceWithJLabel;
    protected javax.swing.JPanel rightJPanel;
    protected javax.swing.JComboBox saveAsJComboBox;
    protected javax.swing.JLabel saveAsJLabel;
    protected javax.swing.JCheckBox searchBackwardsJCheckBox;
    protected javax.swing.JPanel specialCorpusOptionsJPanel;
    protected javax.swing.JPanel textJPanel;
    protected javax.swing.JPanel topJPanel;
    protected javax.swing.JCheckBox unicodeCaseJCheckBox;
    protected javax.swing.JCheckBox unixLinesJCheckBox;
    // End of variables declaration//GEN-END:variables
    
}
