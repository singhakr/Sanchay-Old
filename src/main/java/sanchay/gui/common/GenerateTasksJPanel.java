/*
 * GenerateTasksJPanel.java
 *
 * Created on September 5, 2006, 12:39 AM
 */

package sanchay.gui.common;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import sanchay.GlobalProperties;
import sanchay.corpus.ssf.gui.HierarchicalTagsJPanel;
import sanchay.properties.KeyValueProperties;
import sanchay.properties.PropertiesTable;

/**
 *
 * @author  anil
 */
public class GenerateTasksJPanel extends javax.swing.JPanel implements JPanelDialog
{
    protected JFrame owner;
    protected JDialog dialog;
    
    protected String taskNamePrefix;
    protected String taskPropSchema;
    protected String taskDir;

    protected DefaultListModel taskDataFiles;
    
    protected boolean createTaskDir;
    protected boolean copyTaskDataFiles;
    
    protected PropertiesTable taskList;
    
    /** Creates new form GenerateTasksJPanel */
    public GenerateTasksJPanel()
    {
	initComponents();
        
        taskDataFiles = new DefaultListModel();
        taskDataJList.setModel(taskDataFiles);
	
//	BrowseFileAction browseTaskSchema = new BrowseFileAction();
//	BrowseFileAction browseTaskDir = new BrowseFileAction();
//	BrowseFileAction addTaskDataFile = new BrowseFileAction();
//	
//	schemaJButton.setAction(browseTaskSchema);
//	taskDirJButton.setAction(browseTaskDir);
//	addFilesJButton.setAction(browseTaskDir);	
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        taskDetailsjPanel = new javax.swing.JPanel();
        taskNamePrefixJPanel = new javax.swing.JPanel();
        taskNamePrefixJLabel = new javax.swing.JLabel();
        taskNamePrefixJTextField = new javax.swing.JTextField();
        schemaJPanel = new javax.swing.JPanel();
        schemaJLabel = new javax.swing.JLabel();
        schemaJTextField = new javax.swing.JTextField();
        schemaJButton = new javax.swing.JButton();
        taskDirJPanel = new javax.swing.JPanel();
        taskDirJLabel = new javax.swing.JLabel();
        taskDirJTextField = new javax.swing.JTextField();
        taskDirJButton = new javax.swing.JButton();
        taskDataFilesJPanel = new javax.swing.JPanel();
        taskDataJScrollPane = new javax.swing.JScrollPane();
        taskDataJList = new javax.swing.JList();
        manageFilesJPanel = new javax.swing.JPanel();
        addFilesJButton = new javax.swing.JButton();
        removeFilesJButton = new javax.swing.JButton();
        clearAllJButton = new javax.swing.JButton();
        optionsJPanel = new javax.swing.JPanel();
        createTaskDirJCheckBox = new javax.swing.JCheckBox();
        copyTaskDataFilesJCheckBox = new javax.swing.JCheckBox();
        commandsJPanel = new javax.swing.JPanel();
        editJButton = new javax.swing.JButton();
        OKJButton = new javax.swing.JButton();
        CancelJButton = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        taskDetailsjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Task details"));
        taskDetailsjPanel.setLayout(new javax.swing.BoxLayout(taskDetailsjPanel, javax.swing.BoxLayout.Y_AXIS));

        taskNamePrefixJPanel.setLayout(new java.awt.BorderLayout());

        taskNamePrefixJLabel.setLabelFor(taskNamePrefixJTextField);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        taskNamePrefixJLabel.setText(bundle.getString("Task_name_prefix:_")); // NOI18N
        taskNamePrefixJPanel.add(taskNamePrefixJLabel, java.awt.BorderLayout.WEST);

        taskNamePrefixJTextField.setText("SynAnn");
        taskNamePrefixJPanel.add(taskNamePrefixJTextField, java.awt.BorderLayout.CENTER);

        taskDetailsjPanel.add(taskNamePrefixJPanel);

        schemaJPanel.setLayout(new java.awt.BorderLayout());

        schemaJLabel.setLabelFor(schemaJTextField);
        schemaJLabel.setText(bundle.getString("Task_properties_schema_file:")); // NOI18N
        schemaJPanel.add(schemaJLabel, java.awt.BorderLayout.NORTH);

        schemaJTextField.setText("workspace/syn-annotation/Premchand/task-NotPremchand-1");
        schemaJPanel.add(schemaJTextField, java.awt.BorderLayout.CENTER);

        schemaJButton.setText(bundle.getString("Browse")); // NOI18N
        schemaJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schemaJButtonActionPerformed(evt);
            }
        });
        schemaJPanel.add(schemaJButton, java.awt.BorderLayout.EAST);

        taskDetailsjPanel.add(schemaJPanel);

        taskDirJPanel.setLayout(new java.awt.BorderLayout());

        taskDirJLabel.setLabelFor(taskDirJTextField);
        taskDirJLabel.setText(bundle.getString("Directory_for_task_properties_files:")); // NOI18N
        taskDirJPanel.add(taskDirJLabel, java.awt.BorderLayout.NORTH);
        taskDirJPanel.add(taskDirJTextField, java.awt.BorderLayout.CENTER);

        taskDirJButton.setText(bundle.getString("Browse")); // NOI18N
        taskDirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskDirJButtonActionPerformed(evt);
            }
        });
        taskDirJPanel.add(taskDirJButton, java.awt.BorderLayout.EAST);

        taskDetailsjPanel.add(taskDirJPanel);

        add(taskDetailsjPanel);

        taskDataFilesJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Task data files:"));
        taskDataFilesJPanel.setLayout(new java.awt.BorderLayout());

        taskDataJScrollPane.setViewportView(taskDataJList);

        taskDataFilesJPanel.add(taskDataJScrollPane, java.awt.BorderLayout.CENTER);

        manageFilesJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        addFilesJButton.setText(bundle.getString("Add")); // NOI18N
        addFilesJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFilesJButtonActionPerformed(evt);
            }
        });
        manageFilesJPanel.add(addFilesJButton);

        removeFilesJButton.setText(bundle.getString("Remove")); // NOI18N
        removeFilesJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFilesJButtonActionPerformed(evt);
            }
        });
        manageFilesJPanel.add(removeFilesJButton);

        clearAllJButton.setText(bundle.getString("Clear")); // NOI18N
        clearAllJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllJButtonActionPerformed(evt);
            }
        });
        manageFilesJPanel.add(clearAllJButton);

        taskDataFilesJPanel.add(manageFilesJPanel, java.awt.BorderLayout.EAST);

        add(taskDataFilesJPanel);

        optionsJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));
        optionsJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        createTaskDirJCheckBox.setText(bundle.getString("Create_task_directory")); // NOI18N
        createTaskDirJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        createTaskDirJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        optionsJPanel.add(createTaskDirJCheckBox);

        copyTaskDataFilesJCheckBox.setText(bundle.getString("Copy_task_data_files_to_task_directory")); // NOI18N
        copyTaskDataFilesJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        copyTaskDataFilesJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        optionsJPanel.add(copyTaskDataFilesJCheckBox);

        add(optionsJPanel);

        editJButton.setText(bundle.getString("Edit")); // NOI18N
        editJButton.setEnabled(false);
        editJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(editJButton);

        OKJButton.setText(bundle.getString("OK")); // NOI18N
        OKJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(OKJButton);

        CancelJButton.setText(bundle.getString("Cancel")); // NOI18N
        CancelJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(CancelJButton);

        add(commandsJPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void editJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editJButtonActionPerformed
// TODO add your handling code here:
        
    }//GEN-LAST:event_editJButtonActionPerformed

    private void addFilesJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFilesJButtonActionPerformed
// TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setMultiSelectionEnabled(true);
        
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
           File selFiles[] = chooser.getSelectedFiles();

           for (int i = 0; i < selFiles.length; i++)
           {
               File taskDataFile = (File) selFiles[i];

    //           if(validateFilePath(taskPropSchema).equals("") == false)
    //           {
                   taskDataFiles.addElement(taskDataFile);
    //           }               
           }
        }
    }//GEN-LAST:event_addFilesJButtonActionPerformed

    private void taskDirJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskDirJButtonActionPerformed
// TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
           taskDir = chooser.getSelectedFile().getAbsolutePath();
           
//           if(validateFilePath(taskDir).equals("") == false)
//           {
               taskDirJTextField.setText(taskDir);
//           }
        }        
    }//GEN-LAST:event_taskDirJButtonActionPerformed

    private void schemaJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schemaJButtonActionPerformed
// TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
           taskPropSchema = chooser.getSelectedFile().getAbsolutePath();
           
//           if(validateFilePath(taskPropSchema).equals("") == false)
//           {
               schemaJTextField.setText(taskPropSchema);
//           }
        }        
    }//GEN-LAST:event_schemaJButtonActionPerformed

    private void clearAllJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearAllJButtonActionPerformed
    {//GEN-HEADEREND:event_clearAllJButtonActionPerformed
// TODO add your handling code here:
        taskDataFiles.removeAllElements();
    }//GEN-LAST:event_clearAllJButtonActionPerformed

    private void removeFilesJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeFilesJButtonActionPerformed
    {//GEN-HEADEREND:event_removeFilesJButtonActionPerformed
// TODO add your handling code here:
        int selIndices[] = taskDataJList.getSelectedIndices();
        
        for (int i = 0; i < selIndices.length; i++)
        {
            taskDataFiles.removeElementAt(selIndices[i] - i);
        }
    }//GEN-LAST:event_removeFilesJButtonActionPerformed

    private void CancelJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CancelJButtonActionPerformed
    {//GEN-HEADEREND:event_CancelJButtonActionPerformed
// TODO add your handling code here:
        taskNamePrefix = "";
        taskDir = "";
        taskList = null;
        
        if(dialog != null)
            dialog.setVisible(false);
        
//        System.exit(0);
    }//GEN-LAST:event_CancelJButtonActionPerformed

    private void OKJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_OKJButtonActionPerformed
    {//GEN-HEADEREND:event_OKJButtonActionPerformed
// TODO add your handling code here:
        taskNamePrefix = taskNamePrefixJTextField.getText();
        taskDir = taskDirJTextField.getText();
        taskPropSchema = schemaJTextField.getText();

        File taskDirFile = new File(taskDir);
        
        if(taskNamePrefix.equals(""))
        {
                JOptionPane.showMessageDialog(this, GlobalProperties.getIntlString("Task_name_not_specified."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                return;
        }
        else if(taskDir.equals(""))
        {
                JOptionPane.showMessageDialog(this, GlobalProperties.getIntlString("Task_directory_not_specified."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                return;
        }
        else if(taskDirFile.exists() == false)
        {
                JOptionPane.showMessageDialog(this, GlobalProperties.getIntlString("Task_directory_doesn't_exist."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                return;
        }
        else if(taskDataFiles.getSize() == 0)
        {
                JOptionPane.showMessageDialog(this, GlobalProperties.getIntlString("No_data_files_selected."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                return;
        }
        
        KeyValueProperties schemaKVP = new KeyValueProperties();
        
        try {
            schemaKVP.read(taskPropSchema, GlobalProperties.getIntlString("UTF-8"));
        
            int count = taskDataFiles.getSize();
            taskList = new PropertiesTable(new String[]{"TaskName", "TaskKVPropFile", "TaskKVPropCharset",
                    "User1", "User2", "Adjudicator1", "Adjudicator2"}, count);

            for (int i = 0; i < count; i++)
            {
                String taskName = taskNamePrefix + "-" + (i + 1);
                schemaKVP.addProperty("TaskName", taskName);

                File ssfStory = (File) taskDataFiles.getElementAt(i);

                schemaKVP.addProperty("SSFCorpusStoryFile", ssfStory.getAbsolutePath());

//                File taskPropFile = new File(taskDirFile, "task-" + ((File) taskDataFiles.getElementAt(i)).getName());
                File taskPropFile = new File(taskDirFile, "task-" + taskName);
                
//                int intExt = 0;
//                boolean ssfStoryExists = ssfStory.exists();
//                while(ssfStoryExists)
//                {
//                    File newNamed = new File( ((File)taskDataFiles.getElementAt(i)).getName() + (++intExt) );
//                    
//                    if(newNamed.exists() == false)
//                    {
//                        taskPropFile = new File(taskDirFile, "task-" + newNamed);
//                        ssfStoryExists = false;
//                    }
//                }

                schemaKVP.save(taskPropFile.getAbsolutePath(), GlobalProperties.getIntlString("UTF-8"));

                schemaKVP.addProperty("TaskPropFile", taskPropFile.getAbsolutePath());
                schemaKVP.addProperty("CurrentPosition", "1");

                taskList.setValueAt(taskName, i, 0);
                taskList.setValueAt(taskPropFile, i, 1);
                taskList.setValueAt(GlobalProperties.getIntlString("UTF-8"), i, 2);
                taskList.setValueAt("NONE", i, 3);
                taskList.setValueAt("NONE", i, 4);
                taskList.setValueAt("NONE", i, 5);
                taskList.setValueAt("NONE", i, 6);
            }

            File taskListFile = new File(new File(taskDir), taskNamePrefix + "-list.txt");
            taskList.save(taskListFile.getAbsolutePath(), GlobalProperties.getIntlString("UTF-8"));
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        JOptionPane.showMessageDialog(this, taskDataFiles.getSize() + " task properties files_generated in the directory:\n"+ taskDir, GlobalProperties.getIntlString("Task_files_generated"), JOptionPane.INFORMATION_MESSAGE);

        if(dialog != null)
            dialog.setVisible(false);
        
//        System.exit(0);
    }//GEN-LAST:event_OKJButtonActionPerformed
   
    private static void createAndShowGUI() {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);

        //Create and set up the window.
        JFrame frame = new JFrame(GlobalProperties.getIntlString("Generate_Task_Setup_Files"));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	
//	DialogFactory.showDialog(GenerateTasksJPanel.class, frame, "GenerateTasksJPanel", true);
	DialogFactory.showDialog(HierarchicalTagsJPanel.class, frame, "HierarchicalTagsJPanel", true);

////	String selectedLanguage = TextEditorJPanel.switchLanguage(frame);
//
//        //Create and set up the content pane.
//	GenerateTasksJPanel newContentPane = null;
//
////	if(selectedLanguage == null || selectedLanguage .equals("") == true)
//	    newContentPane = new GenerateTasksJPanel();
////	else
////	{
////	    newContentPane = new SanchayXMLJPanel(SanchayLanguages.getLangEncCode(selectedLanguage));
////	}
//	
//	newContentPane.owner = frame;
//        newContentPane.setOpaque(true); //content panes must be opaque
//        frame.setContentPane(newContentPane);
////	frame.addWindowListener(newContentPane);
//
////	// Tautology in code: can be useful, but only sometimes
////	newContentPane.setTitle(newContentPane.getTitle());
//
//        //Display the window.
//        frame.pack();
//	UtilityFunctions.centre(frame);
//	
////        int inset = 5;
////        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
////        frame.setBounds(inset, inset,
////		screenSize.width  - inset*2,
////		screenSize.height - inset*9);
//
	frame.setVisible(true);
    }

    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
    
    public PropertiesTable getTaskList()
    {
        return taskList;
    }
    
    public String getTaskGroupName()
    {
        return taskNamePrefix;
    }

    public void setDialog(JDialog dialog) {
	this.dialog = dialog;
    }
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton CancelJButton;
    public javax.swing.JButton OKJButton;
    public javax.swing.JButton addFilesJButton;
    public javax.swing.JButton clearAllJButton;
    public javax.swing.JPanel commandsJPanel;
    public javax.swing.JCheckBox copyTaskDataFilesJCheckBox;
    public javax.swing.JCheckBox createTaskDirJCheckBox;
    public javax.swing.JButton editJButton;
    public javax.swing.JPanel manageFilesJPanel;
    public javax.swing.JPanel optionsJPanel;
    public javax.swing.JButton removeFilesJButton;
    public javax.swing.JButton schemaJButton;
    public javax.swing.JLabel schemaJLabel;
    public javax.swing.JPanel schemaJPanel;
    public javax.swing.JTextField schemaJTextField;
    public javax.swing.JPanel taskDataFilesJPanel;
    public javax.swing.JList taskDataJList;
    public javax.swing.JScrollPane taskDataJScrollPane;
    public javax.swing.JPanel taskDetailsjPanel;
    public javax.swing.JButton taskDirJButton;
    public javax.swing.JLabel taskDirJLabel;
    public javax.swing.JPanel taskDirJPanel;
    public javax.swing.JTextField taskDirJTextField;
    public javax.swing.JLabel taskNamePrefixJLabel;
    public javax.swing.JPanel taskNamePrefixJPanel;
    public javax.swing.JTextField taskNamePrefixJTextField;
    // End of variables declaration//GEN-END:variables
    
}
