/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KeystrokeEditorJPanel.java
 *
 * Created on 12 Nov, 2009, 12:40:58 AM
 */

package sanchay.gui.common;

import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.KeyStroke;
import sanchay.util.UtilityFunctions;

/**
 *
 * @author anil
 */
public class KeystrokeEditorJPanel extends javax.swing.JPanel implements JPanelDialog {

    protected JFrame owner;
    protected JDialog dialog;

    protected KeyStroke keyStroke;

    protected char keyChar;

    /** Creates new form KeystrokeEditorJPanel */
    public KeystrokeEditorJPanel() {
        initComponents();

        keyStrokeJTextField.requestFocusInWindow();
    }

    public KeystrokeEditorJPanel(KeyStroke keyStroke) {
        initComponents();

        setKeyStroke(keyStroke);

        keyStrokeJTextField.requestFocusInWindow();
    }

    public void setKeyStroke(KeyStroke keyStroke)
    {
        this.keyStroke = keyStroke;

        if(UtilityFunctions.flagOn(keyStroke.getModifiers(), KeyEvent.SHIFT_DOWN_MASK))
        {
            shiftJCheckBox.setSelected(true);
        }
        else
            shiftJCheckBox.setSelected(false);

        if(UtilityFunctions.flagOn(keyStroke.getModifiers(), KeyEvent.CTRL_DOWN_MASK))
        {
            controlJCheckBox.setSelected(true);
        }
        else
            controlJCheckBox.setSelected(false);

        if(UtilityFunctions.flagOn(keyStroke.getModifiers(), KeyEvent.ALT_DOWN_MASK))
        {
            altJCheckBox.setSelected(true);
        }
        else
            altJCheckBox.setSelected(false);

        if(Character.isDefined(keyStroke.getKeyChar()))
            keyChar = keyStroke.getKeyChar();
        else
            keyChar = (char) keyStroke.getKeyCode();

        showKeyStroke();
    }

    public KeyStroke getKeyStroke()
    {
        return keyStroke;
    }

    public void addActionListener(ActionListener listener)
    {
        okJButton.addActionListener(listener);
    }

    protected void showKeyStroke()
    {
        int modifiers = 0;

        String keyStr = "";

        if(shiftJCheckBox.isSelected())
        {
            keyStr = "Shift + ";
            modifiers |= InputEvent.SHIFT_DOWN_MASK;
//            shiftJCheckBox.setSelected(true);
        }
//        else
//            shiftJCheckBox.setSelected(false);

        if(controlJCheckBox.isSelected())
        {
            keyStr += "Control + ";
            modifiers |= InputEvent.CTRL_DOWN_MASK;
//            controlJCheckBox.setSelected(true);
        }
//        else
//            controlJCheckBox.setSelected(false);

        if(altJCheckBox.isSelected())
        {
            keyStr += "Alt + ";
            modifiers |= InputEvent.ALT_DOWN_MASK;
//            controlJCheckBox.setSelected(true);
        }

        keyStr += keyChar;

        keyStrokeJTextField.setText(keyStr);

        keyStroke = KeyStroke.getKeyStroke(keyChar, modifiers);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        keyCharJPanel = new javax.swing.JPanel();
        keyCharJLabel = new javax.swing.JLabel();
        keyStrokeJTextField = new javax.swing.JTextField();
        modifiersJPanel = new javax.swing.JPanel();
        modifiersJLabel = new javax.swing.JLabel();
        shiftJCheckBox = new javax.swing.JCheckBox();
        controlJCheckBox = new javax.swing.JCheckBox();
        altJCheckBox = new javax.swing.JCheckBox();
        commandsJPanel = new javax.swing.JPanel();
        okJButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Type the key you want to set"));
        setLayout(new java.awt.BorderLayout());

        keyCharJPanel.setLayout(new java.awt.BorderLayout());

        keyCharJLabel.setText("Current Key: ");
        keyCharJPanel.add(keyCharJLabel, java.awt.BorderLayout.WEST);

        keyStrokeJTextField.setEditable(false);
        keyStrokeJTextField.setToolTipText("Set the keystroke");
        keyStrokeJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                keyStrokeJTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keyStrokeJTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                keyStrokeJTextFieldKeyTyped(evt);
            }
        });
        keyCharJPanel.add(keyStrokeJTextField, java.awt.BorderLayout.CENTER);

        add(keyCharJPanel, java.awt.BorderLayout.NORTH);

        modifiersJLabel.setText("Modifiers: ");
        modifiersJPanel.add(modifiersJLabel);

        shiftJCheckBox.setText("Shift");
        shiftJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shiftJCheckBoxActionPerformed(evt);
            }
        });
        modifiersJPanel.add(shiftJCheckBox);

        controlJCheckBox.setText("Control");
        controlJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlJCheckBoxActionPerformed(evt);
            }
        });
        modifiersJPanel.add(controlJCheckBox);

        altJCheckBox.setText("Alt");
        altJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altJCheckBoxActionPerformed(evt);
            }
        });
        modifiersJPanel.add(altJCheckBox);

        add(modifiersJPanel, java.awt.BorderLayout.CENTER);

        commandsJPanel.setLayout(new java.awt.BorderLayout());

        okJButton.setText("OK");
        okJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(okJButton, java.awt.BorderLayout.PAGE_START);

        add(commandsJPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void keyStrokeJTextFieldKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_keyStrokeJTextFieldKeyTyped
    {//GEN-HEADEREND:event_keyStrokeJTextFieldKeyTyped
        // TODO add your handling code here:
        if(Character.isDefined(evt.getKeyChar()))
        {
            keyChar = evt.getKeyChar();

            keyChar = Character.toUpperCase(keyChar);
            showKeyStroke();
        }
        else if(Character.isDefined((char) evt.getKeyCode()))
        {
            keyChar = (char) evt.getKeyCode();

            keyChar = Character.toUpperCase(keyChar);
            showKeyStroke();
        }

        keyStrokeJTextField.requestFocusInWindow();
    }//GEN-LAST:event_keyStrokeJTextFieldKeyTyped

    private void keyStrokeJTextFieldKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_keyStrokeJTextFieldKeyPressed
    {//GEN-HEADEREND:event_keyStrokeJTextFieldKeyPressed
        // TODO add your handling code here:
//        if(evt.isShiftDown())
//            shiftDown = true;
//        else
//            shiftDown = false;
//
//        if(evt.isControlDown())
//            controlDown = true;
//        else
//            controlDown = false;
//
//        showKeyStroke();
    }//GEN-LAST:event_keyStrokeJTextFieldKeyPressed

    private void keyStrokeJTextFieldKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_keyStrokeJTextFieldKeyReleased
    {//GEN-HEADEREND:event_keyStrokeJTextFieldKeyReleased
        // TODO add your handling code here:
//        if(evt.isShiftDown())
//            shiftDown = true;
//        else
//            shiftDown = false;
//
//        if(evt.isControlDown())
//            controlDown = true;
//        else
//            controlDown = false;
//
//        showKeyStroke();
    }//GEN-LAST:event_keyStrokeJTextFieldKeyReleased

    private void shiftJCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shiftJCheckBoxActionPerformed
    {//GEN-HEADEREND:event_shiftJCheckBoxActionPerformed
        // TODO add your handling code here:
        showKeyStroke();

        keyStrokeJTextField.requestFocusInWindow();
    }//GEN-LAST:event_shiftJCheckBoxActionPerformed

    private void controlJCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_controlJCheckBoxActionPerformed
    {//GEN-HEADEREND:event_controlJCheckBoxActionPerformed
        // TODO add your handling code here:
        showKeyStroke();

        keyStrokeJTextField.requestFocusInWindow();
    }//GEN-LAST:event_controlJCheckBoxActionPerformed

    private void altJCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_altJCheckBoxActionPerformed
    {//GEN-HEADEREND:event_altJCheckBoxActionPerformed
        // TODO add your handling code here:
        showKeyStroke();

        keyStrokeJTextField.requestFocusInWindow();
    }//GEN-LAST:event_altJCheckBoxActionPerformed

    private void okJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okJButtonActionPerformed
    {//GEN-HEADEREND:event_okJButtonActionPerformed
        // TODO add your handling code here:
        if(dialog != null)
            dialog.setVisible(false);
    }//GEN-LAST:event_okJButtonActionPerformed

    public void setDialog(JDialog dialog) {
        this.dialog = dialog;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox altJCheckBox;
    private javax.swing.JPanel commandsJPanel;
    private javax.swing.JCheckBox controlJCheckBox;
    private javax.swing.JLabel keyCharJLabel;
    private javax.swing.JPanel keyCharJPanel;
    private javax.swing.JTextField keyStrokeJTextField;
    private javax.swing.JLabel modifiersJLabel;
    private javax.swing.JPanel modifiersJPanel;
    private javax.swing.JButton okJButton;
    private javax.swing.JCheckBox shiftJCheckBox;
    // End of variables declaration//GEN-END:variables

}
