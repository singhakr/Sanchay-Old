/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SanchayCharDisplayPanel.java
 *
 * Created on 14 Nov, 2009, 2:51:04 AM
 */

package sanchay.gui.common;

import com.ibm.icu.lang.UCharacter;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.accessibility.Accessible;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.text.JTextComponent;

/**
 *
 * @author anil
 */
public class SanchayCharDisplayPanel extends javax.swing.JPanel implements MouseListener,
                                  FocusListener,
                                  Accessible, Cloneable {

//    protected GlyphVector glyphVector;
    protected char character;

    protected boolean hasFocus;

    protected JComponent textComponent;
    protected JComponent charSummaryComponent;
    protected JComponent charDetailsComponent;

    /** Creates new form SanchayCharDisplayPanel */
    public SanchayCharDisplayPanel() {
        initComponents();

        addMouseListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        charJLabel = new javax.swing.JLabel();

        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setLayout(new java.awt.BorderLayout());

        charJLabel.setBackground(new java.awt.Color(255, 255, 255));
        charJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        charJLabel.setOpaque(true);
        charJLabel.setPreferredSize(new java.awt.Dimension(50, 50));
        add(charJLabel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @return the textComponent
     */
    public JComponent getTextComponent()
    {
        return textComponent;
    }

    /**
     * @param textComponent the textComponent to set
     */
    public void setTextComponent(JComponent textComponent)
    {
        this.textComponent = textComponent;
    }

    /**
     * @return the charSummaryComponent
     */
    public JComponent getCharSummaryComponent()
    {
        return charSummaryComponent;
    }

    /**
     * @param charSummaryComponent the charSummaryComponent to set
     */
    public void setCharSummaryComponent(JComponent charSummaryComponent)
    {
        this.charSummaryComponent = charSummaryComponent;
    }

    /**
     * @return the charDetailsComponent
     */
    public JComponent getCharDetailsComponent()
    {
        return charDetailsComponent;
    }

    /**
     * @param charDetailsComponent the charDetailsComponent to set
     */
    public void setCharDetailsComponent(JComponent charDetailsComponent)
    {
        this.charDetailsComponent = charDetailsComponent;
    }
//    /**
//     * @return the glyphVector
//     */
//    public GlyphVector getGlyphVector()
//    {
//        return glyphVector;
//    }

//    /**
//     * @param glyphVector the glyphVector to set
//     */
//    public void setGlyphVector(GlyphVector glyphVector)
//    {
//        this.glyphVector = glyphVector;
//    }

    /**
     * @return the character
     */
    public char getCharacter()
    {
        return character;
    }

    /**
     * @param character the character to set
     */
    public void setCharacter(char character)
    {
        this.character = character;

        charJLabel.setText("" + character);
    }

    public void setFont(Font font) {
        super.setFont(font);

        if(charJLabel != null)
            charJLabel.setFont(font);
    }

    public Font getFont() {

        if(charJLabel != null)
            return charJLabel.getFont();

        return super.getFont();
    }

    public void mouseClicked(MouseEvent e) {
        //Since the user clicked on us, let's get focus!
        requestFocusInWindow();

        if(textComponent != null && Character.isDefined(character))
        {
            if(textComponent instanceof JTextField)
            {
                int pos = ((JTextField) textComponent).getCaretPosition();
                String text = ((JTextField) textComponent).getText();

                text = text.substring(0, pos) + character + text.substring(pos, text.length());

                ((JTextField) textComponent).setText(text);

                ((JTextComponent) textComponent).setCaretPosition(pos + 1);
            }
            else if(textComponent instanceof JTextComponent)
            {
                int pos = ((JTextComponent) textComponent).getCaretPosition();
                String text = ((JTextComponent) textComponent).getText();

                text = text.substring(0, pos) + character + text.substring(pos, text.length());

                ((JTextComponent) textComponent).setText(text);

                ((JTextComponent) textComponent).setCaretPosition(pos + 1);
            }
        }

        if(charSummaryComponent != null)
        {
            if(charSummaryComponent instanceof JLabel)
            {
                String charCode = "U+" + Integer.parseInt("" + ((int) character), 16);
                String charName = UCharacter.getName((int) character);

                ((JLabel) charSummaryComponent).setText(charCode + " " + charName);
            }
        }
    }

    public void mouseEntered(MouseEvent e) { }
    public void mouseExited(MouseEvent e) { }
    public void mousePressed(MouseEvent e) { }
    public void mouseReleased(MouseEvent e) { }

    public void focusGained(FocusEvent e) {
        //Draw the component with a red border
        //indicating that it has focus.
        this.repaint();
    }

    public void focusLost(FocusEvent e) {
        //Draw the component with a black border
        //indicating that it doesn't have focus.
        this.repaint();
    }

    protected void paintComponent(Graphics graphics) {
//        super.paintComponent(graphics);
        
        Graphics2D g2 = (Graphics2D) graphics;
//
//        //Draw in our entire space, even if isOpaque is false.
//        g2.setColor(Color.WHITE);
////        g.fillRect(0, 0, size, size);
////        g.fillRect(0, 0, image == null ? size : image.getWidth(this),
////                         image == null ? size : image.getHeight(this));
//
////        else
////            g.drawRect(0, 0, SIZE, SIZE);
//
////        g2.drawGlyphVector(glyphVector, 40, 60);
//
        //Add a border, red if picture currently has focus
//        if (isFocusOwner()) {
//            g2.setColor(Color.RED);
//        } else {
//            g2.setColor(Color.BLACK);
//        }
//        g2.drawRect(0, 0, charJLabel.getWidth(), charJLabel.getHeight());
//
        if (isFocusOwner()) {
            setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            charJLabel.setBackground(new Color(200, 200, 255));
        } else {
            setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
            charJLabel.setBackground(Color.WHITE);
        }

//        g2.dispose();
    }

    public Object clone() throws CloneNotSupportedException
    {
        SanchayCharDisplayPanel obj = (SanchayCharDisplayPanel) super.clone();

        return obj;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel charJLabel;
    // End of variables declaration//GEN-END:variables

}
