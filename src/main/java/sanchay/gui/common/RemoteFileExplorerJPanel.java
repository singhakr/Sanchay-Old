/*
 * FileExplorerJPanel.java
 *
 * Created on May 16, 2006, 4:27 PM
 */

package sanchay.gui.common;

import java.awt.Component;
import java.io.File;
import java.awt.Frame;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JPopupMenu;
import javax.swing.JToolBar;
import javax.swing.JTree;
import javax.swing.tree.*;

import sanchay.GlobalProperties;
import sanchay.tree.*;
import sanchay.tree.gui.*;
import sanchay.common.types.ClientType;
import sanchay.server.dto.model.files.RemoteFile;
import sanchay.server.dto.model.files.RemoteSftpFile;
import sanchay.server.dto.tree.impl.RemoteFileNode;

/**
 * @author anil
 */
public class RemoteFileExplorerJPanel extends AdapterTreeJPanel implements JPanelDialog, sanchay.gui.clients.SanchayClient {

    protected ClientType clientType = ClientType.LANGUAGE_ENCODING_IDENTIFIER;

    protected JFrame owner;
    protected JDialog dialog;
    protected Component parentComponent;

    protected FileDisplayer fileDisplayer;

    protected String langEnc = GlobalProperties.getIntlString("hin::utf8");
    protected String title = "";

    protected String charset;

    protected File rootLocalFile = null;
    protected RemoteFileNode rootRemoteFileNode = null;

    protected int connectionMode = RemoteFileNode.RMI_MODE;

    /**
     * Creates new form FileExplorerJPanel
     */

    public RemoteFileExplorerJPanel(FileDisplayer fDisplayer, RemoteFileNode rrFileNode, int cmode) {
        this(rrFileNode);

        this.fileDisplayer = fDisplayer;

        connectionMode = cmode;

        createTreeModel();
    }

    private RemoteFileExplorerJPanel(RemoteFileNode rrFileNode) {
        this.rootRemoteFileNode = rrFileNode;

        initComponents();

//        getJTree().addMouseListener(new java.awt.event.MouseAdapter() {
//            public void mouseClicked(java.awt.event.MouseEvent evt) {
//                formMouseClicked(evt);
//            }
//        });
//
//        getJTree().addKeyListener(new java.awt.event.KeyAdapter() {
//            public void keyTyped(java.awt.event.KeyEvent evt) {
//                formKeyTyped(evt);
//            }
//        });

        parentComponent = this;

        charset = GlobalProperties.getIntlString("UTF-8");
        this.fileDisplayer = fileDisplayer;

        getJTree().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        getJTree().addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public ClientType getClientType() {
        return clientType;
    }

    private void formMouseClicked(java.awt.event.MouseEvent evt) {
// TODO add your handling code here:
        if (evt.getClickCount() == 1) {
            TreePath currentSelection = getJTree().getSelectionPath();
            displaySeletedFile(currentSelection, evt, null);
        }
    }

    private void formKeyTyped(java.awt.event.KeyEvent evt) {
        // TODO add your handling code here:
        if (evt.getKeyChar() == '\n') {
            TreePath currentSelection = getJTree().getSelectionPath();
            displaySeletedFile(currentSelection, null, evt);
//            TreePath currentSelection = getJTree().getSelectionPath();
//
//            displaySeletedFile(currentSelection, null, evt);
//
//            if (currentSelection != null) {
//                FileNode selectedNode = (FileNode) (currentSelection.getLastPathComponent());
//
//                fileDisplayer.displayFile((File) selectedNode.getUserObject(), charset, evt);
//            }
        }
    }

    private void displaySeletedFile(TreePath currentSelection, java.awt.event.MouseEvent mevt,
                            java.awt.event.KeyEvent kevt)
    {
        String path = null;

        if (currentSelection != null) {
            rootRemoteFileNode = (RemoteFileNode) (currentSelection.getLastPathComponent());

            if (connectionMode == RemoteFileNode.SFTP_MODE) {
                RemoteSftpFile file = (RemoteSftpFile) rootRemoteFileNode.getUserObject();

                path = file.getPath();

                rootLocalFile = new File(path);
            } else if (connectionMode == RemoteFileNode.RMI_MODE
                    || connectionMode == RemoteFileNode.SPRING_MODE) {
                RemoteFile file = (RemoteFile) rootRemoteFileNode.getUserObject();

//                    try {
//                        path = rootRemoteFileNode.getRMIFileSystem().get(file);
//                    } catch (RemoteException ex) {
//                        Logger.getLogger(RemoteFileExplorerJPanel.class.getName()).log(Level.SEVERE, null, ex);
//                    }

//                rootLocalFile = new File(file.getRelativePath());
                rootLocalFile = new File(file.getAbsolutePathOnClient());
            }

            if (fileDisplayer.closeFile(mevt))
                fileDisplayer.displayFile(rootLocalFile.getPath(), charset, mevt);
        }
    }

    @Override
    public TreeModel createTreeModel() {
//	SwingComponentNode rootNode = new SwingComponentNode(rightCenter);
//	rootNode.explore();
//	return new DefaultTreeModel(rootNode);
        rootRemoteFileNode.explore();

        TreeModel treeModel = new DefaultTreeModel(rootRemoteFileNode);

        tree.setModel(treeModel);
//        
//        if(!remote)
//        {
//           rootNode.explore();
//        }

        expandAllNodes(tree, 0, tree.getRowCount());
        System.out.println("No. of Children" + tree.getModel().getChildCount(tree.getModel().getRoot()));

        return treeModel;
    }

    private void expandAllNodes(JTree tree, int startingIndex, int rowCount) {
        for (int i = startingIndex; i < rowCount; ++i) {
            tree.expandRow(i);
        }

        if (tree.getRowCount() != rowCount) {
            expandAllNodes(tree, rowCount, tree.getRowCount());
        }
    }

    public String getLangEnc() {
        return langEnc;
    }

    public Frame getOwner() {
        return owner;
    }

    public void setOwner(Frame frame) {
        owner = (JFrame) frame;
    }

    public void setParentComponent(Component parentComponent) {
        this.parentComponent = parentComponent;
    }

    public void setDialog(JDialog dialog) {
        this.dialog = dialog;

    }

    public String getTitle() {
        return title;
    }

    public JMenuBar getJMenuBar() {
        return null;
    }

    public JPopupMenu getJPopupMenu() {
        return null;
    }

    public JToolBar getJToolBar() {
        return null;
    }

    public File getRootLocalFile() {
        return rootLocalFile;
    }

    public void setRootLocalFile(File rfile) {
        rootLocalFile = rfile;
    }

    public RemoteFileNode getRootRemoteFileNode() {
        return rootRemoteFileNode;
    }

    public void setRemoteRootFileNode(RemoteFileNode rrfileNode) {
        rootRemoteFileNode = rrfileNode;
    }

    public TreePath getCurrentSelectedNodePath() {
        return getJTree().getSelectionPath();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
