/*
 * WordListJPanel.java
 *
 * Created on July 17, 2008, 10:51 PM
 */

package sanchay.word.gui;

import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Hashtable;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JToolBar;
import sanchay.GlobalProperties;
import sanchay.gui.common.DialogFactory;
import sanchay.gui.common.FileSelectionJPanel;
import sanchay.gui.common.JPanelDialog;
import sanchay.gui.common.SanchayJDialog;
import sanchay.gui.common.SanchayLanguages;
import sanchay.word.WordList;
import sanchay.common.types.ClientType;

/**
 *
 * @author  eklavya
 */
public class WordListJPanel extends javax.swing.JPanel
         implements JPanelDialog, sanchay.gui.clients.SanchayClient {

    protected ClientType clientType = ClientType.WORD_LIST;

    protected JFrame owner;
    protected JDialog dialog;
    protected Component parentComponent;

    protected DefaultComboBoxModel langauges;

    protected String langEnc = GlobalProperties.getIntlString("hin::utf8");
    protected String charset = GlobalProperties.getIntlString("UTF-8");
    protected String wordListFile;

    protected String title = "";

    protected WordList wordList;

    protected DefaultListModel sources;
    protected Hashtable sourceTypes;
    
    /** Creates new form WordListJPanel */
    public WordListJPanel(String langEnc) {
        initComponents();

        parentComponent = this;

        langauges = new DefaultComboBoxModel();

	SanchayLanguages.fillLanguages(langauges);

        this.langEnc = langEnc;
	
	languageJComboBox.setModel(langauges);
        languageJComboBox.setSelectedItem(SanchayLanguages.getLanguageName(langEnc));        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topJPanel = new javax.swing.JPanel();
        lagEncJPanel = new javax.swing.JPanel();
        languageJLabel = new javax.swing.JLabel();
        languageJComboBox = new javax.swing.JComboBox();
        wordListFileJPanel = new javax.swing.JPanel();
        wordListFileJLabel = new javax.swing.JLabel();
        wordListFileJTextField = new javax.swing.JTextField();
        wordListFileJButton = new javax.swing.JButton();
        mainJPanel = new javax.swing.JPanel();
        sourcescrollJPane = new javax.swing.JScrollPane();
        sourceJList = new javax.swing.JList();
        bottomJPanel = new javax.swing.JPanel();
        addSourcesJButton = new javax.swing.JButton();
        removeSourcesJButton = new javax.swing.JButton();
        compileButton = new javax.swing.JButton();
        resetJButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout(0, 4));

        topJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        lagEncJPanel.setLayout(new java.awt.BorderLayout(0, 4));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        languageJLabel.setText(bundle.getString("_Language:________________________")); // NOI18N
        lagEncJPanel.add(languageJLabel, java.awt.BorderLayout.WEST);

        languageJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageJComboBoxActionPerformed(evt);
            }
        });
        lagEncJPanel.add(languageJComboBox, java.awt.BorderLayout.CENTER);

        topJPanel.add(lagEncJPanel);

        wordListFileJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        wordListFileJLabel.setText(bundle.getString("Compiled_Word_List_File:_")); // NOI18N
        wordListFileJLabel.setToolTipText(bundle.getString("Word_list_file_to_save_to.")); // NOI18N
        wordListFileJPanel.add(wordListFileJLabel);

        wordListFileJTextField.setColumns(25);
        wordListFileJTextField.setToolTipText(bundle.getString("Dictionary_File")); // NOI18N
        wordListFileJPanel.add(wordListFileJTextField);

        wordListFileJButton.setText(bundle.getString("Browse")); // NOI18N
        wordListFileJButton.setToolTipText(bundle.getString("Browse_to_the_word_list_file_to_be_saved_to")); // NOI18N
        wordListFileJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordListFileJButtonActionPerformed(evt);
            }
        });
        wordListFileJPanel.add(wordListFileJButton);

        topJPanel.add(wordListFileJPanel);

        add(topJPanel, java.awt.BorderLayout.NORTH);

        mainJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Word List Sources"));
        mainJPanel.setLayout(new java.awt.BorderLayout());

        sourcescrollJPane.setViewportView(sourceJList);

        mainJPanel.add(sourcescrollJPane, java.awt.BorderLayout.CENTER);

        add(mainJPanel, java.awt.BorderLayout.CENTER);

        bottomJPanel.setLayout(new java.awt.GridLayout(1, 0, 4, 0));

        addSourcesJButton.setText(bundle.getString("Add_Sources")); // NOI18N
        addSourcesJButton.setToolTipText(bundle.getString("Add_sources_for_creating_a_word_list")); // NOI18N
        addSourcesJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSourcesJButtonActionPerformed(evt);
            }
        });
        bottomJPanel.add(addSourcesJButton);

        removeSourcesJButton.setText(bundle.getString("Remove_Sources")); // NOI18N
        removeSourcesJButton.setToolTipText(bundle.getString("Remove_sources_for_creating_a_word_list")); // NOI18N
        removeSourcesJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSourcesJButtonActionPerformed(evt);
            }
        });
        bottomJPanel.add(removeSourcesJButton);

        compileButton.setText(bundle.getString("Compile")); // NOI18N
        compileButton.setToolTipText(bundle.getString("Compile_the_word_list_from_the_above_sources")); // NOI18N
        compileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileButtonActionPerformed(evt);
            }
        });
        bottomJPanel.add(compileButton);

        resetJButton.setText(bundle.getString("Reset")); // NOI18N
        resetJButton.setToolTipText(bundle.getString("Reset_the_word_list_and_the_sources_to_start_again")); // NOI18N
        resetJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetJButtonActionPerformed(evt);
            }
        });
        bottomJPanel.add(resetJButton);

        add(bottomJPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void wordListFileJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordListFileJButtonActionPerformed
// TODO add your handling code here:
        String path = GlobalProperties.resolveRelativePath("props/spell-checker");
        
        if(wordListFile != null) {
            File wlfile = new File(wordListFile);
            
            if(wlfile.exists()) {
                path = wlfile.getParentFile().getAbsolutePath();
            }
        }
        
        JFileChooser chooser = null;
        
        if(path != null)
            chooser = new JFileChooser(path);
        else
            chooser = new JFileChooser();
        
        int returnVal = chooser.showSaveDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            wordListFile = chooser.getSelectedFile().getAbsolutePath();
            wordListFileJTextField.setText(wordListFile);
        }
    }//GEN-LAST:event_wordListFileJButtonActionPerformed

    private void removeSourcesJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSourcesJButtonActionPerformed
// TODO add your handling code here:
       int selIndices[] = sourceJList.getSelectedIndices();
        
        for (int i = 0; i < selIndices.length; i++) {
            sourceTypes.remove(sources.getElementAt(selIndices[i] - i));
            sources.removeElementAt(selIndices[i] - i);
        }        
    }//GEN-LAST:event_removeSourcesJButtonActionPerformed

    private void addSourcesJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSourcesJButtonActionPerformed
// TODO add your handling code here:
	String[] srcTypes = WordList.getWordListSourceTypeStrings();

	String selectedSourceType = (String) JOptionPane.showInputDialog(parentComponent,
		GlobalProperties.getIntlString("Select_the_source_type_for_creating_the_word_list"), GlobalProperties.getIntlString("Source_Type"), JOptionPane.INFORMATION_MESSAGE, null,
		srcTypes, WordList.getWordListSourceTypeString(WordList.WORD_FREQ_TYPE));        
        
        File[] newSourceList = getSelectedFiles();
        
        for (int i = 0; i < newSourceList.length; i++)
        {
            sources.addElement(newSourceList[i]);
            sourceTypes.put(newSourceList[i], selectedSourceType);
        }
    }//GEN-LAST:event_addSourcesJButtonActionPerformed

    private void resetJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetJButtonActionPerformed
// TODO add your handling code here:
        init();
    }//GEN-LAST:event_resetJButtonActionPerformed

    private void compileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileButtonActionPerformed
// TODO add your handling code here:
        Cursor cursor = owner.getCursor();
        owner.setCursor(Cursor.WAIT_CURSOR);

        wordListFile = wordListFileJTextField.getText();
        
        File wlfile = new File(wordListFile);
        
        if(wlfile.exists())
        {
            int returnVal = JOptionPane.showConfirmDialog(parentComponent, GlobalProperties.getIntlString("This_file_already_exists._Do_you_want_to_overwrite_it?"), GlobalProperties.getIntlString("File_Exists"), JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

            if(returnVal == JOptionPane.NO_OPTION)
            {
                return;
            }
        }
        
        wordList = new WordList();

        int count = sources.getSize();
        
        for (int i = 0; i < count; i++)
        {
            File srcFile = (File) sources.getElementAt(i);
            String srcType = (String) sourceTypes.get(srcFile);
            
            try {           
                wordList.readFile(srcFile.getAbsolutePath(), charset, WordList.getWordListSourceTypeString(srcType), false);
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Error_in_the_file_") + srcFile.getAbsolutePath()
                        + "\n" + GlobalProperties.getIntlString("The_format_required_is_a_text_file_with_two_tab_separated_columns.")
                        + "\n" + GlobalProperties.getIntlString("The_first_column_should_have_a_word_and_the_second_its_frequency."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);

                ex.printStackTrace();
                owner.setCursor(cursor);
            }
        }
        
        try {
            wordList.save(wordListFile, charset);
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        owner.setCursor(cursor);
    }//GEN-LAST:event_compileButtonActionPerformed

    private void languageJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageJComboBoxActionPerformed
// TODO add your handling code here:
        String langauge = (String) languageJComboBox.getSelectedItem();
        langEnc = SanchayLanguages.getLanguageCode(langauge) + GlobalProperties.getIntlString("::utf8");
        
        init();
    }//GEN-LAST:event_languageJComboBoxActionPerformed
        
    private void init()
    {
        sources = new DefaultListModel();
        sourceJList.setModel(sources);
        
        sourceTypes = new Hashtable();
        
        sourceJList.setCellRenderer(new WordListCellRenderer(sourceTypes));
   }
 
    private File[] getSelectedFiles()
    {
        SanchayJDialog fsDialog = (SanchayJDialog) DialogFactory.showDialog(FileSelectionJPanel.class, owner, GlobalProperties.getIntlString("Select_Word_List_Sources"), true);
        
        FileSelectionJPanel fsPanel = (FileSelectionJPanel) fsDialog.getJPanel();

        return fsPanel.getSelectedFilesExt();
    }

    public ClientType getClientType()
    {
        return clientType;
    }

    public String getLangEnc()
    {
        return langEnc;
    }

    public Frame getOwner() {
        return owner;
    }

    public void setOwner(Frame frame) {
        owner = (JFrame) frame;
    }

    public void setParentComponent(Component parentComponent)
    {
        this.parentComponent = parentComponent;
    }

    public void setDialog(JDialog dialog) {
        this.dialog = dialog;
    }

    public String getTitle() {
        return title;
    }

    public JMenuBar getJMenuBar() {
        return null;
    }

    public JPopupMenu getJPopupMenu() {
        return null;
    }

    public JToolBar getJToolBar() {
        return null;
    }

    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);

        //Create and set up the window.
        JFrame frame = new JFrame(GlobalProperties.getIntlString("Word_List_Builder"));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        

        //Create and set up the content pane.
	WordListJPanel newContentPane = new WordListJPanel(GlobalProperties.getIntlString("hin::utf8"));
        newContentPane.setOwner(frame);
	
        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);

        //Display the window.
        frame.pack();
	
        int inset = 35;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setBounds(inset, inset,
		screenSize.width  - inset*2,
		screenSize.height - inset*5);

	frame.setVisible(true);
        
        newContentPane.requestFocusInWindow();
    }

    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSourcesJButton;
    private javax.swing.JPanel bottomJPanel;
    private javax.swing.JButton compileButton;
    private javax.swing.JPanel lagEncJPanel;
    private javax.swing.JComboBox languageJComboBox;
    private javax.swing.JLabel languageJLabel;
    private javax.swing.JPanel mainJPanel;
    private javax.swing.JButton removeSourcesJButton;
    private javax.swing.JButton resetJButton;
    private javax.swing.JList sourceJList;
    private javax.swing.JScrollPane sourcescrollJPane;
    private javax.swing.JPanel topJPanel;
    private javax.swing.JButton wordListFileJButton;
    private javax.swing.JLabel wordListFileJLabel;
    private javax.swing.JPanel wordListFileJPanel;
    private javax.swing.JTextField wordListFileJTextField;
    // End of variables declaration//GEN-END:variables

}
