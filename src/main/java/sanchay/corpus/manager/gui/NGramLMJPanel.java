/*
 * NGramLMJPanel.java
 *
 * Created on September 25, 2008, 11:12 AM
 */

package sanchay.corpus.manager.gui;

import java.awt.Component;
import java.awt.Frame;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JToolBar;
import sanchay.GlobalProperties;
import sanchay.gui.clients.SanchayClient;
import sanchay.gui.common.JPanelDialog;
import sanchay.gui.common.SanchayLanguages;
import sanchay.mlearning.lm.ngram.NGram;
import sanchay.mlearning.lm.ngram.NGramLM;
import sanchay.mlearning.lm.ngram.impl.NGramLMImpl;
import sanchay.table.SanchayTableModel;
import sanchay.table.gui.SanchayTableJPanel;
import sanchay.common.types.ClientType;
import sanchay.mlearning.lm.ngram.impl.NGramImpl;


/**
 *
 * @author  ambati
 */

public class NGramLMJPanel extends javax.swing.JPanel implements WindowListener, SanchayClient , JPanelDialog {

    protected ClientType clientType = ClientType.NGRAM_LM;

    protected JFrame owner;
    protected JDialog dialog;
    protected Component parentComponent;

    protected String title;
    
    private DefaultComboBoxModel languages;
    private DefaultComboBoxModel encodings;
    private DefaultComboBoxModel orders;
    private DefaultComboBoxModel types;
    
    private String language;
    private String encoding;
    private String order;
    private int orderValue;
    private String type;
    protected String charset = GlobalProperties.getIntlString("UTF-8");
    protected String ngramOutputFile;

    protected String ngramQInputFile;
    protected String query;
    protected String minFreq;
    protected String qOrder;
    protected String maxFreq;
    protected int minFreqValue, maxFreqValue, qOrderValue;


    private NGramLM ngramLM;

    public SanchayTableJPanel qOutputTJPanel;

    protected DefaultListModel selectedFiles;
    
    /** Creates new form NGramLMJPanel */
    public NGramLMJPanel() {
        initComponents();
        
        languages = new DefaultComboBoxModel();
        encodings = new DefaultComboBoxModel();
        
        SanchayLanguages.fillLanguages(languages);
        SanchayLanguages.fillEncodings(encodings, "hin");
        
        languageJComboBox.setModel(languages);
        encodingJComboBox.setModel(encodings);
        
        String[] orderString = {"1", "2","3"};
        String[] typeString = {"char", "byte", "word"};
        
        types = new DefaultComboBoxModel();
        orders = new DefaultComboBoxModel();
        
        for (int i = 0; i < orderString.length; i++)
            orders.addElement(orderString[i]);  
        for (int i = 0; i < typeString.length; i++)
            types.addElement(typeString[i]);
        
        ngramOrderJComboBox.setModel(orders);
        ngramTypeJComboBox.setModel(types);
        
        selectedFiles = new DefaultListModel();
        sourceJList.setModel(selectedFiles);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ngramGenerateJPanel = new javax.swing.JPanel();
        topJPanel = new javax.swing.JPanel();
        languageJPanel = new javax.swing.JPanel();
        languageJLabel = new javax.swing.JLabel();
        languageJComboBox = new javax.swing.JComboBox();
        encodingJPanel = new javax.swing.JPanel();
        encodingJLabel = new javax.swing.JLabel();
        encodingJComboBox = new javax.swing.JComboBox();
        ngramSettingJPanel = new javax.swing.JPanel();
        ngramOrderJLabel = new javax.swing.JLabel();
        ngramOrderJComboBox = new javax.swing.JComboBox();
        ngramTypeJLabel = new javax.swing.JLabel();
        ngramTypeJComboBox = new javax.swing.JComboBox();
        ngramOutputFileJPanel = new javax.swing.JPanel();
        ngramOutputFileJLabel = new javax.swing.JLabel();
        ngramOutputFileJTextField = new javax.swing.JTextField();
        ngramOutputFileJButton = new javax.swing.JButton();
        mainJPanel = new javax.swing.JPanel();
        sourcescrollJPane = new javax.swing.JScrollPane();
        sourceJList = new javax.swing.JList();
        bottomJPanel = new javax.swing.JPanel();
        addSourcesJButton = new javax.swing.JButton();
        removeSourcesJButton = new javax.swing.JButton();
        resetJButton = new javax.swing.JButton();
        compileButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        ngramQueryJPanel = new javax.swing.JPanel();
        ngramQueryInputjPanel = new javax.swing.JPanel();
        ngramQInputFileJPanel = new javax.swing.JPanel();
        ngramQInputFileJLabel = new javax.swing.JLabel();
        ngramQInputFileJTextField = new javax.swing.JTextField();
        ngramQInputFileJButton = new javax.swing.JButton();
        ngramQSettingJPanel = new javax.swing.JPanel();
        ngramQueryLabel = new javax.swing.JLabel();
        ngramQueryTextField = new javax.swing.JTextField();
        ngramQOrderLabel = new javax.swing.JLabel();
        ngramQOrderTextField = new javax.swing.JTextField();
        ngramQMinFreqLabel = new javax.swing.JLabel();
        ngramQMinFreqTextField = new javax.swing.JTextField();
        ngramQMaxFreqLabel = new javax.swing.JLabel();
        ngramQMaxFreqTextField = new javax.swing.JTextField();
        ngramQRetrievejButton = new javax.swing.JButton();
        ngramQueryOutputjPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        ngramGenerateJPanel.setLayout(new java.awt.BorderLayout());

        topJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        languageJPanel.setLayout(new java.awt.BorderLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        languageJLabel.setText(bundle.getString("Language:_")); // NOI18N
        languageJPanel.add(languageJLabel, java.awt.BorderLayout.WEST);

        languageJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageJComboBoxActionPerformed(evt);
            }
        });
        languageJPanel.add(languageJComboBox, java.awt.BorderLayout.CENTER);

        topJPanel.add(languageJPanel);

        encodingJPanel.setLayout(new java.awt.BorderLayout());

        encodingJLabel.setText(bundle.getString("Encoding:__")); // NOI18N
        encodingJPanel.add(encodingJLabel, java.awt.BorderLayout.WEST);

        encodingJPanel.add(encodingJComboBox, java.awt.BorderLayout.CENTER);

        topJPanel.add(encodingJPanel);

        ngramSettingJPanel.setLayout(new javax.swing.BoxLayout(ngramSettingJPanel, javax.swing.BoxLayout.LINE_AXIS));

        ngramOrderJLabel.setText(bundle.getString("_Order_of_ngram:")); // NOI18N
        ngramSettingJPanel.add(ngramOrderJLabel);

        ngramOrderJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngramOrderJComboBoxActionPerformed(evt);
            }
        });
        ngramSettingJPanel.add(ngramOrderJComboBox);

        ngramTypeJLabel.setText(bundle.getString("_Type:")); // NOI18N
        ngramSettingJPanel.add(ngramTypeJLabel);

        ngramTypeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngramTypeJComboBoxActionPerformed(evt);
            }
        });
        ngramSettingJPanel.add(ngramTypeJComboBox);

        topJPanel.add(ngramSettingJPanel);

        ngramOutputFileJPanel.setLayout(new javax.swing.BoxLayout(ngramOutputFileJPanel, javax.swing.BoxLayout.LINE_AXIS));

        ngramOutputFileJLabel.setText(bundle.getString("Output_File:")); // NOI18N
        ngramOutputFileJLabel.setToolTipText(bundle.getString("Output_file_to_save_to.")); // NOI18N
        ngramOutputFileJPanel.add(ngramOutputFileJLabel);

        ngramOutputFileJTextField.setColumns(25);
        ngramOutputFileJTextField.setToolTipText(bundle.getString("Dictionary_File")); // NOI18N
        ngramOutputFileJPanel.add(ngramOutputFileJTextField);

        ngramOutputFileJButton.setText(bundle.getString("Browse")); // NOI18N
        ngramOutputFileJButton.setToolTipText(bundle.getString("Browse_to_the_word_list_file_to_be_saved_to")); // NOI18N
        ngramOutputFileJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngramOutputFileJButtonActionPerformed(evt);
            }
        });
        ngramOutputFileJPanel.add(ngramOutputFileJButton);

        topJPanel.add(ngramOutputFileJPanel);

        ngramGenerateJPanel.add(topJPanel, java.awt.BorderLayout.NORTH);

        mainJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Files List"));
        mainJPanel.setLayout(new java.awt.BorderLayout());

        sourcescrollJPane.setViewportView(sourceJList);

        mainJPanel.add(sourcescrollJPane, java.awt.BorderLayout.CENTER);

        ngramGenerateJPanel.add(mainJPanel, java.awt.BorderLayout.CENTER);

        bottomJPanel.setLayout(new java.awt.GridLayout(1, 0, 4, 0));

        addSourcesJButton.setText(bundle.getString("Add_Sources")); // NOI18N
        addSourcesJButton.setToolTipText(bundle.getString("Add_sources_for_creating_ngrams")); // NOI18N
        addSourcesJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSourcesJButtonActionPerformed(evt);
            }
        });
        bottomJPanel.add(addSourcesJButton);

        removeSourcesJButton.setText(bundle.getString("Remove_Sources")); // NOI18N
        removeSourcesJButton.setToolTipText(bundle.getString("Remove_sources_for_creating_a_ngrams")); // NOI18N
        removeSourcesJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSourcesJButtonActionPerformed(evt);
            }
        });
        bottomJPanel.add(removeSourcesJButton);

        resetJButton.setText(bundle.getString("Reset")); // NOI18N
        resetJButton.setToolTipText(bundle.getString("Reset_the_sources_to_start_again")); // NOI18N
        resetJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetJButtonActionPerformed(evt);
            }
        });
        bottomJPanel.add(resetJButton);

        compileButton.setText(bundle.getString("Compile")); // NOI18N
        compileButton.setToolTipText(bundle.getString("Compile_ngrams_from_the_above_sources")); // NOI18N
        compileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileButtonActionPerformed(evt);
            }
        });
        bottomJPanel.add(compileButton);

        ngramGenerateJPanel.add(bottomJPanel, java.awt.BorderLayout.SOUTH);

        add(ngramGenerateJPanel, java.awt.BorderLayout.PAGE_START);
        add(jSeparator1, java.awt.BorderLayout.PAGE_END);

        ngramQueryJPanel.setLayout(new java.awt.BorderLayout());

        ngramQueryInputjPanel.setLayout(new java.awt.BorderLayout());

        ngramQInputFileJPanel.setLayout(new javax.swing.BoxLayout(ngramQInputFileJPanel, javax.swing.BoxLayout.LINE_AXIS));

        ngramQInputFileJLabel.setText(bundle.getString("Ngram_File:")); // NOI18N
        ngramQInputFileJLabel.setToolTipText(bundle.getString("Output_file_to_save_to.")); // NOI18N
        ngramQInputFileJPanel.add(ngramQInputFileJLabel);

        ngramQInputFileJTextField.setColumns(25);
        ngramQInputFileJTextField.setToolTipText(bundle.getString("Dictionary_File")); // NOI18N
        ngramQInputFileJPanel.add(ngramQInputFileJTextField);

        ngramQInputFileJButton.setText(bundle.getString("Browse")); // NOI18N
        ngramQInputFileJButton.setToolTipText(bundle.getString("Browse_to_the_word_list_file_to_be_saved_to")); // NOI18N
        ngramQInputFileJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngramQInputFileJButtonActionPerformed(evt);
            }
        });
        ngramQInputFileJPanel.add(ngramQInputFileJButton);

        ngramQueryInputjPanel.add(ngramQInputFileJPanel, java.awt.BorderLayout.PAGE_START);

        ngramQSettingJPanel.setLayout(new javax.swing.BoxLayout(ngramQSettingJPanel, javax.swing.BoxLayout.LINE_AXIS));

        ngramQueryLabel.setText(bundle.getString("Query:")); // NOI18N
        ngramQSettingJPanel.add(ngramQueryLabel);

        ngramQueryTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngramQueryTextFieldActionPerformed(evt);
            }
        });
        ngramQSettingJPanel.add(ngramQueryTextField);

        ngramQOrderLabel.setText(bundle.getString("Order:_")); // NOI18N
        ngramQSettingJPanel.add(ngramQOrderLabel);

        ngramQOrderTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngramQOrderTextFieldActionPerformed(evt);
            }
        });
        ngramQSettingJPanel.add(ngramQOrderTextField);

        ngramQMinFreqLabel.setText(bundle.getString("Min_Freq:")); // NOI18N
        ngramQSettingJPanel.add(ngramQMinFreqLabel);

        ngramQMinFreqTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngramQMinFreqTextFieldActionPerformed(evt);
            }
        });
        ngramQSettingJPanel.add(ngramQMinFreqTextField);

        ngramQMaxFreqLabel.setText(bundle.getString("Max_Freq:_")); // NOI18N
        ngramQSettingJPanel.add(ngramQMaxFreqLabel);

        ngramQMaxFreqTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngramQMaxFreqTextFieldActionPerformed(evt);
            }
        });
        ngramQSettingJPanel.add(ngramQMaxFreqTextField);

        ngramQRetrievejButton.setText(bundle.getString("Retrieve")); // NOI18N
        ngramQRetrievejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngramQRetrievejButtonActionPerformed(evt);
            }
        });
        ngramQSettingJPanel.add(ngramQRetrievejButton);

        ngramQueryInputjPanel.add(ngramQSettingJPanel, java.awt.BorderLayout.PAGE_END);

        ngramQueryJPanel.add(ngramQueryInputjPanel, java.awt.BorderLayout.PAGE_START);
        ngramQueryJPanel.add(ngramQueryOutputjPanel, java.awt.BorderLayout.CENTER);

        add(ngramQueryJPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    public ClientType getClientType()
    {
        return clientType;
    }

    public void ngramQFillTable(LinkedHashMap<Integer, LinkedHashMap<List<Integer>, NGram>> fNGrams)
    {
        SanchayTableModel qTableModel = new SanchayTableModel(new String[]{GlobalProperties.getIntlString("Order"), GlobalProperties.getIntlString("ngram"), GlobalProperties.getIntlString("Frequency"), GlobalProperties.getIntlString("Probability")}, 0);
        qTableModel.setEditable(false);

        //int count = 0;
        Iterator<Integer> itr = fNGrams.keySet().iterator();
        while(itr.hasNext())
        {
            Integer key = itr.next();
            LinkedHashMap<List<Integer>, NGram> fNGram = fNGrams.get(key);
            Iterator<List<Integer>> itr2 = fNGram.keySet().iterator();
            System.out.println(key + "gram");
            while(itr2.hasNext())
            {
                //count++;
                List<Integer> key2Indices = itr2.next();

                String key2 = NGramImpl.getPlainString(ngramLM, key2Indices);
                
                NGram ng = (NGram) fNGram.get(key2Indices);
                List data = new ArrayList(4);
                data.add(key);
//                data.add(key2.replaceAll("@#&"," "));
                data.add(key2);
                data.add(ng.getFreq());
                data.add(ng.getProb());
                qTableModel.addRow(data.toArray());
//                System.out.println(ng.getString().replaceAll("@#&"," ") +"\t"+ ng.getFreq() +"\t"+ ng.getProb());
            }
        }
        
        qOutputTJPanel = SanchayTableJPanel.createTableDefaultJPanel(qTableModel, getLangEnc());
        qOutputTJPanel.setSortable(true);
        qOutputTJPanel.showCommandButtons(false);
        //add(ngramQueryJPanel, java.awt.BorderLayout.CENTER);

        //UtilityFunctions.setComponentFont(qOutputTJPanel.getJTable(), SanchayLanguages.getLangEncCode(language, encoding));

        ngramQueryOutputjPanel.removeAll();
        ngramQueryOutputjPanel.add(qOutputTJPanel,java.awt.BorderLayout.CENTER);
    }



    private void languageJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageJComboBoxActionPerformed
        // TODO add your handling code here:
        language = (String) languageJComboBox.getSelectedItem();
        SanchayLanguages.fillEncodings(encodings, SanchayLanguages.getLanguageCode(language));
    }//GEN-LAST:event_languageJComboBoxActionPerformed

    private void ngramOrderJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngramOrderJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ngramOrderJComboBoxActionPerformed

    private void ngramTypeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngramTypeJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ngramTypeJComboBoxActionPerformed

    private void ngramOutputFileJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngramOutputFileJButtonActionPerformed
        // TODO add your handling code here:
        
        String path = "~/";
        
        if(ngramOutputFile != null) {
            File wlfile = new File(ngramOutputFile);
            
            if(wlfile.exists()) {
                path = wlfile.getParentFile().getAbsolutePath();
            }
        }
        
        JFileChooser chooser = null;
        
        if(path != null)
            chooser = new JFileChooser(path);
        else
            chooser = new JFileChooser();
        
        int returnVal = chooser.showSaveDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            ngramOutputFile = chooser.getSelectedFile().getAbsolutePath();
            ngramOutputFileJTextField.setText(ngramOutputFile);
        }
    }//GEN-LAST:event_ngramOutputFileJButtonActionPerformed

    private void addSourcesJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSourcesJButtonActionPerformed
        // TODO add your handling code here:

                
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setMultiSelectionEnabled(true);
        
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File selFiles[] = chooser.getSelectedFiles();
            
            for (int i = 0; i < selFiles.length; i++) {
                File selectedFile = (File) selFiles[i];
                
                //           if(validateFilePath(taskPropSchema).equals("") == false)
                //           {
                selectedFiles.addElement(selectedFile);
                //           }
            }
        }
    }//GEN-LAST:event_addSourcesJButtonActionPerformed

    private void removeSourcesJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSourcesJButtonActionPerformed
        // TODO add your handling code here:
        
        int selIndices[] = sourceJList.getSelectedIndices();
        
        for (int i = 0; i < selIndices.length; i++) {
            selectedFiles.removeElementAt(selIndices[i] - i);
        }
    }//GEN-LAST:event_removeSourcesJButtonActionPerformed

    private void resetJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetJButtonActionPerformed
        // TODO add your handling code here:
        selectedFiles.removeAllElements();
    }//GEN-LAST:event_resetJButtonActionPerformed

    private void compileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileButtonActionPerformed
        // TODO add your handling code here:
        
        ngramOutputFile = ngramOutputFileJTextField.getText();
        language = (String) languageJComboBox.getSelectedItem();
        encoding = (String) encodingJComboBox.getSelectedItem();
        order = (String) ngramOrderJComboBox.getSelectedItem();
        type = (String) ngramTypeJComboBox.getSelectedItem();
        
        orderValue = Integer.parseInt(order);
        
        File fout = new File(ngramOutputFile);
        File fin = new File(ngramOutputFile);

        if(fout.exists()) {
            int returnVal = JOptionPane.showConfirmDialog(this, GlobalProperties.getIntlString("This_file_already_exists._Do_you_want_to_overwrite_it?"), GlobalProperties.getIntlString("File_Exists"), JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            
            if(returnVal == JOptionPane.NO_OPTION) {
                return;
            }
        }
        
        
        PrintStream ps = null;
        
        NGramLM nglm = new NGramLMImpl(fin, type, orderValue, GlobalProperties.getIntlString("UTF-8"), language);
        //        NGramLM nglm = new NGramLMImpl(fin, type, order, "UTF-8", language);
         
        int count = selectedFiles.getSize();
        
        for (int i = 0; i < count; i++)
        {
            fin = (File) selectedFiles.getElementAt(i);
            
            try
            {
                nglm.setNGramLMFile(fin);
                nglm.makeNGramLM(fin);
                ps = new PrintStream(fout, "UTF8");
                System.out.println(fin+" "+fout+" "+type+" "+orderValue+" "+language);
            }
            catch(IOException e) 
            {
                e.printStackTrace();
                System.out.println(GlobalProperties.getIntlString("IOException_Exception!"));
            }
            nglm.writeNGramLM(ps, true);
        }
    }//GEN-LAST:event_compileButtonActionPerformed

    private void ngramQInputFileJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngramQInputFileJButtonActionPerformed
        // TODO add your handling code here:

        String path = "~/";
        ngramQInputFile = ngramQInputFileJTextField.getText();

        if(ngramQInputFile != null) {
            File wlfile = new File(ngramQInputFile);

            if(wlfile.exists()) {
                path = wlfile.getParentFile().getAbsolutePath();
            }
        }

        JFileChooser chooser = null;

        if(path != null)
            chooser = new JFileChooser(path);
        else
            chooser = new JFileChooser();

        int returnVal = chooser.showSaveDialog(this);

        if(returnVal == JFileChooser.APPROVE_OPTION) {
            ngramQInputFile = chooser.getSelectedFile().getAbsolutePath();
            ngramQInputFileJTextField.setText(ngramQInputFile);
        }
}//GEN-LAST:event_ngramQInputFileJButtonActionPerformed

    private void ngramQueryTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngramQueryTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_ngramQueryTextFieldActionPerformed

    private void ngramQOrderTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngramQOrderTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_ngramQOrderTextFieldActionPerformed

    private void ngramQMinFreqTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngramQMinFreqTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_ngramQMinFreqTextFieldActionPerformed

    private void ngramQMaxFreqTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngramQMaxFreqTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_ngramQMaxFreqTextFieldActionPerformed

    private void ngramQRetrievejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngramQRetrievejButtonActionPerformed
        // TODO add your handling code here:

        ngramQInputFile = ngramQInputFileJTextField.getText();
        
        try
            {
                File inFile = new File(ngramQInputFile);
                ngramLM = new NGramLMImpl(inFile, "word", 3);
                ngramLM.readNGramLM(inFile);

                query = ngramQueryTextField.getText() ;
                qOrder = ngramQOrderTextField.getText();
                minFreq = ngramQMinFreqTextField.getText();
                maxFreq = ngramQMaxFreqTextField.getText();
                qOrderValue = Integer.parseInt(qOrder);
                minFreqValue = Integer.parseInt(minFreq);
                maxFreqValue = Integer.parseInt(maxFreq);

                LinkedHashMap<Integer, LinkedHashMap<List<Integer>, NGram>> matchNgrams = new LinkedHashMap<Integer, LinkedHashMap<List<Integer>, NGram>>(0,20);
                matchNgrams = ngramLM.findNGramFile(query, qOrderValue, minFreqValue, maxFreqValue);
                ngramQFillTable(matchNgrams);
            }
            catch(IOException e)
            {
                e.printStackTrace();
                System.out.println(GlobalProperties.getIntlString("IOException_Exception!"));
            }
    }//GEN-LAST:event_ngramQRetrievejButtonActionPerformed

    public String getLangEnc()
    {
        return SanchayLanguages.getLangEncCode(language, encoding);
    }

    public Frame getOwner() {
        return owner;
    }

    public void setOwner(Frame frame) {
        owner = (JFrame) frame;
        owner.addWindowListener(this);
    }

    public void setParentComponent(Component parentComponent)
    {
        this.parentComponent = parentComponent;
    }

    public void setDialog(JDialog d) {
        dialog = d;
    }

    public JMenuBar getJMenuBar() {
        return null;
    }

    public JToolBar getJToolBar() {
        return null;
    }

    public JPopupMenu getJPopupMenu() {
        return null;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String t) {
        title = t;
    }

    public void windowOpened(WindowEvent e) {
    }

    public void windowClosing(WindowEvent e) {
    }

    public void windowClosed(WindowEvent e) {
    }

    public void windowIconified(WindowEvent e) {
    }

    public void windowDeiconified(WindowEvent e) {
    }

    public void windowActivated(WindowEvent e) {
    }

    public void windowDeactivated(WindowEvent e) {
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSourcesJButton;
    private javax.swing.JPanel bottomJPanel;
    private javax.swing.JButton compileButton;
    private javax.swing.JComboBox encodingJComboBox;
    private javax.swing.JLabel encodingJLabel;
    private javax.swing.JPanel encodingJPanel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox languageJComboBox;
    private javax.swing.JLabel languageJLabel;
    private javax.swing.JPanel languageJPanel;
    private javax.swing.JPanel mainJPanel;
    private javax.swing.JPanel ngramGenerateJPanel;
    private javax.swing.JComboBox ngramOrderJComboBox;
    private javax.swing.JLabel ngramOrderJLabel;
    private javax.swing.JButton ngramOutputFileJButton;
    private javax.swing.JLabel ngramOutputFileJLabel;
    private javax.swing.JPanel ngramOutputFileJPanel;
    private javax.swing.JTextField ngramOutputFileJTextField;
    private javax.swing.JButton ngramQInputFileJButton;
    private javax.swing.JLabel ngramQInputFileJLabel;
    private javax.swing.JPanel ngramQInputFileJPanel;
    private javax.swing.JTextField ngramQInputFileJTextField;
    private javax.swing.JLabel ngramQMaxFreqLabel;
    private javax.swing.JTextField ngramQMaxFreqTextField;
    private javax.swing.JLabel ngramQMinFreqLabel;
    private javax.swing.JTextField ngramQMinFreqTextField;
    private javax.swing.JLabel ngramQOrderLabel;
    private javax.swing.JTextField ngramQOrderTextField;
    private javax.swing.JButton ngramQRetrievejButton;
    private javax.swing.JPanel ngramQSettingJPanel;
    private javax.swing.JPanel ngramQueryInputjPanel;
    private javax.swing.JPanel ngramQueryJPanel;
    private javax.swing.JLabel ngramQueryLabel;
    private javax.swing.JPanel ngramQueryOutputjPanel;
    private javax.swing.JTextField ngramQueryTextField;
    private javax.swing.JPanel ngramSettingJPanel;
    private javax.swing.JComboBox ngramTypeJComboBox;
    private javax.swing.JLabel ngramTypeJLabel;
    private javax.swing.JButton removeSourcesJButton;
    private javax.swing.JButton resetJButton;
    private javax.swing.JList sourceJList;
    private javax.swing.JScrollPane sourcescrollJPane;
    private javax.swing.JPanel topJPanel;
    // End of variables declaration//GEN-END:variables

       private static void createAndShowGUI() {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);

        //Create and set up the window.
        JFrame frame = new JFrame(GlobalProperties.getIntlString("Ngram_GUI"));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        

        //Create and set up the content pane.
        NGramLMJPanel newContentPane = new NGramLMJPanel();
	
        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);

        //Display the window.
        frame.pack();

        /*
        int inset = 35;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setBounds(inset, inset,
		screenSize.width  - inset*2,
		screenSize.height - inset*5);
*/
	frame.setVisible(true);
        
        newContentPane.requestFocusInWindow();
    }
    
        public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
}
