/*
 * NGramLMJPanel.java
 *
 * Created on September 7, 2008, 11:53 AM
 */

package sanchay.corpus.manager.gui;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Hashtable;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import sanchay.GlobalProperties;
import sanchay.gui.common.SanchayLanguages;
import sanchay.mlearning.lm.ngram.NGramLM;
import sanchay.mlearning.lm.ngram.impl.NGramLMImpl;
import sanchay.word.WordList;

/**
 *
 * @author  ambati
 */
public class NGramLMJPanel2 extends javax.swing.JPanel {
        
    protected JFrame owner;
    protected JDialog dialog;

    
    
    private DefaultComboBoxModel languages;
    private DefaultComboBoxModel encodings;
    private DefaultComboBoxModel orders;
    private DefaultComboBoxModel types;
    
    private String language;
    private String encoding;
    private String order;
    private int orderValue;
    private String type;
    protected String charset = GlobalProperties.getIntlString("UTF-8");
    protected String ngramInputFile;
    protected String ngramOutputFile;

    protected DefaultListModel sources;
    protected Hashtable sourceTypes;
    protected WordList wordList;
    
    /** Creates new form NGramLMJPanel */
    public NGramLMJPanel2() {
        initComponents();
        
        languages = new DefaultComboBoxModel();
        encodings = new DefaultComboBoxModel();
        
        SanchayLanguages.fillLanguages(languages);
        SanchayLanguages.fillEncodings(encodings, "hin");
        
        languageJComboBox.setModel(languages);
        encodingJComboBox.setModel(encodings);
        
        String[] orderString = {"1", "2","3"};
        String[] typeString = {"char", "byte", "word"};
        
        types = new DefaultComboBoxModel();
        orders = new DefaultComboBoxModel();
        
        for (int i = 0; i < orderString.length; i++)
            orders.addElement(orderString[i]);  
        for (int i = 0; i < typeString.length; i++)
            types.addElement(typeString[i]);
        
        ngramOrderJComboBox.setModel(orders);
        ngramTypeJComboBox.setModel(types);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        languageJPanel = new javax.swing.JPanel();
        languageJLabel = new javax.swing.JLabel();
        languageJComboBox = new javax.swing.JComboBox();
        encodingJPanel = new javax.swing.JPanel();
        encodingJLabel = new javax.swing.JLabel();
        encodingJComboBox = new javax.swing.JComboBox();
        ngramSettingJPanel = new javax.swing.JPanel();
        ngramOrderJLabel = new javax.swing.JLabel();
        ngramOrderJComboBox = new javax.swing.JComboBox();
        ngramTypeJLabel = new javax.swing.JLabel();
        ngramTypeJComboBox = new javax.swing.JComboBox();
        ngramInputFileJPanel = new javax.swing.JPanel();
        ngramInputFileJLabel = new javax.swing.JLabel();
        ngramInputFileJTextField = new javax.swing.JTextField();
        ngramInputFileJButton = new javax.swing.JButton();
        ngramOutputFileJPanel = new javax.swing.JPanel();
        ngramOutputFileJLabel = new javax.swing.JLabel();
        ngramOutputFileJTextField = new javax.swing.JTextField();
        ngramOutputFileJButton = new javax.swing.JButton();
        compileJPanel = new javax.swing.JPanel();
        compileJButton = new javax.swing.JButton();

        setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        languageJPanel.setLayout(new java.awt.BorderLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        languageJLabel.setText(bundle.getString("Language:_")); // NOI18N
        languageJPanel.add(languageJLabel, java.awt.BorderLayout.WEST);

        languageJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageJComboBoxActionPerformed(evt);
            }
        });
        languageJPanel.add(languageJComboBox, java.awt.BorderLayout.CENTER);

        add(languageJPanel);

        encodingJPanel.setLayout(new java.awt.BorderLayout());

        encodingJLabel.setText(bundle.getString("Encoding:__")); // NOI18N
        encodingJPanel.add(encodingJLabel, java.awt.BorderLayout.WEST);

        encodingJPanel.add(encodingJComboBox, java.awt.BorderLayout.CENTER);

        add(encodingJPanel);

        ngramSettingJPanel.setLayout(new javax.swing.BoxLayout(ngramSettingJPanel, javax.swing.BoxLayout.LINE_AXIS));

        ngramOrderJLabel.setText(" Order of ngram:");
        ngramSettingJPanel.add(ngramOrderJLabel);

        ngramOrderJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngramOrderJComboBoxActionPerformed(evt);
            }
        });
        ngramSettingJPanel.add(ngramOrderJComboBox);

        ngramTypeJLabel.setText(bundle.getString("_Type:")); // NOI18N
        ngramSettingJPanel.add(ngramTypeJLabel);

        ngramTypeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngramTypeJComboBoxActionPerformed(evt);
            }
        });
        ngramSettingJPanel.add(ngramTypeJComboBox);

        add(ngramSettingJPanel);

        ngramInputFileJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        ngramInputFileJLabel.setText(bundle.getString("_Input__File:")); // NOI18N
        ngramInputFileJLabel.setToolTipText(bundle.getString("Output_file_to_save_to.")); // NOI18N
        ngramInputFileJPanel.add(ngramInputFileJLabel);

        ngramInputFileJTextField.setColumns(25);
        ngramInputFileJTextField.setToolTipText(bundle.getString("Dictionary_File")); // NOI18N
        ngramInputFileJPanel.add(ngramInputFileJTextField);

        ngramInputFileJButton.setText(bundle.getString("Browse")); // NOI18N
        ngramInputFileJButton.setToolTipText(bundle.getString("Browse_to_the_word_list_file_to_be_saved_to")); // NOI18N
        ngramInputFileJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngramInputFileJButtonActionPerformed(evt);
            }
        });
        ngramInputFileJPanel.add(ngramInputFileJButton);

        add(ngramInputFileJPanel);

        ngramOutputFileJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        ngramOutputFileJLabel.setText(bundle.getString("Output_File:")); // NOI18N
        ngramOutputFileJLabel.setToolTipText(bundle.getString("Output_file_to_save_to.")); // NOI18N
        ngramOutputFileJPanel.add(ngramOutputFileJLabel);

        ngramOutputFileJTextField.setColumns(25);
        ngramOutputFileJTextField.setToolTipText(bundle.getString("Dictionary_File")); // NOI18N
        ngramOutputFileJPanel.add(ngramOutputFileJTextField);

        ngramOutputFileJButton.setText(bundle.getString("Browse")); // NOI18N
        ngramOutputFileJButton.setToolTipText(bundle.getString("Browse_to_the_word_list_file_to_be_saved_to")); // NOI18N
        ngramOutputFileJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ngramOutputFileJButtonActionPerformed(evt);
            }
        });
        ngramOutputFileJPanel.add(ngramOutputFileJButton);

        add(ngramOutputFileJPanel);

        compileJPanel.setLayout(new java.awt.BorderLayout());

        compileJButton.setText(bundle.getString("Compile")); // NOI18N
        compileJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileJButtonActionPerformed(evt);
            }
        });
        compileJPanel.add(compileJButton, java.awt.BorderLayout.CENTER);

        add(compileJPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void languageJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageJComboBoxActionPerformed
        // TODO add your handling code here:
        language = (String) languageJComboBox.getSelectedItem();
        SanchayLanguages.fillEncodings(encodings, SanchayLanguages.getLanguageCode(language));
    }//GEN-LAST:event_languageJComboBoxActionPerformed

    private void ngramOrderJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngramOrderJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ngramOrderJComboBoxActionPerformed

    private void ngramTypeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngramTypeJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ngramTypeJComboBoxActionPerformed

    private void ngramOutputFileJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngramOutputFileJButtonActionPerformed
        // TODO add your handling code here:
        String path = "~/";
        
        if(ngramOutputFile != null) {
            File wlfile = new File(ngramOutputFile);
            
            if(wlfile.exists()) {
                path = wlfile.getParentFile().getAbsolutePath();
            }
        }
        
        JFileChooser chooser = null;
        
        if(path != null)
            chooser = new JFileChooser(path);
        else
            chooser = new JFileChooser();
        
        int returnVal = chooser.showSaveDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            ngramOutputFile = chooser.getSelectedFile().getAbsolutePath();
            ngramOutputFileJTextField.setText(ngramOutputFile);
        }
    }//GEN-LAST:event_ngramOutputFileJButtonActionPerformed

    private void ngramInputFileJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ngramInputFileJButtonActionPerformed
        // TODO add your handling code here:
                String path = "~/";
        
        if(ngramInputFile != null) {
            File wlfile = new File(ngramInputFile);
            
            if(wlfile.exists()) {
                path = wlfile.getParentFile().getAbsolutePath();
            }
        }
        
        JFileChooser chooser = null;
        
        if(path != null)
            chooser = new JFileChooser(path);
        else
            chooser = new JFileChooser();
        
        int returnVal = chooser.showSaveDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            ngramInputFile = chooser.getSelectedFile().getAbsolutePath();
            ngramInputFileJTextField.setText(ngramInputFile);
        }
}//GEN-LAST:event_ngramInputFileJButtonActionPerformed

    private void compileJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileJButtonActionPerformed
        // TODO add your handling code here:
        
        ngramInputFile = ngramInputFileJTextField.getText();
        ngramOutputFile = ngramOutputFileJTextField.getText();
        language = (String) languageJComboBox.getSelectedItem();
        encoding = (String) encodingJComboBox.getSelectedItem();
        order = (String) ngramOrderJComboBox.getSelectedItem();
        type = (String) ngramTypeJComboBox.getSelectedItem();
        
        orderValue = Integer.parseInt(order);
        
        File fout = new File(ngramOutputFile);
        File fin = new File(ngramInputFile);
        
        System.out.println(fin+" "+fout+" "+type+" "+orderValue+" "+language);
        
        if(fout.exists()) {
            int returnVal = JOptionPane.showConfirmDialog(this, GlobalProperties.getIntlString("This_file_already_exists._Do_you_want_to_overwrite_it?"), GlobalProperties.getIntlString("File_Exists"), JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            
            if(returnVal == JOptionPane.NO_OPTION) {
                return;
            }
        }
        
        PrintStream ps = null;
        
            NGramLM nglm = new NGramLMImpl(fin, type, orderValue, GlobalProperties.getIntlString("UTF-8"), language);
        //        NGramLM nglm = new NGramLMImpl(fin, type, order, "UTF-8", language);
            
            try
            {
		nglm.makeNGramLM(fin);
                ps = new PrintStream(fout, GlobalProperties.getIntlString("UTF8"));
            }
            catch(IOException e) 
            {
		e.printStackTrace();
                System.out.println(GlobalProperties.getIntlString("IOException_Exception!"));
            }
            nglm.writeNGramLM(ps, true);
    }//GEN-LAST:event_compileJButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton compileJButton;
    private javax.swing.JPanel compileJPanel;
    private javax.swing.JComboBox encodingJComboBox;
    private javax.swing.JLabel encodingJLabel;
    private javax.swing.JPanel encodingJPanel;
    private javax.swing.JComboBox languageJComboBox;
    private javax.swing.JLabel languageJLabel;
    private javax.swing.JPanel languageJPanel;
    private javax.swing.JButton ngramInputFileJButton;
    private javax.swing.JLabel ngramInputFileJLabel;
    private javax.swing.JPanel ngramInputFileJPanel;
    private javax.swing.JTextField ngramInputFileJTextField;
    private javax.swing.JComboBox ngramOrderJComboBox;
    private javax.swing.JLabel ngramOrderJLabel;
    private javax.swing.JButton ngramOutputFileJButton;
    private javax.swing.JLabel ngramOutputFileJLabel;
    private javax.swing.JPanel ngramOutputFileJPanel;
    private javax.swing.JTextField ngramOutputFileJTextField;
    private javax.swing.JPanel ngramSettingJPanel;
    private javax.swing.JComboBox ngramTypeJComboBox;
    private javax.swing.JLabel ngramTypeJLabel;
    // End of variables declaration//GEN-END:variables
 
       private static void createAndShowGUI() {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);

        //Create and set up the window.
        JFrame frame = new JFrame(GlobalProperties.getIntlString("Ngram_Builder"));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        

        //Create and set up the content pane.
	NGramLMJPanel2 newContentPane = new NGramLMJPanel2();
	
        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);

        //Display the window.
        frame.pack();

        /*
        int inset = 35;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setBounds(inset, inset,
		screenSize.width  - inset*2,
		screenSize.height - inset*5);
*/
	frame.setVisible(true);
        
        newContentPane.requestFocusInWindow();
    }
    
        public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
}
