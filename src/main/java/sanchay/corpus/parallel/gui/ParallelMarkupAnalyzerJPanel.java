/*
 * ParallelMarkupCompareJPanel.java
 *
 * Created on April 20, 2006, 8:36 PM
 */

package sanchay.corpus.parallel.gui;

import java.io.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
import sanchay.GlobalProperties;
import sanchay.corpus.ssf.impl.SSFCorpusAnalyzer;
import sanchay.gui.*;
import sanchay.gui.clients.*;
import sanchay.corpus.parallel.impl.ParallelMarkupAnalyzer;
import sanchay.properties.KeyValueProperties;
import sanchay.properties.PropertiesManager;
import sanchay.properties.PropertiesTable;
import sanchay.resources.aggregate.ParallelMarkupTask;
import sanchay.table.*;
import sanchay.tree.gui.*;
import sanchay.table.gui.*;
import sanchay.common.types.ClientType;

/**
 *
 * @author  anil
 */
public class ParallelMarkupAnalyzerJPanel extends javax.swing.JPanel
        implements WorkJPanelInterface, sanchay.gui.common.JPanelDialog, sanchay.gui.clients.SanchayClient {

    protected ClientType clientType = ClientType.LANGUAGE_ENCODING_IDENTIFIER;

    protected JFrame owner;
    protected JDialog dialog;
    protected Component parentComponent;
    
    protected String taskNames[];
    protected KeyValueProperties kvTaskProps[];

    protected String title;
    protected String srcLangEnc = GlobalProperties.getIntlString("eng::utf8");
    protected String tgtLangEnc = GlobalProperties.getIntlString("hin::utf8");
    
    protected DefaultComboBoxModel positions;
    
    protected int currentPosition;
    protected int currentTaskIndex;
    
    protected int currentAnalysisType;
    
    protected SanchayTableJPanel summaryTableJPanel;
    protected JPanel sanchayTreeJPanel;
    protected ParallelSentenceMarkupJPanel parallelSentenceMarkupJPanel;
    protected SanchayTableJPanel sanchayTableJPanel;
    
    protected ParallelMarkupTask parallelMarkupTasks[];
    
    protected int diffTasks[]; // indices of different tasks
    protected ParallelMarkupAnalyzer parallelMarkupAnalyzer;
    
    /** Creates new form ParallelMarkupCompareJPanel */
    public ParallelMarkupAnalyzerJPanel() {
        initComponents();

        parentComponent = this;
        
        Action act = new AbstractAction(GlobalProperties.getIntlString("Show_Detail")) {
            public void actionPerformed(ActionEvent e) {
            }
        };
        
        act.putValue(Action.SHORT_DESCRIPTION, GlobalProperties.getIntlString("Show_detailed_comparison."));
        act.putValue(Action.MNEMONIC_KEY, new Integer(KeyEvent.VK_D));
        detailJButton.setAction(act);
        
        currentTaskIndex = 0;
        currentAnalysisType = 0;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topJPanel = new javax.swing.JPanel();
        analysisJLabel = new javax.swing.JLabel();
        analysisJComboBox = new javax.swing.JComboBox();
        languageJLabel = new javax.swing.JLabel();
        languageJComboBox = new javax.swing.JComboBox();
        mainJSplitPane = new javax.swing.JSplitPane();
        summaryJPanel = new javax.swing.JPanel();
        detailJPanel = new javax.swing.JPanel();
        comparisonTableJPanel = new javax.swing.JPanel();
        markupComparisonJPanel = new javax.swing.JPanel();
        comparisonTreeJPanel = new javax.swing.JPanel();
        compareOptionsJPanel = new javax.swing.JPanel();
        compareLayoutJPanel = new javax.swing.JPanel();
        compareLayoutJLabel = new javax.swing.JLabel();
        compareLayoutJComboBox = new javax.swing.JComboBox();
        selectTaskJPanel = new javax.swing.JPanel();
        selecTaskJLabel = new javax.swing.JLabel();
        selecTaskJComboBox = new javax.swing.JComboBox();
        treeJPanel = new javax.swing.JPanel();
        bottomJPanel = new javax.swing.JPanel();
        positionJPanel = new javax.swing.JPanel();
        senNumJPanel = new javax.swing.JPanel();
        positionJLabel = new javax.swing.JLabel();
        positionJComboBox = new javax.swing.JComboBox();
        navigateJPanel = new javax.swing.JPanel();
        firstJButton = new javax.swing.JButton();
        prevJButton = new javax.swing.JButton();
        nextJButton = new javax.swing.JButton();
        lastJButton = new javax.swing.JButton();
        commandsJPanel = new javax.swing.JPanel();
        saveJButton = new javax.swing.JButton();
        detailJButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        topJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        analysisJLabel.setLabelFor(analysisJComboBox);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        analysisJLabel.setText(bundle.getString("Analysis_type:")); // NOI18N
        topJPanel.add(analysisJLabel);

        analysisJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Compare", "List", "Query" }));
        analysisJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analysisJComboBoxActionPerformed(evt);
            }
        });
        topJPanel.add(analysisJComboBox);

        languageJLabel.setLabelFor(analysisJComboBox);
        languageJLabel.setText(bundle.getString("__Language:")); // NOI18N
        topJPanel.add(languageJLabel);

        languageJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageJComboBoxActionPerformed(evt);
            }
        });
        topJPanel.add(languageJComboBox);

        add(topJPanel, java.awt.BorderLayout.NORTH);

        mainJSplitPane.setDividerLocation(170);
        mainJSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        mainJSplitPane.setMinimumSize(new java.awt.Dimension(201, 150));
        mainJSplitPane.setOneTouchExpandable(true);

        summaryJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Analysis Summary"));
        summaryJPanel.setLayout(new java.awt.BorderLayout(0, 2));
        mainJSplitPane.setTopComponent(summaryJPanel);

        detailJPanel.setLayout(new java.awt.CardLayout());

        comparisonTableJPanel.setLayout(new java.awt.BorderLayout());
        detailJPanel.add(comparisonTableJPanel, "tableCard");

        markupComparisonJPanel.setLayout(new java.awt.BorderLayout());
        detailJPanel.add(markupComparisonJPanel, "markupCard");

        comparisonTreeJPanel.setLayout(new java.awt.BorderLayout());

        compareOptionsJPanel.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        compareLayoutJPanel.setLayout(new java.awt.BorderLayout(2, 0));

        compareLayoutJLabel.setText(bundle.getString("Layout:")); // NOI18N
        compareLayoutJPanel.add(compareLayoutJLabel, java.awt.BorderLayout.WEST);

        compareLayoutJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Horizontally stacked", "Vertically stacked", "One by one" }));
        compareLayoutJComboBox.setEnabled(false);
        compareLayoutJPanel.add(compareLayoutJComboBox, java.awt.BorderLayout.CENTER);

        compareOptionsJPanel.add(compareLayoutJPanel);

        selectTaskJPanel.setLayout(new java.awt.BorderLayout(2, 0));

        selecTaskJLabel.setText(bundle.getString("Task:")); // NOI18N
        selectTaskJPanel.add(selecTaskJLabel, java.awt.BorderLayout.WEST);

        selecTaskJComboBox.setEnabled(false);
        selectTaskJPanel.add(selecTaskJComboBox, java.awt.BorderLayout.CENTER);

        compareOptionsJPanel.add(selectTaskJPanel);

        comparisonTreeJPanel.add(compareOptionsJPanel, java.awt.BorderLayout.NORTH);

        treeJPanel.setLayout(new java.awt.BorderLayout());
        comparisonTreeJPanel.add(treeJPanel, java.awt.BorderLayout.CENTER);

        detailJPanel.add(comparisonTreeJPanel, "treeCard");

        mainJSplitPane.setBottomComponent(detailJPanel);

        add(mainJSplitPane, java.awt.BorderLayout.CENTER);

        bottomJPanel.setLayout(new java.awt.BorderLayout(0, 2));

        positionJPanel.setPreferredSize(new java.awt.Dimension(195, 25));
        positionJPanel.setLayout(new java.awt.BorderLayout());

        senNumJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        positionJLabel.setText(bundle.getString("Go_to_sentence_number:")); // NOI18N
        senNumJPanel.add(positionJLabel);

        positionJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionJComboBoxActionPerformed(evt);
            }
        });
        senNumJPanel.add(positionJComboBox);

        positionJPanel.add(senNumJPanel, java.awt.BorderLayout.CENTER);

        bottomJPanel.add(positionJPanel, java.awt.BorderLayout.NORTH);

        navigateJPanel.setLayout(new java.awt.GridLayout(1, 4, 4, 0));

        firstJButton.setText(bundle.getString("First")); // NOI18N
        firstJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstJButtonActionPerformed(evt);
            }
        });
        navigateJPanel.add(firstJButton);

        prevJButton.setText(bundle.getString("Previous")); // NOI18N
        prevJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevJButtonActionPerformed(evt);
            }
        });
        navigateJPanel.add(prevJButton);

        nextJButton.setText(bundle.getString("Next")); // NOI18N
        nextJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextJButtonActionPerformed(evt);
            }
        });
        navigateJPanel.add(nextJButton);

        lastJButton.setText(bundle.getString("Last")); // NOI18N
        lastJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastJButtonActionPerformed(evt);
            }
        });
        navigateJPanel.add(lastJButton);

        bottomJPanel.add(navigateJPanel, java.awt.BorderLayout.CENTER);

        commandsJPanel.setLayout(new java.awt.GridLayout(1, 2, 4, 0));

        saveJButton.setText(bundle.getString("Save")); // NOI18N
        saveJButton.setEnabled(false);
        saveJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(saveJButton);

        detailJButton.setText(bundle.getString("Detail")); // NOI18N
        detailJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(detailJButton);

        bottomJPanel.add(commandsJPanel, java.awt.BorderLayout.SOUTH);

        add(bottomJPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents
    
    private void languageJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageJComboBoxActionPerformed
// TODO add your handling code here:
//	displayDetail();
    }//GEN-LAST:event_languageJComboBoxActionPerformed
    
    private void positionJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionJComboBoxActionPerformed
// TODO add your handling code here:
        String pos = (String) positionJComboBox.getSelectedItem();
        try {
            int cp = Integer.parseInt(pos);
            setCurrentPosition(cp - 1);
        } catch(NumberFormatException e) {
            displayCurrentPosition();
//            JOptionPane.showMessageDialog(parentComponent, "Wrong sentence number: " + pos, "Error", JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
        }
    }//GEN-LAST:event_positionJComboBoxActionPerformed
    
    private void saveJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJButtonActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_saveJButtonActionPerformed
    
    private void detailJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailJButtonActionPerformed
// TODO add your handling code here:
        displayDetail();
    }//GEN-LAST:event_detailJButtonActionPerformed
    
    private void lastJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastJButtonActionPerformed
// TODO add your handling code here:
        setCurrentPosition(parallelMarkupAnalyzer.getTasks()[0].getSentenceCount() - 1);
    }//GEN-LAST:event_lastJButtonActionPerformed
    
    private void nextJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextJButtonActionPerformed
// TODO add your handling code here:
        String pos = (String) positionJComboBox.getSelectedItem();
        try {
            int cp = Integer.parseInt(pos);
            setCurrentPosition(cp);
        } catch(NumberFormatException e) {
            displayCurrentPosition();
//            JOptionPane.showMessageDialog(parentComponent, "Wrong sentence number: " + pos, "Error", JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
        }
    }//GEN-LAST:event_nextJButtonActionPerformed
    
    private void prevJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevJButtonActionPerformed
// TODO add your handling code here:
        String pos = (String) positionJComboBox.getSelectedItem();
        try {
            int cp = Integer.parseInt(pos);
            setCurrentPosition(cp - 2);
        } catch(NumberFormatException e) {
            displayCurrentPosition();
//            JOptionPane.showMessageDialog(parentComponent, "Wrong sentence number: " + pos, "Error", JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
        }
    }//GEN-LAST:event_prevJButtonActionPerformed
    
    private void firstJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstJButtonActionPerformed
// TODO add your handling code here:
        setCurrentPosition(0);
    }//GEN-LAST:event_firstJButtonActionPerformed
    
    private void analysisJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analysisJComboBoxActionPerformed
// TODO add your handling code here:
        analyze();
    }//GEN-LAST:event_analysisJComboBoxActionPerformed
    
    public ClientType getClientType()
    {
        return clientType;
    }

    private int getTreeMode(int compare_type) {
        if(compare_type == SSFCorpusAnalyzer.MM_TREES)
            return SanchayTreeJPanel.MM_TREE_MODE;
        
        return SanchayTreeJPanel.SSF_MODE;
    }
    
    private void setCurrentPosition(int cp) {
        int slSize = parallelMarkupAnalyzer.getTasks()[0].getSentenceCount();
        if(cp >= 0 && cp < slSize) {
            if(cp != currentPosition) {
//                storeCurrentPosition();
                currentPosition = cp;
            }
            
            displayCurrentPosition();
        }
    }
    
    private void displayCurrentPosition() {
        String currentPositionString = Integer.toString(currentPosition + 1);
        positionJComboBox.setSelectedItem(currentPositionString);
        
        parallelSentenceMarkupJPanel.setCurrentPosition(currentPosition);
        
        analyze();
//	compare();
    }
    
    private void displayDetail() {
        int atype = analysisJComboBox.getSelectedIndex();
        
        if(atype == 0)
            displayComparisonDetail();
        else if(atype == 1)
            displayListDetail();
        else if(atype == 2)
            displayQueryDetail();
    }
    
    private void displayComparisonDetail() {
        int cat = summaryTableJPanel.getJTable().getSelectedRow();
        
        if(cat >= 0)
            currentAnalysisType = cat;
        
        SanchayTableModel comparisonTable = null;
        
        int selLanguageIndex = languageJComboBox.getSelectedIndex();
        String selLanguage = (String) languageJComboBox.getSelectedItem();
        
        switch(currentAnalysisType) {
            case ParallelMarkupAnalyzer.OVERALL_ANNOTATION:
                compareLayoutJComboBox.setEnabled(true);
                selecTaskJComboBox.setEnabled(false);
                
                diffTasks = parallelMarkupAnalyzer.compareOverall();
                displayDetailTrees();
                break;
            case ParallelMarkupAnalyzer.MARKUP_EXTENT:
                compareLayoutJComboBox.setEnabled(false);
                selecTaskJComboBox.setEnabled(false);
                
                comparisonTable = parallelMarkupAnalyzer.compareMarkupExtent(selLanguageIndex);
                sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(comparisonTable, selLanguage);
                
                if(comparisonTableJPanel.getComponentCount() == 1)
                    comparisonTableJPanel.remove(0);
                
                comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
                ((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
            case ParallelMarkupAnalyzer.MARKUP:
                compareLayoutJComboBox.setEnabled(false);
                selecTaskJComboBox.setEnabled(false);
                
                comparisonTable = parallelMarkupAnalyzer.compareMarkup(selLanguageIndex);
                sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(comparisonTable, selLanguage);
                
                if(comparisonTableJPanel.getComponentCount() == 1)
                    comparisonTableJPanel.remove(0);
                
                comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
                ((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
            case ParallelMarkupAnalyzer.MARKER_MAPPING:
                compareLayoutJComboBox.setEnabled(false);
                selecTaskJComboBox.setEnabled(false);
                
                comparisonTable = parallelMarkupAnalyzer.compareMarkerMapping();
                sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(comparisonTable, selLanguage);
                
                if(comparisonTableJPanel.getComponentCount() == 1)
                    comparisonTableJPanel.remove(0);
                
                comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
                ((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
            case ParallelMarkupAnalyzer.MARKER_LIST:
                compareLayoutJComboBox.setEnabled(false);
                selecTaskJComboBox.setEnabled(false);
                
                comparisonTable = parallelMarkupAnalyzer.compareMarkerList(selLanguageIndex);
                sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(comparisonTable, selLanguage);
                
                if(comparisonTableJPanel.getComponentCount() == 1)
                    comparisonTableJPanel.remove(0);
                
                comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
                ((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
            case ParallelMarkupAnalyzer.COMMENTS:
                compareLayoutJComboBox.setEnabled(false);
                selecTaskJComboBox.setEnabled(false);
                
                comparisonTable = parallelMarkupAnalyzer.compareComments();
                int cls[] = new int[comparisonTable.getColumnCount() - 1];
                sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(comparisonTable, selLanguage);
                
                TableCellEditor ce = new JTextAreaCellEditor();
                JTable jt = sanchayTableJPanel.getJTable();
//		jt.setDefaultEditor()
                
                jt.setRowHeight(50);
                
                for(int i = 1; i < comparisonTable.getColumnCount(); i++)
                    cls[i - 1] = i;
                
                comparisonTable.setEditableColumns(cls);
                
                for(int i = 1; i < comparisonTable.getColumnCount(); i++)
                    jt.getColumn(jt.getColumnName(i)).setCellEditor(ce);
                
                if(comparisonTableJPanel.getComponentCount() == 1)
                    comparisonTableJPanel.remove(0);
                
                comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
                ((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
        }
        
        detailJPanel.setVisible(false);
        detailJPanel.setVisible(true);
    }
    
    private void displayListDetail() {
        int cat = summaryTableJPanel.getJTable().getSelectedRow();
        
        if(cat >= 0)
            currentAnalysisType = cat;
        
        SanchayTableModel listTable = null;
        
        int selLanguageIndex = languageJComboBox.getSelectedIndex();
        String selLanguage = (String) languageJComboBox.getSelectedItem();
        
        switch(currentAnalysisType) {
            case ParallelMarkupAnalyzer.OVERALL_LISTING:
                compareLayoutJComboBox.setEnabled(true);
                selecTaskJComboBox.setEnabled(false);
                
                parallelMarkupAnalyzer.listOverall();
                displayDetailTrees();
                break;
            case ParallelMarkupAnalyzer.USED_MARKER_LIST:
                compareLayoutJComboBox.setEnabled(false);
                selecTaskJComboBox.setEnabled(false);
                
                listTable = parallelMarkupAnalyzer.listUsedMarkers();
                sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(listTable, selLanguage);
                sanchayTableJPanel.setSortable(true);
                
                if(comparisonTableJPanel.getComponentCount() == 1)
                    comparisonTableJPanel.remove(0);
                
                comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
                ((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
            case ParallelMarkupAnalyzer.UNUSED_MARKER_LIST:
                compareLayoutJComboBox.setEnabled(false);
                selecTaskJComboBox.setEnabled(false);
                
                listTable = parallelMarkupAnalyzer.listUnusedMarkers();
                sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(listTable, selLanguage);
                sanchayTableJPanel.setSortable(true);
                
                if(comparisonTableJPanel.getComponentCount() == 1)
                    comparisonTableJPanel.remove(0);
                
                comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
                ((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
            case ParallelMarkupAnalyzer.WORD_LIST:
//		compareLayoutJComboBox.setEnabled(false);
//		selecTaskJComboBox.setEnabled(false);
//
//		listTable = parallelMarkupAnalyzer.listWords();
//		sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(listTable, selLanguage);
//		sanchayTableJPanel.setSortable(true);
//
//		if(comparisonTableJPanel.getComponentCount() == 1)
//		    comparisonTableJPanel.remove(0);
//
//		comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
//		((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
            case ParallelMarkupAnalyzer.MARKUP_LIST:
                compareLayoutJComboBox.setEnabled(false);
                selecTaskJComboBox.setEnabled(false);
                
                listTable = parallelMarkupAnalyzer.listMarkups();
                sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(listTable, selLanguage);
                sanchayTableJPanel.setSortable(true);
                
                if(comparisonTableJPanel.getComponentCount() == 1)
                    comparisonTableJPanel.remove(0);
                
                comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
                ((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
            case ParallelMarkupAnalyzer.MARKUP_MAPPING_LIST:
                compareLayoutJComboBox.setEnabled(false);
                selecTaskJComboBox.setEnabled(false);
                
                listTable = parallelMarkupAnalyzer.listMarkupMappings();
                sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(listTable, selLanguage);
                sanchayTableJPanel.setSortable(true);
                
                if(comparisonTableJPanel.getComponentCount() == 1)
                    comparisonTableJPanel.remove(0);
                
                comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
                ((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
            case ParallelMarkupAnalyzer.MARKER_MAPPING_LIST:
                compareLayoutJComboBox.setEnabled(false);
                selecTaskJComboBox.setEnabled(false);
                
                listTable = parallelMarkupAnalyzer.listMarkerMappings();
                sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(listTable, selLanguage);
                sanchayTableJPanel.setSortable(true);
                
                if(comparisonTableJPanel.getComponentCount() == 1)
                    comparisonTableJPanel.remove(0);
                
                comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
                ((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
            case ParallelMarkupAnalyzer.SENTENCE_LIST:
                compareLayoutJComboBox.setEnabled(false);
                selecTaskJComboBox.setEnabled(false);
                
                listTable = parallelMarkupAnalyzer.listSentences();
                int cls[] = new int[listTable.getColumnCount() - 1];
                sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(listTable, selLanguage);
                sanchayTableJPanel.setSortable(true);
                
                TableCellEditor ce = new JTextAreaCellEditor();
                JTable jt = sanchayTableJPanel.getJTable();
//		jt.setDefaultEditor()
                
                jt.setRowHeight(50);
                
                for(int i = 1; i < listTable.getColumnCount(); i++)
                    cls[i - 1] = i;
                
                listTable.setEditableColumns(cls);
                
                for(int i = 1; i < listTable.getColumnCount(); i++)
                    jt.getColumn(jt.getColumnName(i)).setCellEditor(ce);
                
                if(comparisonTableJPanel.getComponentCount() == 1)
                    comparisonTableJPanel.remove(0);
                
                comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
                ((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
        }
        
        detailJPanel.setVisible(false);
        detailJPanel.setVisible(true);
    }
    
    private void displayQueryDetail() {
        int cat = summaryTableJPanel.getJTable().getSelectedRow() + 1;
        
        if(cat >= 0)
            currentAnalysisType = cat;
        
        SanchayTableModel queryTable = null;
        
        int selLanguageIndex = languageJComboBox.getSelectedIndex();
        String selLanguage = (String) languageJComboBox.getSelectedItem();
        
        switch(currentAnalysisType) {
            case ParallelMarkupAnalyzer.MARKERS_QUERY:
                compareLayoutJComboBox.setEnabled(false);
                selecTaskJComboBox.setEnabled(false);
                
                String words = JOptionPane.showInputDialog(parentComponent, GlobalProperties.getIntlString("Please_enter_the_marked_words"), "_ANY_");
                String lang = JOptionPane.showInputDialog(parentComponent, GlobalProperties.getIntlString("Please_enter_the_language_index_(0_for_SL,_1_for_TL)"), GlobalProperties.getIntlString("0"));
                String minFreq = JOptionPane.showInputDialog(parentComponent, GlobalProperties.getIntlString("Please_enter_the_minimum_frequency"), "10");
                String maxFreq = JOptionPane.showInputDialog(parentComponent, GlobalProperties.getIntlString("Please_enter_the_maximum_frequency"), "100");
                
                queryTable = parallelMarkupAnalyzer.queryMarkers(words, Integer.parseInt(lang), Integer.parseInt(minFreq), Integer.parseInt(maxFreq));
                sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(queryTable, selLanguage);
                sanchayTableJPanel.setSortable(true);
                
                if(comparisonTableJPanel.getComponentCount() == 1)
                    comparisonTableJPanel.remove(0);
                
                comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
                ((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
            case ParallelMarkupAnalyzer.MARKED_EXTENTS_QUERY:
//		compareLayoutJComboBox.setEnabled(false);
//		selecTaskJComboBox.setEnabled(false);
//
//		queryTable = parallelMarkupAnalyzer.listUnusedMarkers();
//		sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(queryTable, selLanguage);
//		sanchayTableJPanel.setSortable(true);
//
//		if(comparisonTableJPanel.getComponentCount() == 1)
//		    comparisonTableJPanel.remove(0);
//
//		comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
//		((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
            case ParallelMarkupAnalyzer.MARKER_CONTEXTS_QUERY:
//		compareLayoutJComboBox.setEnabled(false);
//		selecTaskJComboBox.setEnabled(false);
//
//		queryTable = parallelMarkupAnalyzer.listWords();
//		sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(queryTable, selLanguage);
//		sanchayTableJPanel.setSortable(true);
//
//		if(comparisonTableJPanel.getComponentCount() == 1)
//		    comparisonTableJPanel.remove(0);
//
//		comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
//		((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
            case ParallelMarkupAnalyzer.MAPPING_CONTEXTS_QUERY:
                compareLayoutJComboBox.setEnabled(false);
                selecTaskJComboBox.setEnabled(false);
                
                
                String srcMarker = JOptionPane.showInputDialog(parentComponent, GlobalProperties.getIntlString("Please_enter_the_SL_marker"), "_ANY_");
                String tgtMarker = JOptionPane.showInputDialog(parentComponent, GlobalProperties.getIntlString("Please_enter_the_TL_marker"), "_ANY_");
                minFreq = JOptionPane.showInputDialog(parentComponent, GlobalProperties.getIntlString("Please_enter_the_minimum_frequency"), "10");
                maxFreq = JOptionPane.showInputDialog(parentComponent, GlobalProperties.getIntlString("Please_enter_the_maximum_frequency"), "100");
                
                Vector markers = new Vector(2);
                markers.add(srcMarker);
                markers.add(tgtMarker);
                
                queryTable = parallelMarkupAnalyzer.queryMappingContexts(markers, -1, Integer.parseInt(minFreq), Integer.parseInt(maxFreq));
                sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(queryTable, selLanguage);
                sanchayTableJPanel.setSortable(true);
                
                if(comparisonTableJPanel.getComponentCount() == 1)
                    comparisonTableJPanel.remove(0);
                
                comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
                ((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
            case ParallelMarkupAnalyzer.MARKER_TRANSLATIONS_QUERY:
                compareLayoutJComboBox.setEnabled(false);
                selecTaskJComboBox.setEnabled(false);
                
                String marker = JOptionPane.showInputDialog(parentComponent, GlobalProperties.getIntlString("Please_enter_the_marker"), "_ANY_");
                String slang = JOptionPane.showInputDialog(parentComponent, GlobalProperties.getIntlString("Please_enter_the_source_language_index_(0_for_SL,_1_for_TL)"), "0");
                String tlang = JOptionPane.showInputDialog(parentComponent, GlobalProperties.getIntlString("Please_enter_the_target_language_index_(0_for_SL,_1_for_TL)"), "1");
                minFreq = JOptionPane.showInputDialog(parentComponent, GlobalProperties.getIntlString("Please_enter_the_minimum_frequency"), "10");
                maxFreq = JOptionPane.showInputDialog(parentComponent, GlobalProperties.getIntlString("Please_enter_the_maximum_frequency"), "100");
                
                queryTable = parallelMarkupAnalyzer.queryMarkerTranslations(marker, Integer.parseInt(slang), Integer.parseInt(tlang), Integer.parseInt(minFreq), Integer.parseInt(maxFreq));
                sanchayTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(queryTable, selLanguage);
                sanchayTableJPanel.setSortable(true);
                
                if(comparisonTableJPanel.getComponentCount() == 1)
                    comparisonTableJPanel.remove(0);
                
                comparisonTableJPanel.add(sanchayTableJPanel, BorderLayout.CENTER);
                ((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "tableCard");
                break;
        }
        
        detailJPanel.setVisible(false);
        detailJPanel.setVisible(true);
    }
    
    private JPanel fillDetailTreeJPanel(int taskInd) {
//	SSFPhrase tree = null;
//
//	if(currentCompareType == SSFPhraseComparison.OVERALL_ANNOTATION)
//	    tree = ssfPhraseComparison.getNodes(taskInd);
//	else if(currentCompareType == SSFPhraseComparison.MM_TREES)
//	    tree = ssfPhraseComparison.getMMTree(taskInd);
//
//	if(tree == null)
//	{
//	    JPanel jp = new JPanel(new BorderLayout());
//	    jp.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
//	    JScrollPane jsp = new JScrollPane();
//	    JTextArea jta = new JTextArea();
//	    jta.setLineWrap(true);
//	    jta.setText("Unable to construct tree. Incomplete or incorrect annotation.");
//	    jsp.setViewportView(jta);
//	    jp.add(jsp, BorderLayout.CENTER);
//
//	    // There is no tree. Error.
//	    return jp;
//	}
//
//	// Fill
//
//	if(getTreeMode(currentCompareType) == SanchayTreeJPanel.MM_TREE_MODE)
//	{
//	    sanchayTreeJPanel = new SanchayTreeViewerJPanel(tree, SanchayMutableTreeNode.MODIFIER_MODIFIED_MODE, language);
//	}
//	else
//	    sanchayTreeJPanel = SanchayTreeJPanel.createSSFDisplayJPanel(tree, language);
//
//	// Null means successful!
        return null;
    }
    
    private void displayDetailTrees() {
//	if(treeJPanel.getComponentCount() > 0)
//	    treeJPanel.removeAll();
//
//	if(compareLayoutJComboBox.getSelectedItem().equals("One by one") == true
//		|| taskNames.length == 1)
//	{
//	    selecTaskJComboBox.setEnabled(true);
//	    currentTaskIndex = selecTaskJComboBox.getSelectedIndex();
//
//	    JPanel jp = fillDetailTreeJPanel(currentTaskIndex);
//
//	    if(jp == null)
//		treeJPanel.add(sanchayTreeJPanel, BorderLayout.CENTER);
//	    else
//		treeJPanel.add(jp, BorderLayout.CENTER);
//	}
//	else if(compareLayoutJComboBox.getSelectedItem().equals("Vertically stacked") == true)
//	{
//	    JSplitPane prevjsp = null;
//	    JSplitPane jsp = new JSplitPane();
//	    JSplitPane treeJSplitPane = jsp;
//	    jsp.setOrientation(JSplitPane.VERTICAL_SPLIT);
//
//	    int divlocation = (treeJPanel.getSize().height - treeJPanel.getInsets().bottom
//		    - treeJSplitPane.getInsets().bottom ) / taskNames.length - treeJSplitPane.getDividerSize();
//
//	    jsp.setDividerLocation(divlocation);
//
//	    for (int i = 0; i < taskNames.length; i++)
//	    {
//		JPanel jp = fillDetailTreeJPanel(i);
//
//		if(i == 0)
//		{
//		    if(jp == null)
//			jsp.setTopComponent(sanchayTreeJPanel);
//		    else
//			jsp.setTopComponent(jp);
//		}
//		else if(i == taskNames.length - 1)
//		{
//		    if(jp == null)
//			jsp.setBottomComponent(sanchayTreeJPanel);
//		    else
//			jsp.setBottomComponent(jp);
//		}
//		else
//		{
//		    jsp = new JSplitPane();
//		    jsp.setOrientation(JSplitPane.VERTICAL_SPLIT);
//		    jsp.setDividerLocation(divlocation);
//
//		    if(jp == null)
//			jsp.setTopComponent(sanchayTreeJPanel);
//		    else
//			jsp.setTopComponent(jp);
//
//		    prevjsp.setBottomComponent(jsp);
//		}
//
//		prevjsp = jsp;
//	    }
//
//	    treeJPanel.add(treeJSplitPane, BorderLayout.CENTER);
//	    selecTaskJComboBox.setEnabled(false);
//	}
//	else if(compareLayoutJComboBox.getSelectedItem().equals("Horizontally stacked") == true)
//	{
//	    JSplitPane prevjsp = null;
//	    JSplitPane jsp = new JSplitPane();
//	    JSplitPane treeJSplitPane = jsp;
//	    jsp.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
//
//	    int divlocation = (treeJPanel.getSize().width - treeJPanel.getInsets().right
//		    - treeJSplitPane.getInsets().right ) / taskNames.length - treeJSplitPane.getDividerSize();
//
//	    jsp.setDividerLocation(divlocation);
//
//	    for (int i = 0; i < taskNames.length; i++)
//	    {
//		JPanel jp = fillDetailTreeJPanel(i);
//
//		if(i == 0)
//		{
//		    if(jp == null)
//			jsp.setLeftComponent(sanchayTreeJPanel);
//		    else
//			jsp.setLeftComponent(jp);
//		}
//		else if(i == taskNames.length - 1)
//		{
//		    if(jp == null)
//			jsp.setRightComponent(sanchayTreeJPanel);
//		    else
//			jsp.setRightComponent(jp);
//		}
//		else
//		{
//		    jsp = new JSplitPane();
//		    jsp.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
//		    jsp.setDividerLocation(divlocation);
//
//		    if(jp == null)
//			jsp.setLeftComponent(sanchayTreeJPanel);
//		    else
//			jsp.setLeftComponent(jp);
//
//		    prevjsp.setRightComponent(jsp);
//		}
//
//		prevjsp = jsp;
//	    }
//
//	    treeJPanel.add(treeJSplitPane, BorderLayout.CENTER);
//	    selecTaskJComboBox.setEnabled(false);
//	}
//
//	((CardLayout) detailJPanel.getLayout()).show(detailJPanel, "treeCard");
    }
    
    // Compare annotations for the current sentence
    public void analyze() {
        int atype = analysisJComboBox.getSelectedIndex();
        
        SanchayTableModel summaryTable = null;
        
        if(atype == 0)
            summaryTable = parallelMarkupAnalyzer.comparisonSummary();
        else if(atype == 1)
            summaryTable = parallelMarkupAnalyzer.listSummary();
        else if(atype == 2)
            summaryTable = parallelMarkupAnalyzer.querySummary();
        
        summaryTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(summaryTable, parallelMarkupTasks[0].getLangEnc());
        
        if(summaryJPanel.getComponentCount() > 0)
            summaryJPanel.remove(0);
        
        summaryJPanel.add(summaryTableJPanel, BorderLayout.CENTER);
        
        if(currentAnalysisType < summaryTableJPanel.getJTable().getRowCount())
            summaryTableJPanel.getJTable().addRowSelectionInterval(currentAnalysisType, currentAnalysisType);
        
        displayDetail();
    }

    public String getLangEnc()
    {
        return srcLangEnc;
    }

    public String getTgtLangEnc()
    {
        return tgtLangEnc;
    }
    
    public Frame getOwner() {
        return owner;
    }
    
    public void setOwner(Frame f) {
        owner = (JFrame) f;
    }

    public void setParentComponent(Component parentComponent)
    {
        this.parentComponent = parentComponent;
    }
    
    public void setDialog(JDialog d) {
        dialog = d;
    }

    public String getTitle() {
        return title;
    }
    
    public JMenuBar getJMenuBar() {
        return null;
    }
    
    public JPopupMenu getJPopupMenu() {
        return null;
    }
    
    public JToolBar getJToolBar() {
        return null;
    }
    
    public void setTaskName(String tn) {
//        taskName = tn;
    }
    
    public void setTaskNames(String tn[]) {
        if(tn == null) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Tasks_not_selected."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        taskNames = tn;
        kvTaskProps = new KeyValueProperties[tn.length];
        
        DefaultComboBoxModel cm = new DefaultComboBoxModel(taskNames);
        selecTaskJComboBox.setModel(cm);
    }
    
    public void configure() {
        if(taskNames == null) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Tasks_not_selected."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            setVisible(false);
            return;
        }
        
        Cursor cursor = owner.getCursor();
        owner.setCursor(Cursor.WAIT_CURSOR);
        
        AnnotationClient owner = (AnnotationClient) getOwner();
        PropertiesManager pm = owner.getPropertiesManager();
        
        PropertiesTable tasks = owner.getTaskList();
        
        parallelMarkupTasks = new ParallelMarkupTask[taskNames.length];
        
        for(int t = 0; t < taskNames.length; t++) {
            parallelMarkupTasks[t] = new ParallelMarkupTask();
            parallelMarkupTasks[t].setName(taskNames[t]);
            
            Vector rows = tasks.getRows("TaskName", taskNames[t]);
            
            if(rows.size() != 1) {
                JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Not_a_valid_task_name:_") + taskNames[t], GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                dialog.setVisible(false);
            }
            
            String cols[] = {"TaskKVPropFile", "TaskKVPropCharset"};
            Vector vals = tasks.getValues("TaskName", taskNames[t], cols);
            
            vals = (Vector) vals.get(0);
            String taskKVPropFile = (String) vals.get(0);
            String taskKVPropCharset = (String) vals.get(1);
            
            try {
                kvTaskProps[t] = new KeyValueProperties(taskKVPropFile, taskKVPropCharset);
                
                parallelMarkupTasks[t].read(taskKVPropFile, taskKVPropCharset);
                
                if(t == 0) {
                    String langs[] = parallelMarkupTasks[t].getLanguages();
                    
                    for (int i = 0; i < langs.length; i++) {
                        languageJComboBox.addItem(langs[i]);
                    }
                }
            } catch(Exception e) {
                JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Error_in_task_properties_for_the_task:_") + taskNames[t], GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
        
        parallelMarkupAnalyzer = new ParallelMarkupAnalyzer(parallelMarkupTasks, 2);
        
        parallelSentenceMarkupJPanel = new ParallelSentenceMarkupJPanel(parallelMarkupTasks[0], 0);
        markupComparisonJPanel.add(parallelSentenceMarkupJPanel, BorderLayout.CENTER);
        
        // Filling sentence positions
        int senCount = parallelMarkupTasks[0].getSentenceCount();
        Vector pvec = new Vector(senCount);
        
        for(int i = 1; i <= senCount; i++) {
            pvec.add(Integer.toString(i));
        }
        
        positions = new DefaultComboBoxModel(pvec);
        positionJComboBox.setModel(positions);
        
        setCurrentPosition(0);
        
        ((JFrame) owner).setCursor(cursor);
    }
    
    public void convertToXML(String f, String charset) throws FileNotFoundException, UnsupportedEncodingException {
        PrintStream ps = new PrintStream(f, charset);
        printXML(ps);
    }
    
    public void printXML(PrintStream ps) {
    }
    
    public String getXML(int pos) {
        return null;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JComboBox analysisJComboBox;
    protected javax.swing.JLabel analysisJLabel;
    protected javax.swing.JPanel bottomJPanel;
    protected javax.swing.JPanel commandsJPanel;
    protected javax.swing.JComboBox compareLayoutJComboBox;
    protected javax.swing.JLabel compareLayoutJLabel;
    protected javax.swing.JPanel compareLayoutJPanel;
    protected javax.swing.JPanel compareOptionsJPanel;
    protected javax.swing.JPanel comparisonTableJPanel;
    protected javax.swing.JPanel comparisonTreeJPanel;
    protected javax.swing.JButton detailJButton;
    protected javax.swing.JPanel detailJPanel;
    protected javax.swing.JButton firstJButton;
    protected javax.swing.JComboBox languageJComboBox;
    protected javax.swing.JLabel languageJLabel;
    protected javax.swing.JButton lastJButton;
    protected javax.swing.JSplitPane mainJSplitPane;
    protected javax.swing.JPanel markupComparisonJPanel;
    protected javax.swing.JPanel navigateJPanel;
    protected javax.swing.JButton nextJButton;
    protected javax.swing.JComboBox positionJComboBox;
    protected javax.swing.JLabel positionJLabel;
    protected javax.swing.JPanel positionJPanel;
    protected javax.swing.JButton prevJButton;
    protected javax.swing.JButton saveJButton;
    protected javax.swing.JComboBox selecTaskJComboBox;
    protected javax.swing.JLabel selecTaskJLabel;
    protected javax.swing.JPanel selectTaskJPanel;
    protected javax.swing.JPanel senNumJPanel;
    protected javax.swing.JPanel summaryJPanel;
    protected javax.swing.JPanel topJPanel;
    protected javax.swing.JPanel treeJPanel;
    // End of variables declaration//GEN-END:variables
    
}
