/*
 * TamMarkerWorkJPanel.java
 *
 * Created on September 28, 2005, 5:40 PM
 */

package sanchay.corpus.parallel.gui;

import java.io.*;
import java.util.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.table.*;

import sanchay.GlobalProperties;
import sanchay.gui.*;
import sanchay.gui.clients.AnnotationClient;
import sanchay.gui.common.JPanelDialog;
import sanchay.gui.common.SanchayJDialog;
import sanchay.properties.KeyValueProperties;
import sanchay.properties.PropertiesManager;
import sanchay.properties.PropertiesTable;
import sanchay.resources.aggregate.ParallelMarkupTask;
import sanchay.util.*;
import sanchay.table.*;
import sanchay.table.gui.*;
import sanchay.common.types.ClientType;

/**
 *
 * @author  anil
 */
public class ParallelMarkupWorkJPanel extends javax.swing.JPanel
        implements WorkJPanelInterface ,sanchay.gui.common.JPanelDialog, AnnotationClient {

    protected ClientType clientType = ClientType.PARALLEL_MARKUP;
    
    protected ParallelMarkupTask parallelMarkupTask;
    
    protected JFrame owner;
    protected JDialog dialog;
    protected Component parentComponent;

    protected String workspace;

    protected String title = "";
    protected String srcLangEnc = GlobalProperties.getIntlString("eng::utf8");
    protected String tgtLangEnc = GlobalProperties.getIntlString("hin::utf8");

    protected SelectTaskJPanel selectTaskJPanel;

    protected PropertiesManager propman;
    protected PropertiesTable taskList;
    
    protected DefaultComboBoxModel positions;
    
    protected String srcSentence;
    protected String tgtSentence;
    protected String tgtUTF8Sentence;
    protected String comment;
    
    // For mapping table
    private JComboBox srcJComboBoxEditor;
    private JComboBox tgtJComboBoxEditor;
    
    private DefaultComboBoxModel comments;
    
    // For display, mapping of marker String will be used
    // For storage, mapping of marker indices will be used
    private SanchayTableModel markerMapping; // Strings
    
    private Color startColor;
    private int colorIncrement;
    
    private boolean utf8Shown;
    private boolean newComboBoxElementAdded;
    
    private KeyValueProperties markerDict;
    private KeyValueProperties reverseMarkerDict;
    
    /** Creates new form TamMarkerWorkJPanel */
    public ParallelMarkupWorkJPanel() {
        initComponents();

        parentComponent = this;
        
        parallelMarkupTask = new ParallelMarkupTask();
        
//	srcTMJComboBox.setKeySelectionManager(new JComboBoxKeySelectionManager());
//	tgtTMJComboBox.setKeySelectionManager(new JComboBoxKeySelectionManager());
        
        srcTMJEditCheckBox.setVisible(false);
        tgtTMJEditCheckBox.setVisible(false);
        
        parallelMarkupTask.setLangEnc(GlobalProperties.getIntlString("hin::utf8"));
        
        srcJComboBoxEditor = new JComboBox();
        tgtJComboBoxEditor = new JComboBox();
        startColor = new Color(200, 150, 220);
        colorIncrement = 30;
        
        utf8Shown = true;
        newComboBoxElementAdded = false;
        
        // For now
        srcClearMarkerJButton.setVisible(false);
        tgtClearMarkerJButton.setVisible(false);
        
        int cmds[] = new int[3];
        cmds[0] = SanchayTableAction.DEL_ROW;
        cmds[1] = SanchayTableAction.ADD_ROW;
        cmds[2] = SanchayTableAction.INSERT_ROW;
        
        markerMappingJPanel.remove(sanchayTableJPanel);
        sanchayTableJPanel = new SanchayTableJPanel(false, cmds, SanchayTableJPanel.MINIMAL_MODE, parallelMarkupTask.getLangEnc());
        sanchayTableJPanel.setLayout(new javax.swing.BoxLayout(sanchayTableJPanel, javax.swing.BoxLayout.X_AXIS));
        sanchayTableJPanel.setVisible(true);
        ((SanchayTableJPanel) sanchayTableJPanel).showCommandButtons(true);
        markerMappingJPanel.add(sanchayTableJPanel, java.awt.BorderLayout.NORTH);
        ((SanchayTableJPanel) sanchayTableJPanel).getJTable().setFont(new java.awt.Font(GlobalProperties.getIntlString("Dialog"), 1, 16));
        
//	((SanchayTableJPanel) sanchayTableJPanel).showCommandButtons(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        senJPanel = new javax.swing.JPanel();
        srcSenJPanel = new javax.swing.JPanel();
        ss1JPanel = new javax.swing.JPanel();
        srcSenJScrollPane = new javax.swing.JScrollPane();
        srcSenJTextArea = new javax.swing.JTextArea();
        srcSenStatusJLabel = new javax.swing.JLabel();
        ss2JPanel = new javax.swing.JPanel();
        srcTMJLabel = new javax.swing.JLabel();
        srcTMJComboBox = new javax.swing.JComboBox();
        srcClearMarkerJButton = new javax.swing.JButton();
        srcTMJEditCheckBox = new javax.swing.JCheckBox();
        tgtSenJPanel = new javax.swing.JPanel();
        ts1JPanel = new javax.swing.JPanel();
        tgtSenJScrollPane = new javax.swing.JScrollPane();
        tgtSenJTextArea = new javax.swing.JTextArea();
        tgtSenStatusJLabel = new javax.swing.JLabel();
        ts1UTF8JPanel = new javax.swing.JPanel();
        tgtSenUTF8JScrollPane = new javax.swing.JScrollPane();
        tgtSenUTF8JTextArea = new javax.swing.JTextArea();
        ts2JPanel = new javax.swing.JPanel();
        tgtTMJLabel = new javax.swing.JLabel();
        tgtTMJComboBox = new javax.swing.JComboBox();
        tgtClearMarkerJButton = new javax.swing.JButton();
        tgtShowUTF8JButton = new javax.swing.JButton();
        tgtTMJEditCheckBox = new javax.swing.JCheckBox();
        markerMappingJPanel = new javax.swing.JPanel();
        sanchayTableJPanel = new javax.swing.JPanel();
        markerMappingJScrollPane = new javax.swing.JScrollPane();
        markerMappingJTable = new javax.swing.JTable();
        commentJPanel = new javax.swing.JPanel();
        commentJLabel = new javax.swing.JLabel();
        commentJComboBox = new javax.swing.JComboBox();
        commentJScrollPane = new javax.swing.JScrollPane();
        commentJTextArea = new javax.swing.JTextArea();
        bottomJPanel = new javax.swing.JPanel();
        positionJPanel = new javax.swing.JPanel();
        positionLeftJPanel = new javax.swing.JPanel();
        positionJLabel = new javax.swing.JLabel();
        positionJComboBox = new javax.swing.JComboBox();
        positionRightJPanel = new javax.swing.JPanel();
        openJButton = new javax.swing.JButton();
        navigateJPanel = new javax.swing.JPanel();
        firstJButton = new javax.swing.JButton();
        prevJButton = new javax.swing.JButton();
        nextJButton = new javax.swing.JButton();
        lastJButton = new javax.swing.JButton();
        commandsJPanel = new javax.swing.JPanel();
        clearJButton = new javax.swing.JButton();
        clearAllButton = new javax.swing.JButton();
        resetAllJButton = new javax.swing.JButton();
        saveJButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(550, 900));
        setLayout(new java.awt.BorderLayout());

        senJPanel.setLayout(new javax.swing.BoxLayout(senJPanel, javax.swing.BoxLayout.Y_AXIS));

        srcSenJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Source Language Sentence"));
        srcSenJPanel.setLayout(new java.awt.BorderLayout());

        ss1JPanel.setLayout(new java.awt.BorderLayout());

        srcSenJScrollPane.setPreferredSize(new java.awt.Dimension(120, 60));

        srcSenJTextArea.setEditable(false);
        srcSenJTextArea.setFont(new java.awt.Font("Dialog", 1, 16));
        srcSenJTextArea.setLineWrap(true);
        srcSenJTextArea.setWrapStyleWord(true);
        srcSenJTextArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                srcSenJTextAreaCaretUpdate(evt);
            }
        });
        srcSenJScrollPane.setViewportView(srcSenJTextArea);

        ss1JPanel.add(srcSenJScrollPane, java.awt.BorderLayout.CENTER);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        srcSenStatusJLabel.setText(bundle.getString("_")); // NOI18N
        srcSenStatusJLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ss1JPanel.add(srcSenStatusJLabel, java.awt.BorderLayout.SOUTH);

        srcSenJPanel.add(ss1JPanel, java.awt.BorderLayout.NORTH);

        ss2JPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        srcTMJLabel.setLabelFor(srcTMJComboBox);
        srcTMJLabel.setText(bundle.getString("Marker:_")); // NOI18N
        ss2JPanel.add(srcTMJLabel);

        srcTMJComboBox.setEditable(true);
        srcTMJComboBox.setFont(new java.awt.Font("Dialog", 1, 14));
        srcTMJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srcTMJComboBoxActionPerformed(evt);
            }
        });
        ss2JPanel.add(srcTMJComboBox);

        srcClearMarkerJButton.setText(bundle.getString("Clear_Marker")); // NOI18N
        srcClearMarkerJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srcClearMarkerJButtonActionPerformed(evt);
            }
        });
        ss2JPanel.add(srcClearMarkerJButton);

        srcTMJEditCheckBox.setText(bundle.getString("Editable")); // NOI18N
        srcTMJEditCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        srcTMJEditCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        srcTMJEditCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srcTMJEditCheckBoxActionPerformed(evt);
            }
        });
        ss2JPanel.add(srcTMJEditCheckBox);

        srcSenJPanel.add(ss2JPanel, java.awt.BorderLayout.CENTER);

        senJPanel.add(srcSenJPanel);

        tgtSenJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Target Language Sentence"));
        tgtSenJPanel.setLayout(new javax.swing.BoxLayout(tgtSenJPanel, javax.swing.BoxLayout.Y_AXIS));

        ts1JPanel.setLayout(new java.awt.BorderLayout());

        tgtSenJScrollPane.setPreferredSize(new java.awt.Dimension(120, 60));

        tgtSenJTextArea.setEditable(false);
        tgtSenJTextArea.setFont(new java.awt.Font("Dialog", 1, 16));
        tgtSenJTextArea.setLineWrap(true);
        tgtSenJTextArea.setWrapStyleWord(true);
        tgtSenJTextArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                tgtSenJTextAreaCaretUpdate(evt);
            }
        });
        tgtSenJScrollPane.setViewportView(tgtSenJTextArea);

        ts1JPanel.add(tgtSenJScrollPane, java.awt.BorderLayout.CENTER);

        tgtSenStatusJLabel.setText(bundle.getString("_")); // NOI18N
        tgtSenStatusJLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ts1JPanel.add(tgtSenStatusJLabel, java.awt.BorderLayout.SOUTH);

        tgtSenJPanel.add(ts1JPanel);

        ts1UTF8JPanel.setLayout(new java.awt.BorderLayout());

        tgtSenUTF8JScrollPane.setPreferredSize(new java.awt.Dimension(120, 60));

        tgtSenUTF8JTextArea.setEditable(false);
        tgtSenUTF8JTextArea.setFont(new java.awt.Font("Dialog", 1, 16));
        tgtSenUTF8JTextArea.setLineWrap(true);
        tgtSenUTF8JTextArea.setWrapStyleWord(true);
        tgtSenUTF8JScrollPane.setViewportView(tgtSenUTF8JTextArea);

        ts1UTF8JPanel.add(tgtSenUTF8JScrollPane, java.awt.BorderLayout.CENTER);

        tgtSenJPanel.add(ts1UTF8JPanel);

        ts2JPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        tgtTMJLabel.setLabelFor(srcTMJComboBox);
        tgtTMJLabel.setText(bundle.getString("Marker:_")); // NOI18N
        ts2JPanel.add(tgtTMJLabel);

        tgtTMJComboBox.setEditable(true);
        tgtTMJComboBox.setFont(new java.awt.Font("Dialog", 1, 16));
        tgtTMJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tgtTMJComboBoxActionPerformed(evt);
            }
        });
        ts2JPanel.add(tgtTMJComboBox);

        tgtClearMarkerJButton.setText(bundle.getString("Clear_Marker")); // NOI18N
        tgtClearMarkerJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tgtClearMarkerJButtonActionPerformed(evt);
            }
        });
        ts2JPanel.add(tgtClearMarkerJButton);

        tgtShowUTF8JButton.setText(bundle.getString("Hide_UTF8")); // NOI18N
        tgtShowUTF8JButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tgtShowUTF8JButtonActionPerformed(evt);
            }
        });
        ts2JPanel.add(tgtShowUTF8JButton);

        tgtTMJEditCheckBox.setText(bundle.getString("Editable")); // NOI18N
        tgtTMJEditCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        tgtTMJEditCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        tgtTMJEditCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tgtTMJEditCheckBoxActionPerformed(evt);
            }
        });
        ts2JPanel.add(tgtTMJEditCheckBox);

        tgtSenJPanel.add(ts2JPanel);

        senJPanel.add(tgtSenJPanel);

        add(senJPanel, java.awt.BorderLayout.NORTH);

        markerMappingJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Marker Mapping"));
        markerMappingJPanel.setLayout(new java.awt.BorderLayout());

        sanchayTableJPanel.setLayout(new javax.swing.BoxLayout(sanchayTableJPanel, javax.swing.BoxLayout.LINE_AXIS));

        markerMappingJScrollPane.setFont(new java.awt.Font("Dialog", 1, 12));
        markerMappingJScrollPane.setPreferredSize(new java.awt.Dimension(120, 128));

        markerMappingJTable.setFont(new java.awt.Font("Dialog", 1, 16));
        markerMappingJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        markerMappingJTable.setMaximumSize(new java.awt.Dimension(32767, 32767));
        markerMappingJTable.setPreferredSize(new java.awt.Dimension(300, 128));
        markerMappingJScrollPane.setViewportView(markerMappingJTable);

        sanchayTableJPanel.add(markerMappingJScrollPane);

        markerMappingJPanel.add(sanchayTableJPanel, java.awt.BorderLayout.CENTER);

        commentJPanel.setLayout(new java.awt.BorderLayout());

        commentJLabel.setText(bundle.getString("Comment:_")); // NOI18N
        commentJPanel.add(commentJLabel, java.awt.BorderLayout.WEST);

        commentJComboBox.setEditable(true);
        commentJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commentJComboBoxActionPerformed(evt);
            }
        });
        commentJPanel.add(commentJComboBox, java.awt.BorderLayout.CENTER);

        commentJScrollPane.setPreferredSize(new java.awt.Dimension(120, 45));

        commentJTextArea.setFont(new java.awt.Font("Dialog", 1, 16));
        commentJTextArea.setLineWrap(true);
        commentJTextArea.setWrapStyleWord(true);
        commentJScrollPane.setViewportView(commentJTextArea);

        commentJPanel.add(commentJScrollPane, java.awt.BorderLayout.SOUTH);

        markerMappingJPanel.add(commentJPanel, java.awt.BorderLayout.SOUTH);

        add(markerMappingJPanel, java.awt.BorderLayout.CENTER);

        bottomJPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bottomJPanel.setLayout(new java.awt.BorderLayout(0, 4));

        positionJPanel.setPreferredSize(new java.awt.Dimension(195, 25));
        positionJPanel.setLayout(new java.awt.GridLayout(1, 0, 4, 0));

        positionLeftJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        positionJLabel.setLabelFor(positionJComboBox);
        positionJLabel.setText(bundle.getString("Go_to_sentence_number:")); // NOI18N
        positionLeftJPanel.add(positionJLabel);

        positionJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionJComboBoxActionPerformed(evt);
            }
        });
        positionLeftJPanel.add(positionJComboBox);

        positionJPanel.add(positionLeftJPanel);

        positionRightJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        openJButton.setText(bundle.getString("Open")); // NOI18N
        openJButton.setToolTipText(bundle.getString("Open_parallel_corpus")); // NOI18N
        openJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openJButtonActionPerformed(evt);
            }
        });
        positionRightJPanel.add(openJButton);

        positionJPanel.add(positionRightJPanel);

        bottomJPanel.add(positionJPanel, java.awt.BorderLayout.NORTH);

        navigateJPanel.setLayout(new java.awt.GridLayout(1, 4, 4, 0));

        firstJButton.setText(bundle.getString("First")); // NOI18N
        firstJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstJButtonActionPerformed(evt);
            }
        });
        navigateJPanel.add(firstJButton);

        prevJButton.setText(bundle.getString("Previous")); // NOI18N
        prevJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevJButtonActionPerformed(evt);
            }
        });
        navigateJPanel.add(prevJButton);

        nextJButton.setText(bundle.getString("Next")); // NOI18N
        nextJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextJButtonActionPerformed(evt);
            }
        });
        navigateJPanel.add(nextJButton);

        lastJButton.setText(bundle.getString("Last")); // NOI18N
        lastJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastJButtonActionPerformed(evt);
            }
        });
        navigateJPanel.add(lastJButton);

        bottomJPanel.add(navigateJPanel, java.awt.BorderLayout.CENTER);

        commandsJPanel.setLayout(new java.awt.GridLayout(1, 4, 4, 0));

        clearJButton.setText(bundle.getString("Clear")); // NOI18N
        clearJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(clearJButton);

        clearAllButton.setText(bundle.getString("Clear_All")); // NOI18N
        clearAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(clearAllButton);

        resetAllJButton.setText(bundle.getString("Reset_All")); // NOI18N
        resetAllJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(resetAllJButton);

        saveJButton.setText(bundle.getString("Save")); // NOI18N
        saveJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(saveJButton);

        bottomJPanel.add(commandsJPanel, java.awt.BorderLayout.SOUTH);

        add(bottomJPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void openJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openJButtonActionPerformed
// TODO add your handling code here:
        try {
            propman = new PropertiesManager(GlobalProperties.getHomeDirectory() + "/" + "workspace/parallel-corpus-markup/server-props.txt", GlobalProperties.getIntlString("UTF-8"));
            propman.print(System.out);           
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        selectTaskJPanel = new SelectTaskJPanel(SelectTaskJPanel.PARALLEL_MARKUP_TASK, this);
        selectTaskJPanel.setOwner(owner);
        selectTaskJPanel.setAnnotationClient(this);
        SanchayJDialog dialog = new SanchayJDialog(owner, GlobalProperties.getIntlString("Sanchay_Parellel_Markup_Task_Setup"), true, (JPanelDialog) selectTaskJPanel);
	dialog.pack();
	
	UtilityFunctions.centre(dialog);
        
        dialog.setVisible(true);                
    }//GEN-LAST:event_openJButtonActionPerformed
    
    private void tgtTMJEditCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tgtTMJEditCheckBoxActionPerformed
// TODO add your handling code here:
        if(tgtTMJEditCheckBox.isSelected())
            tgtTMJComboBox.setEditable(true);
        else
            tgtTMJComboBox.setEditable(false);
    }//GEN-LAST:event_tgtTMJEditCheckBoxActionPerformed
    
    private void srcTMJEditCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srcTMJEditCheckBoxActionPerformed
// TODO add your handling code here:
        if(srcTMJEditCheckBox.isSelected())
            srcTMJComboBox.setEditable(true);
        else
            srcTMJComboBox.setEditable(false);
    }//GEN-LAST:event_srcTMJEditCheckBoxActionPerformed
    
    private void commentJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commentJComboBoxActionPerformed
// TODO add your handling code here:
        if(newComboBoxElementAdded == true) {
            newComboBoxElementAdded = false;
            return;
        }
        
        String selItem = (String) commentJComboBox.getSelectedItem();
        if(UtilityFunctions.addItemToJCoboBox(commentJComboBox, selItem) == true)
            newComboBoxElementAdded = true;
        
        String cmt = commentJTextArea.getText();
        if(cmt.equals("") == true)
            commentJTextArea.setText(selItem);
        else
            commentJTextArea.setText(cmt + ".\n" + selItem);
    }//GEN-LAST:event_commentJComboBoxActionPerformed
    
    private void tgtShowUTF8JButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tgtShowUTF8JButtonActionPerformed
        // TODO add your handling code here:
        if(utf8Shown == true)
            utf8Shown = false;
        else
            utf8Shown = true;
        
        toggleTgtUTF8(utf8Shown);
    }//GEN-LAST:event_tgtShowUTF8JButtonActionPerformed
    
    private void tgtClearMarkerJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tgtClearMarkerJButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tgtClearMarkerJButtonActionPerformed
    
    private void srcClearMarkerJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srcClearMarkerJButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_srcClearMarkerJButtonActionPerformed
    
    private void clearAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllButtonActionPerformed
        // TODO add your handling code here:
        int ret = JOptionPane.showConfirmDialog(parentComponent, GlobalProperties.getIntlString("Are_you_sure_you_want_to_clear_everything?"), GlobalProperties.getIntlString("Clear_All"), JOptionPane.YES_NO_OPTION);
        
        if(ret == JOptionPane.NO_OPTION)
            return;
        
        clearAll();
        
        displayCurrentPosition();
    }//GEN-LAST:event_clearAllButtonActionPerformed
    
    private void tgtSenJTextAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_tgtSenJTextAreaCaretUpdate
        // TODO add your handling code here:
        if(parallelMarkupTask.getTgtSenMarkups() == null)
            return;
        
        int caretPos = tgtSenJTextArea.getCaretPosition();
        
        int currentPosition = parallelMarkupTask.getCurrentPosition();
        SanchayTableModel tgtSenMarkup = (SanchayTableModel) parallelMarkupTask.getTgtSenMarkups().get(Integer.toString(currentPosition + 1));
        
        int count = tgtSenMarkup.getRowCount();
        for(int i = 0; i < count; i++) {
            int start = Integer.parseInt((String) tgtSenMarkup.getValueAt(i, 0));
            int end = Integer.parseInt((String) tgtSenMarkup.getValueAt(i, 1));
            int marker = Integer.parseInt((String) tgtSenMarkup.getValueAt(i, 2));
            
            if(caretPos >= start && caretPos <= end) {
                tgtTMJComboBox.setSelectedIndex(marker);
            }
        }
    }//GEN-LAST:event_tgtSenJTextAreaCaretUpdate
    
    private void srcSenJTextAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_srcSenJTextAreaCaretUpdate
        // TODO add your handling code here:
        if(parallelMarkupTask.getSrcSenMarkups() == null)
            return;
        
        int caretPos = srcSenJTextArea.getCaretPosition();
        
        int currentPosition = parallelMarkupTask.getCurrentPosition();
        SanchayTableModel srcSenMarkup = (SanchayTableModel) parallelMarkupTask.getSrcSenMarkups().get(Integer.toString(currentPosition + 1));
        
        int count = srcSenMarkup.getRowCount();
        for(int i = 0; i < count; i++) {
            int start = Integer.parseInt((String) srcSenMarkup.getValueAt(i, 0));
            int end = Integer.parseInt((String) srcSenMarkup.getValueAt(i, 1));
            int marker = Integer.parseInt((String) srcSenMarkup.getValueAt(i, 2));
            
            if(caretPos >= start && caretPos <= end) {
                srcTMJComboBox.setSelectedIndex(marker);
//                ((SanchayJTablePanel) sanchayTableJPanel).getJTable().setRowSelectionInterval(i, i);
            }
        }
    }//GEN-LAST:event_srcSenJTextAreaCaretUpdate
    
    private void positionJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionJComboBoxActionPerformed
        // TODO add your handling code here:
        String pos = (String) positionJComboBox.getSelectedItem();
        try {
            int cp = Integer.parseInt(pos);
            setCurrentPosition(cp - 1);
        } catch(NumberFormatException e) {
            displayCurrentPosition();
//            JOptionPane.showMessageDialog(parentComponent, "Wrong sentence number: " + pos, "Error", JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
        }
    }//GEN-LAST:event_positionJComboBoxActionPerformed
    
    private void tgtTMJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tgtTMJComboBoxActionPerformed
        // TODO add your handling code here:
        if(newComboBoxElementAdded == true) {
            newComboBoxElementAdded = false;
            return;
        }
        
        int currentPosition = parallelMarkupTask.getCurrentPosition();
        String scurrentPosition = Integer.toString(currentPosition + 1);
        
        SanchayTableModel srcSenMarkup = (SanchayTableModel) parallelMarkupTask.getSrcSenMarkups().get(scurrentPosition);
        SanchayTableModel tgtSenMarkup = (SanchayTableModel) parallelMarkupTask.getTgtSenMarkups().get(scurrentPosition);
        
        srcSenStatusJLabel.setText(GlobalProperties.getIntlString("_"));
        tgtSenStatusJLabel.setText(GlobalProperties.getIntlString("_"));
        
        int start = tgtSenJTextArea.getSelectionStart();
        int end = tgtSenJTextArea.getSelectionEnd();
        
        if(end <= start)
            return;
        
//        if(srcSenMarkup.getRowCount() == tgtSenMarkup.getRowCount())
//        {
//            JOptionPane.showMessageDialog(parentComponent, "You will have to first markup the source language sentence completely.", "Error", JOptionPane.ERROR_MESSAGE);
//            return;
//        }
        
        // In terms of string indices
        end--;
        
        int markerIndexInTgtSentence = tgtSenMarkup.getRowCount();
        
        int selectionBoundaries[] = getSelectedTokenBoundaries(tgtSenJTextArea);
        
//        if(start != selectionBoundaries[0] || end != selectionBoundaries[1])
//        {
//            tgtSenStatusJLabel.setText("Alert: target sentence selection modified.");
//        }
        
        start = selectionBoundaries[0];
        end = selectionBoundaries[1];
        
        String selItem = (String) tgtTMJComboBox.getSelectedItem();
        
        if(UtilityFunctions.addItemToJCoboBox(tgtTMJComboBox, selItem) == true) {
            parallelMarkupTask.getTgtTMIndex().put(selItem, Integer.toString(tgtTMJComboBox.getItemCount() - 1));
            newComboBoxElementAdded = true;
        }
        
        int marker = tgtTMJComboBox.getSelectedIndex();
        
        String sstart = Integer.toString(start);
        String send = Integer.toString(end);
        String smarker = Integer.toString(marker);
        
        tgtSenMarkup = (SanchayTableModel) parallelMarkupTask.getTgtSenMarkups().get(scurrentPosition);
        String row[] = {sstart, send, smarker};
//        int inds[] = {start, end, marker};
        int inds[] = {0, 1};
        
        boolean added = false;
        
        try {
            added = tgtSenMarkup.addRowUnique(inds, row);
        } catch(Exception e) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Error_while_adding_markup_for_the_target_language."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        
        if(added) {
            String tgtMarker = (markerIndexInTgtSentence + 1) + "::" + selItem;
            UtilityFunctions.addItemToJCoboBox(tgtJComboBoxEditor, tgtMarker);
            tgtSenStatusJLabel.setText(GlobalProperties.getIntlString("From_marker_dictionary:_") + reverseMarkerDict.getPropertyValue(selItem));
            
            try {
                Highlighter hilite = tgtSenJTextArea.getHighlighter();
                Document doc = tgtSenJTextArea.getDocument();
                String text = doc.getText(0, doc.getLength());
                Color newColor = UtilityFunctions.generateColor(startColor, tgtSenMarkup.getRowCount() - 1, colorIncrement);
                MarkerHighlightPainter hp = new MarkerHighlightPainter(newColor);
                hilite.addHighlight(start, end + 1, hp);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
            
            // Default value
            if(srcSenMarkup.getRowCount() >= tgtSenMarkup.getRowCount()) {
                int markerMappingRowIndex = tgtSenMarkup.getRowCount() - 1;
                
                if(markerMappingRowIndex >= 0)
                    markerMapping.setValueAt(tgtMarker, markerMappingRowIndex, 1);
            }
        }
    }//GEN-LAST:event_tgtTMJComboBoxActionPerformed
    
    private void srcTMJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srcTMJComboBoxActionPerformed
        // TODO add your handling code here:
        if(newComboBoxElementAdded == true) {
            newComboBoxElementAdded = false;
            return;
        }
        
        int currentPosition = parallelMarkupTask.getCurrentPosition();
        
        srcSenStatusJLabel.setText(GlobalProperties.getIntlString("_"));
        tgtSenStatusJLabel.setText(GlobalProperties.getIntlString("_"));
        
        int start = srcSenJTextArea.getSelectionStart();
        int end = srcSenJTextArea.getSelectionEnd();
        
//        String t = srcSenJTextArea.getText();
//        JOptionPane.showMessageDialog(parentComponent, "Start at " + start +  ", " + t.charAt(start) + "; " +
//                "End at " + end +  ", " + t.charAt(end) + ".",
//                "Selection Extent", JOptionPane.ERROR_MESSAGE);
        
        if(end <= start)
            return;
        
        // In terms of string indices
        end--;
        
        String scurrentPosition = Integer.toString(currentPosition + 1);
        SanchayTableModel srcSenMarkup = (SanchayTableModel) parallelMarkupTask.getSrcSenMarkups().get(scurrentPosition);
        int markerIndexInSrcSentence = srcSenMarkup.getRowCount();
        
        int selectionBoundaries[] = getSelectedTokenBoundaries(srcSenJTextArea);
        
//        if(start != selectionBoundaries[0] || end != selectionBoundaries[1])
//        {
//            srcSenStatusJLabel.setText("Alert: source sentence selection modified.");
//        }
        
        start = selectionBoundaries[0];
        end = selectionBoundaries[1];
        
        String selItem = (String) srcTMJComboBox.getSelectedItem();
        
        if(UtilityFunctions.addItemToJCoboBox(srcTMJComboBox, selItem) == true) {
            parallelMarkupTask.getSrcTMIndex().put(selItem, Integer.toString(srcTMJComboBox.getItemCount() - 1));
            newComboBoxElementAdded = true;
        }
        
        int marker = srcTMJComboBox.getSelectedIndex();
        
        String sstart = Integer.toString(start);
        String send = Integer.toString(end);
        String smarker = Integer.toString(marker);
        
        String row[] = {sstart, send, smarker};
//        int inds[] = {start, end, marker};
        int inds2[] = {0, 1};
        
        boolean added = false;
        
        try {
            added = srcSenMarkup.addRowUnique(inds2, row);
        } catch(Exception e) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Error_while_adding_markup_for_the_source_language."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        
        if(added) {
            String srcMarker = (markerIndexInSrcSentence + 1) + "::" + selItem;
            UtilityFunctions.addItemToJCoboBox(srcJComboBoxEditor, srcMarker);
            srcSenStatusJLabel.setText(GlobalProperties.getIntlString("From_marker_dictionary:_") + markerDict.getPropertyValue(selItem));
            
            try {
                Highlighter hilite = srcSenJTextArea.getHighlighter();
                Document doc = srcSenJTextArea.getDocument();
                String text = doc.getText(0, doc.getLength());
                Color newColor = UtilityFunctions.generateColor(startColor, srcSenMarkup.getRowCount() - 1, colorIncrement);
                MarkerHighlightPainter hp = new MarkerHighlightPainter(newColor);
                hilite.addHighlight(start, end + 1, hp);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
            
            String tm = "NONE";
            
            String mrow[] = {(markerIndexInSrcSentence + 1) + "::" + selItem, tm};
            
            if(markerMapping == null) {
                SanchayTableModel markerIndexMapping = (SanchayTableModel) parallelMarkupTask.getMarkerMappingTables().get(Integer.toString(currentPosition + 1));
                markerMapping = parallelMarkupTask.indexToStringMappingTable(markerIndexMapping);
            }
            
            int inds1[] = {0, 1};
            
            try {
                markerMapping.addRowUnique(inds1, mrow);
            } catch(Exception e) {
                JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Error_while_adding_mapping."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_srcTMJComboBoxActionPerformed
    
    private void saveJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJButtonActionPerformed
        // TODO add your handling code here:
        Cursor cursor = owner.getCursor();
        owner.setCursor(Cursor.WAIT_CURSOR);
        
        storeCurrentPosition();
        
        try {
            parallelMarkupTask.save();
        } catch(Exception e) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Error_while_saving."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        
        setCurrentPosition(parallelMarkupTask.getCurrentPosition() + 1);
        
//        dialog.setVisible(false);
        
        owner.setCursor(cursor);
    }//GEN-LAST:event_saveJButtonActionPerformed
    
    private void resetAllJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAllJButtonActionPerformed
        // TODO add your handling code here:
        int ret = JOptionPane.showConfirmDialog(parentComponent, GlobalProperties.getIntlString("Are_you_sure_you_want_to_reset_everything?"), GlobalProperties.getIntlString("Reset_All"), JOptionPane.YES_NO_OPTION);
        
        if(ret == JOptionPane.NO_OPTION)
            return;
        
        clearAll();
        
        configure();
    }//GEN-LAST:event_resetAllJButtonActionPerformed
    
    private void clearJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJButtonActionPerformed
        // TODO add your handling code here:
        clearPosition(parallelMarkupTask.getCurrentPosition());
        displayCurrentPosition();
    }//GEN-LAST:event_clearJButtonActionPerformed
    
    private void lastJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastJButtonActionPerformed
        // TODO add your handling code here:
        setCurrentPosition(parallelMarkupTask.getSrcCorpusPT().countTokens() - 1);
    }//GEN-LAST:event_lastJButtonActionPerformed
    
    private void nextJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextJButtonActionPerformed
        // TODO add your handling code here:
        String pos = (String) positionJComboBox.getSelectedItem();
        try {
            int cp = Integer.parseInt(pos);
            setCurrentPosition(cp);
        } catch(NumberFormatException e) {
            displayCurrentPosition();
//            JOptionPane.showMessageDialog(parentComponent, "Wrong sentence number: " + pos, "Error", JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
        }
    }//GEN-LAST:event_nextJButtonActionPerformed
    
    private void prevJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevJButtonActionPerformed
        // TODO add your handling code here:
        String pos = (String) positionJComboBox.getSelectedItem();
        try {
            int cp = Integer.parseInt(pos);
            setCurrentPosition(cp - 2);
        } catch(NumberFormatException e) {
            displayCurrentPosition();
//            JOptionPane.showMessageDialog(parentComponent, "Wrong sentence number: " + pos, "Error", JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
        }
    }//GEN-LAST:event_prevJButtonActionPerformed
    
    private void firstJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstJButtonActionPerformed
        // TODO add your handling code here:
        setCurrentPosition(0);
    }//GEN-LAST:event_firstJButtonActionPerformed
    
    public void setCurrentPosition(int cp) {
        int currentPosition = parallelMarkupTask.getCurrentPosition();
        
        int slSize = parallelMarkupTask.getSrcCorpusPT().countTokens();
        if(cp >= 0 && cp < slSize) {
            if(cp != currentPosition) {
                storeCurrentPosition();
                parallelMarkupTask.setCurrentPosition(cp);
            }
            
            displayCurrentPosition();
        }
    }

    public ClientType getClientType()
    {
        return clientType;
    }
    
    private void storeCurrentPosition() {
        int currentPosition = parallelMarkupTask.getCurrentPosition();
        
        parallelMarkupTask.getCommentsPT().modifyToken(commentJTextArea.getText(), currentPosition);
        
        if(markerMapping != null) {
            SanchayTableModel markerIndexMapping = parallelMarkupTask.stringToIndexMappingTable(markerMapping);
            parallelMarkupTask.getMarkerMappingTables().put(Integer.toString(currentPosition + 1), markerIndexMapping);
        }
    }
    
    private void displayCurrentPosition() {
        int currentPosition = parallelMarkupTask.getCurrentPosition();
        
        srcSenStatusJLabel.setText(" ");
        tgtSenStatusJLabel.setText(" ");
        
        srcSentence = (String) parallelMarkupTask.getSrcCorpusPT().getToken(currentPosition);
        srcSenJTextArea.setText(srcSentence);
        tgtSentence = (String) parallelMarkupTask.getTgtCorpusPT().getToken(currentPosition);
        tgtSenJTextArea.setText(tgtSentence);
        comment = (String) parallelMarkupTask.getCommentsPT().getToken(currentPosition);
        commentJTextArea.setText(comment);
        
        highlightCurrentMarkups();
        
        String currentPositionString = Integer.toString(currentPosition + 1);
        positionJComboBox.setSelectedItem(currentPositionString);
        
        // Mapping at new position
        SanchayTableModel markerIndexMapping = (SanchayTableModel) parallelMarkupTask.getMarkerMappingTables().get(Integer.toString(currentPosition + 1));
        markerMapping = parallelMarkupTask.indexToStringMappingTable(markerIndexMapping);
        
        Vector cols = new Vector(2);
        cols.add(GlobalProperties.getIntlString("Source_Language_Marker"));
        cols.add(GlobalProperties.getIntlString("Target_Language_Marker"));
        markerMapping.setColumnIdentifiers(cols);
        
        ((SanchayTableJPanel) sanchayTableJPanel).setModel(markerMapping);
        
        srcJComboBoxEditor.removeAllItems();
        tgtJComboBoxEditor.removeAllItems();
        
        srcJComboBoxEditor.addItem("NONE");
        tgtJComboBoxEditor.addItem("NONE");
        
        SanchayTableModel srcSenMarkup = (SanchayTableModel) parallelMarkupTask.getSrcSenMarkups().get(Integer.toString(currentPosition + 1));
        int count = srcSenMarkup.getRowCount();
        for(int i = 0; i < count; i++) {
            int marker = Integer.parseInt((String) srcSenMarkup.getValueAt(i, 2));
            String sm = (String) srcTMJComboBox.getItemAt(marker);
            String srcMarker = (i + 1) + "::" + sm;
            UtilityFunctions.addItemToJCoboBox(srcJComboBoxEditor, srcMarker);
        }
        
        SanchayTableModel tgtSenMarkup = (SanchayTableModel) parallelMarkupTask.getTgtSenMarkups().get(Integer.toString(currentPosition + 1));
        count = tgtSenMarkup.getRowCount();
        for(int i = 0; i < count; i++) {
            int marker = Integer.parseInt((String) tgtSenMarkup.getValueAt(i, 2));
            String tm = (String) tgtTMJComboBox.getItemAt(marker);
            String tgtMarker = (i + 1) + "::" + tm;
            UtilityFunctions.addItemToJCoboBox(tgtJComboBoxEditor, tgtMarker);
        }
        
        TableColumn srcColumn = ((SanchayTableJPanel) sanchayTableJPanel).getJTable().getColumnModel().getColumn(0);
        srcColumn.setCellEditor(new DefaultCellEditor(srcJComboBoxEditor));
        
        TableColumn tgtColumn = ((SanchayTableJPanel) sanchayTableJPanel).getJTable().getColumnModel().getColumn(1);
        tgtColumn.setCellEditor(new DefaultCellEditor(tgtJComboBoxEditor));
        
        toggleTgtUTF8(utf8Shown);
    }
    
    private void highlightCurrentMarkups() {
        SanchayTableModel srcSenMarkup = (SanchayTableModel) parallelMarkupTask.getSrcSenMarkups().get(Integer.toString(parallelMarkupTask.getCurrentPosition() + 1));
        
        int count = srcSenMarkup.getRowCount();
        for(int i = 0; i < count; i++) {
            int start = Integer.parseInt((String) srcSenMarkup.getValueAt(i, 0));
            int end = Integer.parseInt((String) srcSenMarkup.getValueAt(i, 1));
            
            try {
                Highlighter hilite = srcSenJTextArea.getHighlighter();
                Document doc = srcSenJTextArea.getDocument();
                String text = doc.getText(0, doc.getLength());
                Color newColor = UtilityFunctions.generateColor(startColor, i, colorIncrement);
                MarkerHighlightPainter hp = new MarkerHighlightPainter(newColor);
                hilite.addHighlight(start, end + 1, hp);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
        }
        
        SanchayTableModel tgtSenMarkup = (SanchayTableModel) parallelMarkupTask.getTgtSenMarkups().get(Integer.toString(parallelMarkupTask.getCurrentPosition() + 1));
        
        count = tgtSenMarkup.getRowCount();
        for(int i = 0; i < count; i++) {
            int start = Integer.parseInt((String) tgtSenMarkup.getValueAt(i, 0));
            int end = Integer.parseInt((String) tgtSenMarkup.getValueAt(i, 1));
            
            try {
                Highlighter hilite = tgtSenJTextArea.getHighlighter();
                Document doc = tgtSenJTextArea.getDocument();
                String text = doc.getText(0, doc.getLength());
                Color newColor = UtilityFunctions.generateColor(startColor, i, colorIncrement);
                MarkerHighlightPainter hp = new MarkerHighlightPainter(newColor);
                hilite.addHighlight(start, end + 1, hp);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void clearPosition(int pos) {
        SanchayTableModel srcSenMarkup = (SanchayTableModel) parallelMarkupTask.getSrcSenMarkups().get(Integer.toString(pos + 1));
        SanchayTableModel tgtSenMarkup = (SanchayTableModel) parallelMarkupTask.getTgtSenMarkups().get(Integer.toString(pos + 1));
        SanchayTableModel markerIndexMapping = (SanchayTableModel) parallelMarkupTask.getMarkerMappingTables().get(Integer.toString(pos + 1));
        
        while(srcSenMarkup.getRowCount() > 0)
            srcSenMarkup.removeRow(0);
        
        while(tgtSenMarkup.getRowCount() > 0)
            tgtSenMarkup.removeRow(0);
        
        while(markerIndexMapping.getRowCount() > 0)
            markerIndexMapping.removeRow(0);
        
        parallelMarkupTask.getCommentsPT().modifyToken("", pos);
    }
    
    private void clearAll() {
        Cursor cursor = owner.getCursor();
        owner.setCursor(Cursor.WAIT_CURSOR);
        
        int count = parallelMarkupTask.getSrcCorpusPT().countTokens();
        
        for(int i = 0; i < count; i++)
            clearPosition(i);
        
        owner.setCursor(cursor);
    }
    
    private int[] getSelectedTokenBoundaries(JTextArea textArea) {
        // In terms of string indices
        int start = textArea.getSelectionStart();
        int end = textArea.getSelectionEnd() - 1;
        
        String text = textArea.getText();
        
        while(start > 0) {
            char cstart = text.charAt(start - 1);
            
            if(UtilityFunctions.isWordBoundary(cstart) == true) {
                break;
            } else
                start--;
        }
        
        while(end < text.length() - 1) {
            char cend = text.charAt(end + 1);
            
            if(UtilityFunctions.isWordBoundary(cend) == true) {
                break;
            } else
                end++;
        }
        
        int boundaries[] = {start, end};
        
        return boundaries;
    }
    
    public void toggleTgtUTF8(boolean f) {
        if(f == true) // show UTF8
        {
            tgtUTF8Sentence = (String) parallelMarkupTask.getTgtCorpusUTF8PT().getToken(parallelMarkupTask.getCurrentPosition());
            tgtSenUTF8JTextArea.setText(tgtUTF8Sentence);
            ts1UTF8JPanel.setVisible(true);
            tgtShowUTF8JButton.setText(GlobalProperties.getIntlString("Hide_UTF8"));
            utf8Shown = true;
        } else // hide
        {
            tgtSenUTF8JTextArea.setText("");
//            tgtSenUTF8JTextArea.setVisible(false);
            ts1UTF8JPanel.setVisible(false);
            tgtShowUTF8JButton.setText(GlobalProperties.getIntlString("See_UTF8"));
            utf8Shown = false;
        }
    }
	
    public PropertiesManager getPropertiesManager()
    {
        return propman;
    }

    public String getLangEnc()
    {
        return srcLangEnc;
    }

    public String getTgtLangEnc()
    {
        return tgtLangEnc;
    }
    
    public Frame getOwner() {
        return owner;
    }
    
    public void setOwner(Frame f) {
        owner = (JFrame) f;
    }

    public void setParentComponent(Component parentComponent)
    {
        this.parentComponent = parentComponent;
    }
    
    public void setDialog(JDialog d) {
        dialog = d;
    }

    public String getTitle() {
        return title;
    }

    public JMenuBar getJMenuBar() {
        return null;
    }
    
    public JPopupMenu getJPopupMenu() {
        return null;
    }
    
    public JToolBar getJToolBar() {
        return null;
    }
    
    public void setTaskName(String tn) {
        parallelMarkupTask.setName(tn);
    }
    
    public void configure() {
        Cursor cursor = owner.getCursor();
        owner.setCursor(Cursor.WAIT_CURSOR);

        if(getOwner().getClass().equals(ParallelMarkupMain.class))
        {
            ParallelMarkupMain owner = (ParallelMarkupMain) getOwner();
            propman = owner.getPropertiesManager();
            taskList = owner.getTaskList();
        }
        else
        {    
            taskList = selectTaskJPanel.getTaskList();
        }
            
        String taskName = parallelMarkupTask.getName();
        Vector rows = taskList.getRows("TaskName", taskName);
        
        if(rows.size() != 1) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Not_a_valid_task_name:_") + taskName, GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            dialog.setVisible(false);
        }
        
        String cols[] = {"TaskKVPropFile", "TaskKVPropCharset"};
        Vector vals = taskList.getValues("TaskName", taskName, cols);
        
        vals = (Vector) vals.get(0);
        String taskKVPropFile = (String) vals.get(0);
        String taskKVPropCharset = (String) vals.get(1);
        
//        JOptionPane.showMessageDialog(parentComponent, "File: " + taskKVPropFile + ", charset: " + taskKVPropCharset, "Task props file", JOptionPane.ERROR_MESSAGE);
        
        try {
            parallelMarkupTask.read(taskKVPropFile, taskKVPropCharset);
            
            KeyValueProperties kvTaskProps = (KeyValueProperties) parallelMarkupTask.getProperties();
            
            markerDict = new KeyValueProperties(kvTaskProps.getPropertyValue("MarkerDictFile"), kvTaskProps.getPropertyValue("MarkerDictCharset"));
            reverseMarkerDict = markerDict.getReverse();
            
            srcTMJComboBox.setModel(parallelMarkupTask.getSrcTamMarkers());
            tgtTMJComboBox.setModel(parallelMarkupTask.getTgtTamMarkers());
            
            UtilityFunctions.addItemToJCoboBox(srcTMJComboBox, "NONE");
            UtilityFunctions.addItemToJCoboBox(tgtTMJComboBox, "NONE");
            
            int currentPosition = parallelMarkupTask.getCurrentPosition();
            comment = parallelMarkupTask.getCommentsPT().getToken(currentPosition);
            //                commentJTextArea.setText(comment);
            
            int senCount = parallelMarkupTask.getSrcCorpusPT().countTokens();
            
            Vector pvec = new Vector(senCount);
            
            for(int i = 1; i <= senCount; i++) {
                pvec.add(Integer.toString(i));
            }
            
            positions = new DefaultComboBoxModel(pvec);
            positionJComboBox.setModel(positions);
            
            comments = new DefaultComboBoxModel(parallelMarkupTask.getCommentsPT().getTypes());
            comments.removeElement("");
            
            commentJComboBox.setModel(comments);
            
            String pos = kvTaskProps.getPropertyValue("CurrentPosition");
            try {
                int cp = Integer.parseInt(pos);
                setCurrentPosition(cp - 1);
            } catch(NumberFormatException e) {
                setCurrentPosition(0);
            }
        } catch(Exception e) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Error_in_task_properties_for_the_task:_") + taskName, GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        
        owner.setCursor(cursor);
    }
    
    public void convertToXML(String f, String charset) throws FileNotFoundException, UnsupportedEncodingException {
        PrintStream ps = new PrintStream(f, charset);
        printXML(ps);
    }
    
    public void printXML(PrintStream ps) {
        int count = parallelMarkupTask.getSrcCorpusPT().countTokens();
        
        KeyValueProperties kvTaskProps = (KeyValueProperties) parallelMarkupTask.getProperties();
        
        ps.println("<ParallelCorpusMarkup type=\"TAMMarker\" task=\""+ parallelMarkupTask.getName()
        + "\" taskKVPropFile=\"" + kvTaskProps.getPropertyValue("TaskPropFile")
        + "\" taskKVPropCharset=\"" + kvTaskProps.getPropertyValue("TaskPropCharset") + "\">");
        
        for(int i = 0; i < count; i++) {
            ps.print(getXML(i));
        }
        
        ps.println("</ParallelCorpusMarkup>");
    }
    
    public String getXML(int pos) {
//        String xml = "<Sentence " + "id=\"" + (pos + 1) + "\">\n";
//        String ssen = srcCorpusPT.getToken(pos);
//        String tsen = tgtCorpusPT.getToken(pos);
//
//        SanchayTable srcSenMarkup = (SanchayTable) srcSenMarkups.get(Integer.toString(pos + 1));
//
//        xml += "\t<SLSentence>\n";
//        for(int j = 0; j < srcSenMarkup.getRowCount(); j++)
//        {
//            int start = Integer.parseInt((String) srcSenMarkup.getValueAt(j, 0));
//            int end = Integer.parseInt((String) srcSenMarkup.getValueAt(j, 1));
//            int marker = Integer.parseInt((String) srcSenMarkup.getValueAt(j, 2));
//
//            String smarker = (String) srcTamMarkers.getElementAt(marker);
//        }
//        xml += "\t</SLSentence>\n";
//
//        SanchayTable tgtSenMarkup = (SanchayTable) tgtSenMarkups.get(Integer.toString(pos + 1));
//
//        xml += "\t<TLSentence>\n";
//        for(int j = 0; j < tgtSenMarkup.getRowCount(); j++)
//        {
//            int start = Integer.parseInt((String) tgtSenMarkup.getValueAt(j, 0));
//            int end = Integer.parseInt((String) tgtSenMarkup.getValueAt(j, 1));
//            int marker = Integer.parseInt((String) tgtSenMarkup.getValueAt(j, 2));
//
//            String smarker = (String) tgtTamMarkers.getElementAt(marker);
//        }
//        xml += "\t</TLSentence>\n";
//
//        SanchayTable markerIndexMapping = (SanchayTable) markerMappingTables.get(Integer.toString(pos + 1));
//        SanchayTable markerStringMapping = indexToStringMappingTable(markerIndexMapping);
//
//        xml += "\t<MarkerMapping>\n";
//        for(int j = 0; j < markerStringMapping.getRowCount(); j++)
//        {
//            String sm = (String) markerStringMapping.getValueAt(j, 0);
//            xml += "\t\t<SLMarker>\n" + sm + "</SLMarker>";
//            String tm = (String) markerStringMapping.getValueAt(j, 1);
//            xml += "\t\t<TLMarker>\n" + tm + "</TLMarker>";
//        }
//        xml += "\t</MarkerMapping>\n";
//
//        xml += "</Sentence>\n";
//
//        return xml;
        return null;
    }

    public String getWorkspace()
    {
        return workspace;
    }
    
    public void setWorkspace(String p) throws Exception
    {
        workspace = p;
        File wsdir = new File(p);

        if(wsdir.exists() == false)
        {
            if(wsdir.mkdir() == false)
                throw new Exception();
        }
        else if(wsdir.isDirectory() == false)
        throw new Exception();
    }
    
    public void configure(String pmPath, String charSet)
    {
        clear();
        
        try {
            propman = new PropertiesManager(pmPath, charSet);
            propman.print(System.out);
            
            
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    
    public void clear()
    {
        workspace = GlobalProperties.getHomeDirectory() + "/" + "parallel-corpus-markup";
    }

    public void setWorkJPanel(JPanel wjp)
    {
        
    }
  
    public PropertiesTable getTaskList()
    {
        return taskList;
    }
    
    public void setTaskList(PropertiesTable tl)
    {
        taskList = tl;
    }
    
    private class MarkerHighlightPainter extends DefaultHighlighter.DefaultHighlightPainter {
        public MarkerHighlightPainter(Color color) {
            super(color);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel bottomJPanel;
    public javax.swing.JButton clearAllButton;
    public javax.swing.JButton clearJButton;
    public javax.swing.JPanel commandsJPanel;
    public javax.swing.JComboBox commentJComboBox;
    public javax.swing.JLabel commentJLabel;
    public javax.swing.JPanel commentJPanel;
    public javax.swing.JScrollPane commentJScrollPane;
    public javax.swing.JTextArea commentJTextArea;
    public javax.swing.JButton firstJButton;
    public javax.swing.JButton lastJButton;
    public javax.swing.JPanel markerMappingJPanel;
    public javax.swing.JScrollPane markerMappingJScrollPane;
    public javax.swing.JTable markerMappingJTable;
    public javax.swing.JPanel navigateJPanel;
    public javax.swing.JButton nextJButton;
    public javax.swing.JButton openJButton;
    public javax.swing.JComboBox positionJComboBox;
    public javax.swing.JLabel positionJLabel;
    public javax.swing.JPanel positionJPanel;
    public javax.swing.JPanel positionLeftJPanel;
    public javax.swing.JPanel positionRightJPanel;
    public javax.swing.JButton prevJButton;
    public javax.swing.JButton resetAllJButton;
    public javax.swing.JPanel sanchayTableJPanel;
    public javax.swing.JButton saveJButton;
    public javax.swing.JPanel senJPanel;
    public javax.swing.JButton srcClearMarkerJButton;
    public javax.swing.JPanel srcSenJPanel;
    public javax.swing.JScrollPane srcSenJScrollPane;
    public javax.swing.JTextArea srcSenJTextArea;
    public javax.swing.JLabel srcSenStatusJLabel;
    public javax.swing.JComboBox srcTMJComboBox;
    public javax.swing.JCheckBox srcTMJEditCheckBox;
    public javax.swing.JLabel srcTMJLabel;
    public javax.swing.JPanel ss1JPanel;
    public javax.swing.JPanel ss2JPanel;
    public javax.swing.JButton tgtClearMarkerJButton;
    public javax.swing.JPanel tgtSenJPanel;
    public javax.swing.JScrollPane tgtSenJScrollPane;
    public javax.swing.JTextArea tgtSenJTextArea;
    public javax.swing.JLabel tgtSenStatusJLabel;
    public javax.swing.JScrollPane tgtSenUTF8JScrollPane;
    public javax.swing.JTextArea tgtSenUTF8JTextArea;
    public javax.swing.JButton tgtShowUTF8JButton;
    public javax.swing.JComboBox tgtTMJComboBox;
    public javax.swing.JCheckBox tgtTMJEditCheckBox;
    public javax.swing.JLabel tgtTMJLabel;
    public javax.swing.JPanel ts1JPanel;
    public javax.swing.JPanel ts1UTF8JPanel;
    public javax.swing.JPanel ts2JPanel;
    // End of variables declaration//GEN-END:variables
    
}
