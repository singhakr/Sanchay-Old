/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CorpusStatisticsJPanel.java
 *
 * Created on 24 Jan, 2010, 8:57:22 AM
 */

package sanchay.corpus.ssf.gui;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import sanchay.corpus.ssf.SSFStory;
import sanchay.corpus.stats.CorpusStatistics;
import sanchay.corpus.stats.CorpusStatisticsFactory;
import sanchay.gui.common.JPanelDialog;
import sanchay.properties.KeyValueProperties;
import sanchay.properties.MultiKeyValueProperties;
import sanchay.table.SanchayTableModel;
import sanchay.table.gui.MultiLineCellRenderer;
import sanchay.table.gui.SanchayTableCellEditor;
import sanchay.table.gui.SanchayTableJPanel;
import sanchay.util.UtilityFunctions;

/**
 *
 * @author anil
 */
public class CorpusStatisticsJPanel extends javax.swing.JPanel implements JPanelDialog {

    protected JFrame owner;
    protected JDialog dialog;
    protected Component parentComponent;

    protected String langEnc;
    protected String charset = "UTF-8";

    protected SSFStory ssfStory;

    protected CorpusStatistics localCorpusStatistics;
    protected static CorpusStatistics globalCorpusStatistics;

    /** Creates new form CorpusStatisticsJPanel */
    public CorpusStatisticsJPanel() {
        initComponents();

        localCorpusStatistics = new CorpusStatistics(false);
        globalCorpusStatistics = CorpusStatisticsFactory.getGlobalCorpusStatisticsReference();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cardsJPanel = new javax.swing.JPanel();
        localStatsCardJPanel = new javax.swing.JPanel();
        statsJTabbedPane1 = new javax.swing.JTabbedPane();
        localGlobalStatsJPanel = new javax.swing.JPanel();
        localWordFreqJPanel = new javax.swing.JPanel();
        localGRrelFreqJPanel = new javax.swing.JPanel();
        localPOSTagFreqJPanel = new javax.swing.JPanel();
        localWordTagFreqJPanel = new javax.swing.JPanel();
        localChunkTagFreqJPanel = new javax.swing.JPanel();
        localChunkGRelFreqJPanel = new javax.swing.JPanel();
        localUnchunkedWordFreqJPanel = new javax.swing.JPanel();
        localWordsForTagsJPanel = new javax.swing.JPanel();
        localTagsForWordsJPanel = new javax.swing.JPanel();
        localChunksForRelsJPanel = new javax.swing.JPanel();
        localRelsForChunksJPanel = new javax.swing.JPanel();
        globalStatsCardJPanel = new javax.swing.JPanel();
        globalStatsJTabbedPane = new javax.swing.JTabbedPane();
        globalGlobalStatsJPanel = new javax.swing.JPanel();
        globalWordFreqJPanel = new javax.swing.JPanel();
        globalGRrelFreqJPanel = new javax.swing.JPanel();
        globalPOSTagFreqJPanel = new javax.swing.JPanel();
        globalWordTagFreqJPanel = new javax.swing.JPanel();
        globalChunkTagFreqJPanel = new javax.swing.JPanel();
        globalChunkGRelFreqJPanel = new javax.swing.JPanel();
        globalUnchunkedWordFreqJPanel = new javax.swing.JPanel();
        globalWordsForTagsJPanel = new javax.swing.JPanel();
        globalTagsForWordsJPanel = new javax.swing.JPanel();
        globalChunksForRelsJPanel = new javax.swing.JPanel();
        globalRelsForChunksJPanel = new javax.swing.JPanel();
        commandsJPanel = new javax.swing.JPanel();
        optionsJPanel = new javax.swing.JPanel();
        cardJLabel = new javax.swing.JLabel();
        cardJComboBox = new javax.swing.JComboBox();
        buttonsJPanel = new javax.swing.JPanel();
        saveJButton = new javax.swing.JButton();
        clearJButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        cardsJPanel.setLayout(new java.awt.CardLayout());

        localStatsCardJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Local statistics (for the current file)"));
        localStatsCardJPanel.setToolTipText("View local statistics (for the current file)");
        localStatsCardJPanel.setLayout(new java.awt.BorderLayout());

        localGlobalStatsJPanel.setLayout(new java.awt.BorderLayout());
        statsJTabbedPane1.addTab("Global Statistics", localGlobalStatsJPanel);

        localWordFreqJPanel.setLayout(new java.awt.BorderLayout());
        statsJTabbedPane1.addTab("Words", localWordFreqJPanel);

        localGRrelFreqJPanel.setLayout(new java.awt.BorderLayout());
        statsJTabbedPane1.addTab("Relations", localGRrelFreqJPanel);

        localPOSTagFreqJPanel.setLayout(new java.awt.BorderLayout());
        statsJTabbedPane1.addTab("Tags (Words)", localPOSTagFreqJPanel);

        localWordTagFreqJPanel.setLayout(new java.awt.BorderLayout());
        statsJTabbedPane1.addTab("Word-Tags Pairs", localWordTagFreqJPanel);

        localChunkTagFreqJPanel.setLayout(new java.awt.BorderLayout());
        statsJTabbedPane1.addTab("Tags (Chunks)", localChunkTagFreqJPanel);

        localChunkGRelFreqJPanel.setLayout(new java.awt.BorderLayout());
        statsJTabbedPane1.addTab("Relations (Chunks)", localChunkGRelFreqJPanel);

        localUnchunkedWordFreqJPanel.setLayout(new java.awt.BorderLayout());
        statsJTabbedPane1.addTab("Unchunked Words", localUnchunkedWordFreqJPanel);

        localWordsForTagsJPanel.setLayout(new java.awt.BorderLayout());
        statsJTabbedPane1.addTab("Words for Tags", localWordsForTagsJPanel);

        localTagsForWordsJPanel.setLayout(new java.awt.BorderLayout());
        statsJTabbedPane1.addTab("Tags for Words", localTagsForWordsJPanel);

        localChunksForRelsJPanel.setLayout(new java.awt.BorderLayout());
        statsJTabbedPane1.addTab("Chunks for Relations", localChunksForRelsJPanel);

        localRelsForChunksJPanel.setLayout(new java.awt.BorderLayout());
        statsJTabbedPane1.addTab("Relations for Chunks", localRelsForChunksJPanel);

        localStatsCardJPanel.add(statsJTabbedPane1, java.awt.BorderLayout.CENTER);

        cardsJPanel.add(localStatsCardJPanel, "Local Stats");

        globalStatsCardJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Global statistics (stored data)"));
        globalStatsCardJPanel.setToolTipText("View global statistics (for the current file)");
        globalStatsCardJPanel.setLayout(new java.awt.BorderLayout());

        globalGlobalStatsJPanel.setLayout(new java.awt.BorderLayout());
        globalStatsJTabbedPane.addTab("Global Statistics", globalGlobalStatsJPanel);

        globalWordFreqJPanel.setLayout(new java.awt.BorderLayout());
        globalStatsJTabbedPane.addTab("Words", globalWordFreqJPanel);

        globalGRrelFreqJPanel.setLayout(new java.awt.BorderLayout());
        globalStatsJTabbedPane.addTab("Relations", globalGRrelFreqJPanel);

        globalPOSTagFreqJPanel.setLayout(new java.awt.BorderLayout());
        globalStatsJTabbedPane.addTab("Tags (Words)", globalPOSTagFreqJPanel);

        globalWordTagFreqJPanel.setLayout(new java.awt.BorderLayout());
        globalStatsJTabbedPane.addTab("Word-Tags Pairs", globalWordTagFreqJPanel);

        globalChunkTagFreqJPanel.setLayout(new java.awt.BorderLayout());
        globalStatsJTabbedPane.addTab("Tags (Chunks)", globalChunkTagFreqJPanel);

        globalChunkGRelFreqJPanel.setLayout(new java.awt.BorderLayout());
        globalStatsJTabbedPane.addTab("Relations (Chunks)", globalChunkGRelFreqJPanel);

        globalUnchunkedWordFreqJPanel.setLayout(new java.awt.BorderLayout());
        globalStatsJTabbedPane.addTab("Unchunked Words", globalUnchunkedWordFreqJPanel);

        globalWordsForTagsJPanel.setLayout(new java.awt.BorderLayout());
        globalStatsJTabbedPane.addTab("Words for Tags", globalWordsForTagsJPanel);

        globalTagsForWordsJPanel.setLayout(new java.awt.BorderLayout());
        globalStatsJTabbedPane.addTab("Tags for Words", globalTagsForWordsJPanel);

        globalChunksForRelsJPanel.setLayout(new java.awt.BorderLayout());
        globalStatsJTabbedPane.addTab("Chunks for Relations", globalChunksForRelsJPanel);

        globalRelsForChunksJPanel.setLayout(new java.awt.BorderLayout());
        globalStatsJTabbedPane.addTab("Relations for Chunks", globalRelsForChunksJPanel);

        globalStatsCardJPanel.add(globalStatsJTabbedPane, java.awt.BorderLayout.CENTER);

        cardsJPanel.add(globalStatsCardJPanel, "Global Stats");

        add(cardsJPanel, java.awt.BorderLayout.CENTER);

        commandsJPanel.setLayout(new java.awt.GridLayout());

        optionsJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        cardJLabel.setText("Stats for: ");
        cardJLabel.setToolTipText("Local or global statistics?");
        optionsJPanel.add(cardJLabel);

        cardJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Local Stats", "Global Stats" }));
        cardJComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cardJComboBoxItemStateChanged(evt);
            }
        });
        cardJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardJComboBoxActionPerformed(evt);
            }
        });
        optionsJPanel.add(cardJComboBox);

        commandsJPanel.add(optionsJPanel);

        saveJButton.setText("Save");
        saveJButton.setToolTipText("Save statistics for this file into the global statistics");
        saveJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJButtonActionPerformed(evt);
            }
        });
        buttonsJPanel.add(saveJButton);

        clearJButton.setText("Clear");
        clearJButton.setToolTipText("Clear the global statistics");
        clearJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJButtonActionPerformed(evt);
            }
        });
        buttonsJPanel.add(clearJButton);

        commandsJPanel.add(buttonsJPanel);

        add(commandsJPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void saveJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJButtonActionPerformed

        int ret = JOptionPane.showConfirmDialog(this, "Are you sure that you want to save?\nYOU SHOULD DO THIS ONLY ONCE PER FILE.", "Save To Global Statistics", JOptionPane.YES_NO_OPTION);

        if(ret == JOptionPane.NO_OPTION)
            return;

        globalCorpusStatistics.copyDataFrom(localCorpusStatistics);
        globalCorpusStatistics.save();
    }//GEN-LAST:event_saveJButtonActionPerformed

    private void clearJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJButtonActionPerformed
        // TODO add your handling code here:
        int ret = JOptionPane.showConfirmDialog(this, "Are you sure that you want to clear?\nALL GLOBAL STATISTICS WILL BE REMOVED.", "Clear Global Statistics", JOptionPane.YES_NO_OPTION);

        if(ret == JOptionPane.NO_OPTION)
            return;

        globalCorpusStatistics.clear();
    }//GEN-LAST:event_clearJButtonActionPerformed

    private void cardJComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cardJComboBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cardJComboBoxItemStateChanged

    private void cardJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardJComboBoxActionPerformed
        // TODO add your handling code here:
        if(((String) cardJComboBox.getSelectedItem()).equals("Local Stats"))
            ((CardLayout) cardsJPanel.getLayout()).show(cardsJPanel, "Local Stats");
        else
            ((CardLayout) cardsJPanel.getLayout()).show(cardsJPanel, "Global Stats");
    }//GEN-LAST:event_cardJComboBoxActionPerformed

    protected void initStats(String langEnc, SSFStory ssfStory)
    {
        this.langEnc = langEnc;
        this.ssfStory = ssfStory;
        
        localCorpusStatistics.initStats(langEnc, ssfStory);
//        globalCorpusStatistics.loadGlobalData();

        loadGlobalStats(ssfStory);

        loadLocalTabs();
        loadGlobalTabs();

        cardJComboBox.setSelectedItem("Global Stats");
    }

    protected void initStats(String langEnc, LinkedHashMap<File, SSFStory> selStories)
    {
        this.langEnc = langEnc;
        
        localCorpusStatistics.initStats(langEnc, selStories);
//        globalCorpusStatistics.loadGlobalData();

        loadGlobalStats((SSFStory) UtilityFunctions.getFirstValue(selStories));

        loadLocalTabs();
        loadGlobalTabs();

        cardJComboBox.setSelectedItem("Global Stats");
    }

    private void loadGlobalTabs()
    {
        SanchayTableModel wordFreqTable = new SanchayTableModel(new String[]{"Word", "Frequency"}, 2);
        SanchayTableModel.mapToTable(globalCorpusStatistics.getWordFreq(), wordFreqTable, false);
        wordFreqTable.trimRows(false);

        SanchayTableJPanel wordFreqTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(wordFreqTable, langEnc, true);
        globalWordFreqJPanel.add(wordFreqTableJPanel, BorderLayout.CENTER);

        SanchayTableModel posTagFreqTable = new SanchayTableModel(new String[]{"POS Tag", "Frequency"}, 2);
        SanchayTableModel.mapToTable(globalCorpusStatistics.getPOSTagFreq(), posTagFreqTable, false);
        posTagFreqTable.trimRows(false);

        SanchayTableJPanel posTagFreqTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(posTagFreqTable, langEnc, true);
        globalPOSTagFreqJPanel.add(posTagFreqTableJPanel, BorderLayout.CENTER);

        SanchayTableModel grelFreqTable = new SanchayTableModel(new String[]{"Relation", "Frequency"}, 2);
        SanchayTableModel.mapToTable(globalCorpusStatistics.getGRelFreq(), grelFreqTable, false);
        grelFreqTable.trimRows(false);

        SanchayTableJPanel grelFreqTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(grelFreqTable, langEnc, true);
        globalGRrelFreqJPanel.add(grelFreqTableJPanel, BorderLayout.CENTER);

        SanchayTableModel wordTagPairFreqTable = new SanchayTableModel(new String[]{"Word-Tag Pair", "Frequency"}, 2);
        SanchayTableModel.mapToTable(globalCorpusStatistics.getWordTagFreq(), wordTagPairFreqTable, false);
        wordTagPairFreqTable.trimRows(false);

        SanchayTableJPanel wordTagPairFreqTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(wordTagPairFreqTable, langEnc, true);
        globalWordTagFreqJPanel.add(wordTagPairFreqTableJPanel, BorderLayout.CENTER);

        SanchayTableModel chunkTagFreqTable = new SanchayTableModel(new String[]{"Chunk Tag", "Frequency"}, 2);
        SanchayTableModel.mapToTable(globalCorpusStatistics.getChunkTagFreq(), chunkTagFreqTable, false);
        chunkTagFreqTable.trimRows(false);

        SanchayTableJPanel chunkTagFreqTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(chunkTagFreqTable, langEnc, true);
        globalChunkTagFreqJPanel.add(chunkTagFreqTableJPanel, BorderLayout.CENTER);

        SanchayTableModel unchunkedWordFreqTable = new SanchayTableModel(new String[]{"Unchunked Word", "Frequency"}, 2);
        SanchayTableModel.mapToTable(globalCorpusStatistics.getUnchunkedWordFreq(), unchunkedWordFreqTable, false);
        unchunkedWordFreqTable.trimRows(false);

        SanchayTableJPanel unchunkedWordFreqTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(unchunkedWordFreqTable, langEnc, true);
        globalUnchunkedWordFreqJPanel.add(unchunkedWordFreqTableJPanel, BorderLayout.CENTER);

        SanchayTableModel chunkRelFreqTable = new SanchayTableModel(new String[]{"Chunk Relation", "Frequency"}, 2);
        SanchayTableModel.mapToTable(globalCorpusStatistics.getChunkGRelFreq(), chunkRelFreqTable, false);
        chunkRelFreqTable.trimRows(false);

        SanchayTableJPanel chunkRelFreqTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(chunkRelFreqTable, langEnc, true);
        globalChunkGRelFreqJPanel.add(chunkRelFreqTableJPanel, BorderLayout.CENTER);

        SanchayTableModel tagsForWordsTable = new SanchayTableModel(new String[]{"Word", "Tags"}, globalCorpusStatistics.getWordFreq().size());

        LinkedHashMap<String, String> tagsForWords = new LinkedHashMap<String, String>();

        Iterator<String> itr = globalCorpusStatistics.getWordTagFreq().keySet().iterator();

        while(itr.hasNext())
        {
            String wrdTag = itr.next();

            String parts[] = wrdTag.split("/");

            if(parts.length == 2)
            {
                String wrd = parts[0];
                String tag = parts[1];

                String tags = tagsForWords.get(wrd);

                if(tags == null)
                    tagsForWords.put(wrd, tag);
                else
                    tagsForWords.put(wrd, tags + ", " + tag);
            }
        }

        SanchayTableModel.mapToTable(tagsForWords, tagsForWordsTable, false);
        tagsForWordsTable.trimRows(false);

        SanchayTableJPanel tagsForWordsTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(tagsForWordsTable, langEnc, true);
        globalTagsForWordsJPanel.add(tagsForWordsTableJPanel, BorderLayout.CENTER);
        tagsForWordsTableJPanel.getJTable().setRowHeight(60);
        tagsForWordsTableJPanel.getJTable().setDefaultRenderer(String.class, new MultiLineCellRenderer(langEnc, 3, 100));
        tagsForWordsTableJPanel.getJTable().setDefaultEditor(String.class, new SanchayTableCellEditor(langEnc, SanchayTableCellEditor.MULTIPLE_ROW));

        SanchayTableModel wordsForTagsTable = new SanchayTableModel(new String[]{"Tag", "Words"}, globalCorpusStatistics.getWordFreq().size());

        LinkedHashMap<String, String> wordsForTags = new LinkedHashMap<String, String>();

        itr = globalCorpusStatistics.getWordTagFreq().keySet().iterator();

        while(itr.hasNext())
        {
            String wrdTag = itr.next();

            String parts[] = wrdTag.split("/");

            if(parts.length == 2)
            {
                String wrd = parts[0];
                String tag = parts[1];

                String wrds = wordsForTags.get(tag);

                if(wrds == null)
                    wordsForTags.put(tag, wrd);
                else
                    wordsForTags.put(tag, wrds + ", " + wrd);
            }
        }

        SanchayTableModel.mapToTable(wordsForTags, wordsForTagsTable, false);
        wordsForTagsTable.trimRows(false);

        SanchayTableJPanel wordsForTagsTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(wordsForTagsTable, langEnc, true);
        globalWordsForTagsJPanel.add(wordsForTagsTableJPanel, BorderLayout.CENTER);
        wordsForTagsTableJPanel.getJTable().setRowHeight(80);
        wordsForTagsTableJPanel.getJTable().setDefaultRenderer(String.class, new MultiLineCellRenderer(langEnc, 3, 100));
        wordsForTagsTableJPanel.getJTable().setDefaultEditor(String.class, new SanchayTableCellEditor(langEnc, SanchayTableCellEditor.MULTIPLE_ROW));

        SanchayTableModel chunksForRelsTable = new SanchayTableModel(new String[]{"Chunk", "Relation"}, 2);

        LinkedHashMap<String, String> chunksForRels = new LinkedHashMap<String, String>();

        itr = globalCorpusStatistics.getChunkGRelFreq().keySet().iterator();

        while(itr.hasNext())
        {
            String chunkRel = itr.next();

            String parts[] = chunkRel.split("::");

            if(parts.length == 2)
            {
                String chunk = parts[0];
                String rel = parts[1];

                String chunks = chunksForRels.get(rel);

                if(chunks == null)
                    chunksForRels.put(rel, chunk);
                else
                    chunksForRels.put(rel, chunks + ", " + chunk);
            }
        }

        SanchayTableModel.mapToTable(chunksForRels, chunksForRelsTable, false);
        chunksForRelsTable.trimRows(false);

        SanchayTableJPanel chunksForRelsTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(chunksForRelsTable, langEnc, true);
        globalChunksForRelsJPanel.add(chunksForRelsTableJPanel, BorderLayout.CENTER);
        chunksForRelsTableJPanel.getJTable().setRowHeight(80);
        chunksForRelsTableJPanel.getJTable().setDefaultRenderer(String.class, new MultiLineCellRenderer(langEnc, 3, 100));
        chunksForRelsTableJPanel.getJTable().setDefaultEditor(String.class, new SanchayTableCellEditor(langEnc, SanchayTableCellEditor.MULTIPLE_ROW));

        SanchayTableModel relsForChunksTable = new SanchayTableModel(new String[]{"Relation", "Chunk"}, 2);

        LinkedHashMap<String, String> relsForChunks = new LinkedHashMap<String, String>();

        itr = globalCorpusStatistics.getChunkGRelFreq().keySet().iterator();

        while(itr.hasNext())
        {
            String chunkRel = itr.next();

            String parts[] = chunkRel.split("::");

            if(parts.length == 2)
            {
                String chunk = parts[0];
                String rel = parts[1];

                String rels = relsForChunks.get(rel);

                if(rels == null)
                    relsForChunks.put(chunk, rel);
                else
                    relsForChunks.put(chunk, rels + ", " + rel);
            }
        }

        SanchayTableModel.mapToTable(relsForChunks, relsForChunksTable, false);
        relsForChunksTable.trimRows(false);

        SanchayTableJPanel relsForChunksTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(relsForChunksTable, langEnc, true);
        globalRelsForChunksJPanel.add(relsForChunksTableJPanel, BorderLayout.CENTER);
        relsForChunksTableJPanel.getJTable().setRowHeight(80);
        relsForChunksTableJPanel.getJTable().setDefaultRenderer(String.class, new MultiLineCellRenderer(langEnc, 3, 100));
        relsForChunksTableJPanel.getJTable().setDefaultEditor(String.class, new SanchayTableCellEditor(langEnc, SanchayTableCellEditor.MULTIPLE_ROW));
    }

    private void loadLocalTabs()
    {
        SanchayTableModel wordFreqTable = new SanchayTableModel(new String[]{"Word", "Frequency"}, 2);
        SanchayTableModel.mapToTable(localCorpusStatistics.getWordFreq(), wordFreqTable, false);
        wordFreqTable.trimRows(false);

        SanchayTableJPanel wordFreqTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(wordFreqTable, langEnc, true);
        localWordFreqJPanel.add(wordFreqTableJPanel, BorderLayout.CENTER);

        SanchayTableModel posTagFreqTable = new SanchayTableModel(new String[]{"POS Tag", "Frequency"}, 2);
        SanchayTableModel.mapToTable(localCorpusStatistics.getPOSTagFreq(), posTagFreqTable, false);
        posTagFreqTable.trimRows(false);

        SanchayTableJPanel posTagFreqTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(posTagFreqTable, langEnc, true);
        localPOSTagFreqJPanel.add(posTagFreqTableJPanel, BorderLayout.CENTER);

        SanchayTableModel grelFreqTable = new SanchayTableModel(new String[]{"Relation", "Frequency"}, 2);
        SanchayTableModel.mapToTable(localCorpusStatistics.getGRelFreq(), grelFreqTable, false);
        grelFreqTable.trimRows(false);

        SanchayTableJPanel grelFreqTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(grelFreqTable, langEnc, true);
        localGRrelFreqJPanel.add(grelFreqTableJPanel, BorderLayout.CENTER);

        SanchayTableModel wordTagPairFreqTable = new SanchayTableModel(new String[]{"Word-Tag Pair", "Frequency"}, 2);
        SanchayTableModel.mapToTable(localCorpusStatistics.getWordTagFreq(), wordTagPairFreqTable, false);
        wordTagPairFreqTable.trimRows(false);

        SanchayTableJPanel wordTagPairFreqTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(wordTagPairFreqTable, langEnc, true);
        localWordTagFreqJPanel.add(wordTagPairFreqTableJPanel, BorderLayout.CENTER);

        SanchayTableModel chunkTagFreqTable = new SanchayTableModel(new String[]{"Chunk Tag", "Frequency"}, 2);
        SanchayTableModel.mapToTable(localCorpusStatistics.getChunkTagFreq(), chunkTagFreqTable, false);
        chunkTagFreqTable.trimRows(false);

        SanchayTableJPanel chunkTagFreqTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(chunkTagFreqTable, langEnc, true);
        localChunkTagFreqJPanel.add(chunkTagFreqTableJPanel, BorderLayout.CENTER);

        SanchayTableModel unchunkedWordFreqTable = new SanchayTableModel(new String[]{"Unchunked Word", "Frequency"}, 2);
        SanchayTableModel.mapToTable(localCorpusStatistics.getUnchunkedWordFreq(), unchunkedWordFreqTable, false);
        unchunkedWordFreqTable.trimRows(false);

        SanchayTableJPanel unchunkedWordFreqTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(unchunkedWordFreqTable, langEnc, true);
        localUnchunkedWordFreqJPanel.add(unchunkedWordFreqTableJPanel, BorderLayout.CENTER);

        SanchayTableModel chunkRelFreqTable = new SanchayTableModel(new String[]{"Chunk Relation", "Frequency"}, 2);
        SanchayTableModel.mapToTable(localCorpusStatistics.getChunkGRelFreq(), chunkRelFreqTable, false);
        chunkRelFreqTable.trimRows(false);

        SanchayTableJPanel chunkRelFreqTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(chunkRelFreqTable, langEnc, true);
        localChunkGRelFreqJPanel.add(chunkRelFreqTableJPanel, BorderLayout.CENTER);

        SanchayTableModel tagsForWordsTable = new SanchayTableModel(new String[]{"Word", "Tags"}, localCorpusStatistics.getWordFreq().size());

        LinkedHashMap<String, String> tagsForWords = new LinkedHashMap<String, String>();

        Iterator<String> itr = localCorpusStatistics.getWordTagFreq().keySet().iterator();

        while(itr.hasNext())
        {
            String wrdTag = itr.next();

            String parts[] = wrdTag.split("/");

            if(parts.length == 2)
            {
                String wrd = parts[0];
                String tag = parts[1];

                String tags = tagsForWords.get(wrd);

                if(tags == null)
                    tagsForWords.put(wrd, tag);
                else
                    tagsForWords.put(wrd, tags + ", " + tag);
            }
        }

        SanchayTableModel.mapToTable(tagsForWords, tagsForWordsTable, false);
        tagsForWordsTable.trimRows(false);

        SanchayTableJPanel tagsForWordsTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(tagsForWordsTable, langEnc, true);
        localTagsForWordsJPanel.add(tagsForWordsTableJPanel, BorderLayout.CENTER);
        tagsForWordsTableJPanel.getJTable().setRowHeight(60);
        tagsForWordsTableJPanel.getJTable().setDefaultRenderer(String.class, new MultiLineCellRenderer(langEnc, 3, 100));
        tagsForWordsTableJPanel.getJTable().setDefaultEditor(String.class, new SanchayTableCellEditor(langEnc, SanchayTableCellEditor.MULTIPLE_ROW));

        SanchayTableModel wordsForTagsTable = new SanchayTableModel(new String[]{"Tag", "Words"}, localCorpusStatistics.getWordFreq().size());

        LinkedHashMap<String, String> wordsForTags = new LinkedHashMap<String, String>();

        itr = localCorpusStatistics.getWordTagFreq().keySet().iterator();

        while(itr.hasNext())
        {
            String wrdTag = itr.next();

            String parts[] = wrdTag.split("/");

            if(parts.length == 2)
            {
                String wrd = parts[0];
                String tag = parts[1];

                String wrds = wordsForTags.get(tag);

                if(wrds == null)
                    wordsForTags.put(tag, wrd);
                else
                    wordsForTags.put(tag, wrds + ", " + wrd);
            }
        }

        SanchayTableModel.mapToTable(wordsForTags, wordsForTagsTable, false);
        wordsForTagsTable.trimRows(false);

        SanchayTableJPanel wordsForTagsTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(wordsForTagsTable, langEnc, true);
        localWordsForTagsJPanel.add(wordsForTagsTableJPanel, BorderLayout.CENTER);
        wordsForTagsTableJPanel.getJTable().setRowHeight(80);
        wordsForTagsTableJPanel.getJTable().setDefaultRenderer(String.class, new MultiLineCellRenderer(langEnc, 3, 100));
        wordsForTagsTableJPanel.getJTable().setDefaultEditor(String.class, new SanchayTableCellEditor(langEnc, SanchayTableCellEditor.MULTIPLE_ROW));

        SanchayTableModel chunksForRelsTable = new SanchayTableModel(new String[]{"Chunk", "Relation"}, 2);

        LinkedHashMap<String, String> chunksForRels = new LinkedHashMap<String, String>();

        itr = localCorpusStatistics.getChunkGRelFreq().keySet().iterator();

        while(itr.hasNext())
        {
            String chunkRel = itr.next();

            String parts[] = chunkRel.split("::");

            if(parts.length == 2)
            {
                String chunk = parts[0];
                String rel = parts[1];

                String chunks = chunksForRels.get(rel);

                if(chunks == null)
                    chunksForRels.put(rel, chunk);
                else
                    chunksForRels.put(rel, chunks + ", " + chunk);
            }
        }

        SanchayTableModel.mapToTable(chunksForRels, chunksForRelsTable, false);
        chunksForRelsTable.trimRows(false);

        SanchayTableJPanel chunksForRelsTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(chunksForRelsTable, langEnc, true);
        localChunksForRelsJPanel.add(chunksForRelsTableJPanel, BorderLayout.CENTER);
        chunksForRelsTableJPanel.getJTable().setRowHeight(80);
        chunksForRelsTableJPanel.getJTable().setDefaultRenderer(String.class, new MultiLineCellRenderer(langEnc, 3, 100));
        chunksForRelsTableJPanel.getJTable().setDefaultEditor(String.class, new SanchayTableCellEditor(langEnc, SanchayTableCellEditor.MULTIPLE_ROW));

        SanchayTableModel relsForChunksTable = new SanchayTableModel(new String[]{"Relation", "Chunk"}, 2);

        LinkedHashMap<String, String> relsForChunks = new LinkedHashMap<String, String>();

        itr = localCorpusStatistics.getChunkGRelFreq().keySet().iterator();

        while(itr.hasNext())
        {
            String chunkRel = itr.next();

            String parts[] = chunkRel.split("::");

            if(parts.length == 2)
            {
                String chunk = parts[0];
                String rel = parts[1];

                String rels = relsForChunks.get(rel);

                if(rels == null)
                    relsForChunks.put(chunk, rel);
                else
                    relsForChunks.put(chunk, rels + ", " + rel);
            }
        }

        SanchayTableModel.mapToTable(relsForChunks, relsForChunksTable, false);
        relsForChunksTable.trimRows(false);

        SanchayTableJPanel relsForChunksTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(relsForChunksTable, langEnc, true);
        localRelsForChunksJPanel.add(relsForChunksTableJPanel, BorderLayout.CENTER);
        relsForChunksTableJPanel.getJTable().setRowHeight(80);
        relsForChunksTableJPanel.getJTable().setDefaultRenderer(String.class, new MultiLineCellRenderer(langEnc, 3, 100));
        relsForChunksTableJPanel.getJTable().setDefaultEditor(String.class, new SanchayTableCellEditor(langEnc, SanchayTableCellEditor.MULTIPLE_ROW));
    }

    protected void loadGlobalStats(SSFStory localSSFStory)
    {
        if(localSSFStory == null)
            return;

        SanchayTableModel dataTable = new SanchayTableModel(new String[]{"Statistic", "Value"}, 16);

        dataTable.setValueAt("Number of paragraphs", 0, 0);
        dataTable.setValueAt(localSSFStory.countParagraph(), 0, 1);

        dataTable.setValueAt("Number of sentences", 1, 0);
        dataTable.setValueAt(localSSFStory.countSentences(), 1, 1);

        dataTable.setValueAt("Number of words", 2, 0);
        dataTable.setValueAt(localSSFStory.countWords(), 2, 1);

        dataTable.setValueAt("Number of chunks", 3, 0);
        dataTable.setValueAt(localSSFStory.countChunks(), 3, 1);

        dataTable.setValueAt("Number of characters", 4, 0);
        dataTable.setValueAt(localSSFStory.countCharacters(), 4, 1);

        dataTable.setValueAt("Number of POS tags", 5, 0);
        dataTable.setValueAt(globalCorpusStatistics.getPOSTagFreq().size(), 5, 1);

        dataTable.setValueAt("Number of word-tag pairs", 6, 0);
        dataTable.setValueAt(globalCorpusStatistics.getWordTagFreq().size(), 6, 1);

        dataTable.setValueAt("Number of chunk tags", 7, 0);
        dataTable.setValueAt(globalCorpusStatistics.getChunkTagFreq().size(), 7, 1);

        dataTable.setValueAt("Number of attributes", 8, 0);
        dataTable.setValueAt(localSSFStory.countAttributes(), 8, 1);

        dataTable.setValueAt("Number of attribute values", 9, 0);
        dataTable.setValueAt(localSSFStory.countAttributeValues(), 9, 1);

        dataTable.setValueAt("Number of attribute-value pairs", 10, 0);
        dataTable.setValueAt(localSSFStory.countAttributeValuePairs(), 10, 1);

        dataTable.setValueAt("Number of untagged words", 11, 0);
        dataTable.setValueAt(globalCorpusStatistics.getUnchunkedWordFreq().size(), 11, 1);

//        dataTable.setValueAt("Number of unchunked words", 11, ssfStory.countUnchunkedWords());
//
//        dataTable.setValueAt("Number of untagged chunks", 12, ssfStory.countUntaggedChunks());
//
//        dataTable.setValueAt("Number of words without morph info", 13, ssfStory.countWordsWithoutMorph());
//
//        dataTable.setValueAt("Number of chunks without morph info", 14, ssfStory.countChunksWithoutMorph());
//
//        dataTable.setValueAt("Number of dependency relations", 15, ssfStory.countDependencyRelations());

        SanchayTableJPanel dataTableJPanel = SanchayTableJPanel.createTableDisplayJPanel(dataTable, langEnc);

        globalGlobalStatsJPanel.add(dataTableJPanel, BorderLayout.CENTER);
    }

    protected void loadWordFreq()
    {
        if(ssfStory == null)
            return;

        SanchayTableModel dataTable = new SanchayTableModel(new String[]{"Statistic", "Value"}, 2);

    }

    protected void loadTagFreq()
    {

    }

    protected void loadWordTagPairFreq()
    {

    }

   public void setDialog(JDialog dialog)
   {
       this.dialog = dialog;
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsJPanel;
    private javax.swing.JComboBox cardJComboBox;
    private javax.swing.JLabel cardJLabel;
    private javax.swing.JPanel cardsJPanel;
    private javax.swing.JButton clearJButton;
    private javax.swing.JPanel commandsJPanel;
    private javax.swing.JPanel globalChunkGRelFreqJPanel;
    private javax.swing.JPanel globalChunkTagFreqJPanel;
    private javax.swing.JPanel globalChunksForRelsJPanel;
    private javax.swing.JPanel globalGRrelFreqJPanel;
    private javax.swing.JPanel globalGlobalStatsJPanel;
    private javax.swing.JPanel globalPOSTagFreqJPanel;
    private javax.swing.JPanel globalRelsForChunksJPanel;
    private javax.swing.JPanel globalStatsCardJPanel;
    private javax.swing.JTabbedPane globalStatsJTabbedPane;
    private javax.swing.JPanel globalTagsForWordsJPanel;
    private javax.swing.JPanel globalUnchunkedWordFreqJPanel;
    private javax.swing.JPanel globalWordFreqJPanel;
    private javax.swing.JPanel globalWordTagFreqJPanel;
    private javax.swing.JPanel globalWordsForTagsJPanel;
    private javax.swing.JPanel localChunkGRelFreqJPanel;
    private javax.swing.JPanel localChunkTagFreqJPanel;
    private javax.swing.JPanel localChunksForRelsJPanel;
    private javax.swing.JPanel localGRrelFreqJPanel;
    private javax.swing.JPanel localGlobalStatsJPanel;
    private javax.swing.JPanel localPOSTagFreqJPanel;
    private javax.swing.JPanel localRelsForChunksJPanel;
    private javax.swing.JPanel localStatsCardJPanel;
    private javax.swing.JPanel localTagsForWordsJPanel;
    private javax.swing.JPanel localUnchunkedWordFreqJPanel;
    private javax.swing.JPanel localWordFreqJPanel;
    private javax.swing.JPanel localWordTagFreqJPanel;
    private javax.swing.JPanel localWordsForTagsJPanel;
    private javax.swing.JPanel optionsJPanel;
    private javax.swing.JButton saveJButton;
    private javax.swing.JTabbedPane statsJTabbedPane1;
    // End of variables declaration//GEN-END:variables

}
