/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DictionaryEditorJPanel.java
 *
 * Created on Mar 27, 2009, 5:02:36 PM
 */

package sanchay.resources.shabdanjali;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JPopupMenu;
import javax.swing.JToolBar;
import sanchay.common.SanchayClientsStateData;
import sanchay.common.types.ClientType;
import sanchay.gui.common.JPanelDialog;
import sanchay.properties.KeyValueProperties;
import sanchay.gui.common.SanchayLanguages;

/**
 *
 * @author ambati
 */
public class DictionaryEditorJPanel extends javax.swing.JPanel
        implements WindowListener, JPanelDialog, sanchay.gui.clients.SanchayClient {

    protected ClientType clientType = ClientType.DICTIONARY_EDITOR;

    protected static KeyValueProperties stateKVProps;

    protected JFrame owner;
    protected JDialog dialog;
    protected Component parentComponent;

    protected String title = "";

    protected String srcLangEnc = "eng::utf8";
    protected String tgtLangEnc = "hin::utf8";

    protected String srcCharset = "UTF-8";
    protected String tgtCharset = "UTF-8";

    protected String srcFilePath = "data/parallel-corpus/eng-1.txt";
    protected String tgtFilePath = "data/parallel-corpus/hin-1.txt";

    protected String srcLangauge;
    protected String srcEncoding;

    protected String tgtLangauge;
    protected String tgtEncoding;

    protected DefaultComboBoxModel srcLangauges;
    protected DefaultComboBoxModel srcEncodings;

    protected DefaultComboBoxModel tgtLangauges;
    protected DefaultComboBoxModel tgtEncodings;

    protected String dictFilePath = "data/parallel-corpus/eng-1.txt";

    protected DefaultComboBoxModel langauges;
    protected DefaultComboBoxModel encodings;

    protected boolean langEncFilled;

    /** Creates new form DictionaryEditorJPanel */
    public DictionaryEditorJPanel() {
        initComponents();

        srcLangauges = new DefaultComboBoxModel();
        srcEncodings = new DefaultComboBoxModel();

        tgtLangauges = new DefaultComboBoxModel();
        tgtEncodings = new DefaultComboBoxModel();

        KeyValueProperties stateKVProps = SanchayClientsStateData.getSateData().getPropertiesValue(ClientType.SENTENCE_ALIGNMENT_INTERFACE.toString());

        if(stateKVProps.getPropertyValue("srcLangEnc") != null && stateKVProps.getPropertyValue("srcLangEnc").equals("") == false)
            srcLangEnc = stateKVProps.getPropertyValue("srcLangEnc");

        if(stateKVProps.getPropertyValue("tgtLangEnc") != null && stateKVProps.getPropertyValue("tgtLangEnc").equals("") == false)
            tgtLangEnc = stateKVProps.getPropertyValue("tgtLangEnc");

        srcLangauge = SanchayLanguages.getLanguageName(srcLangEnc);
        srcEncoding = SanchayLanguages.getEncodingName(srcLangEnc);

        SanchayLanguages.fillLanguages(srcLangauges);
        SanchayLanguages.fillEncodings(srcEncodings, SanchayLanguages.getLanguageCode(srcLangauge));

        srcLanguageJComboBox.setModel(srcLangauges);
        srcEncodingJComboBox.setModel(srcEncodings);

        srcLanguageJComboBox.setSelectedItem(srcLangauge);
        srcEncodingJComboBox.setSelectedItem(srcEncoding);

        tgtLangauge = SanchayLanguages.getLanguageName(tgtLangEnc);
        tgtEncoding = SanchayLanguages.getEncodingName(tgtLangEnc);

        SanchayLanguages.fillLanguages(tgtLangauges);
        SanchayLanguages.fillEncodings(tgtEncodings, SanchayLanguages.getLanguageCode(tgtLangauge));

        tgtLanguageJComboBox.setModel(tgtLangauges);
        tgtEncodingJComboBox.setModel(tgtEncodings);

        tgtLanguageJComboBox.setSelectedItem(tgtLangauge);
        tgtEncodingJComboBox.setSelectedItem(tgtEncoding);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iTextjLabel = new javax.swing.JLabel();
        ijTextField = new javax.swing.JTextField();
        inputJPanel = new javax.swing.JPanel();
        srcLangEncJPanel = new javax.swing.JPanel();
        srcLanguageJPanel = new javax.swing.JPanel();
        srcLanguageJLabel = new javax.swing.JLabel();
        srcLanguageJComboBox = new javax.swing.JComboBox();
        srcEncodingJPanel = new javax.swing.JPanel();
        srcEncodingJLabel = new javax.swing.JLabel();
        srcEncodingJComboBox = new javax.swing.JComboBox();
        tgtLangEncJPanel = new javax.swing.JPanel();
        tgtLanguageJPanel = new javax.swing.JPanel();
        tgtLanguageJLabel = new javax.swing.JLabel();
        tgtLanguageJComboBox = new javax.swing.JComboBox();
        tgtEncodingJPanel = new javax.swing.JPanel();
        tgtEncodingJLabel = new javax.swing.JLabel();
        tgtEncodingJComboBox = new javax.swing.JComboBox();
        iFilejPanel = new javax.swing.JPanel();
        iFileLabel = new javax.swing.JLabel();
        iFileTextField = new javax.swing.JTextField();
        iFleToggleButton = new javax.swing.JToggleButton();
        iCompileToggleButton = new javax.swing.JToggleButton();
        inputPanel = new javax.swing.JPanel();
        inputLabel = new javax.swing.JLabel();
        inputTextField = new javax.swing.JTextField();
        retriveButton = new javax.swing.JButton();
        outputjPanel = new javax.swing.JPanel();
        optionsjPanel = new javax.swing.JPanel();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        iTextjLabel.setText(bundle.getString("Enter_the_Word:")); // NOI18N

        setLayout(new java.awt.BorderLayout());

        inputJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        srcLangEncJPanel.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        srcLanguageJPanel.setLayout(new java.awt.BorderLayout());

        srcLanguageJLabel.setText("Source Language: ");
        srcLanguageJPanel.add(srcLanguageJLabel, java.awt.BorderLayout.WEST);

        srcLanguageJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srcLanguageJComboBoxActionPerformed(evt);
            }
        });
        srcLanguageJPanel.add(srcLanguageJComboBox, java.awt.BorderLayout.CENTER);

        srcLangEncJPanel.add(srcLanguageJPanel);

        srcEncodingJPanel.setLayout(new java.awt.BorderLayout());

        srcEncodingJLabel.setText("Source Encoding:  ");
        srcEncodingJPanel.add(srcEncodingJLabel, java.awt.BorderLayout.WEST);

        srcEncodingJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srcEncodingJComboBoxActionPerformed(evt);
            }
        });
        srcEncodingJPanel.add(srcEncodingJComboBox, java.awt.BorderLayout.CENTER);

        srcLangEncJPanel.add(srcEncodingJPanel);

        inputJPanel.add(srcLangEncJPanel);

        tgtLangEncJPanel.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        tgtLanguageJPanel.setLayout(new java.awt.BorderLayout());

        tgtLanguageJLabel.setText("Target Language: ");
        tgtLanguageJPanel.add(tgtLanguageJLabel, java.awt.BorderLayout.WEST);

        tgtLanguageJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tgtLanguageJComboBoxActionPerformed(evt);
            }
        });
        tgtLanguageJPanel.add(tgtLanguageJComboBox, java.awt.BorderLayout.CENTER);

        tgtLangEncJPanel.add(tgtLanguageJPanel);

        tgtEncodingJPanel.setLayout(new java.awt.BorderLayout());

        tgtEncodingJLabel.setText("Target Encoding:  ");
        tgtEncodingJPanel.add(tgtEncodingJLabel, java.awt.BorderLayout.WEST);

        tgtEncodingJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tgtEncodingJComboBoxActionPerformed(evt);
            }
        });
        tgtEncodingJPanel.add(tgtEncodingJComboBox, java.awt.BorderLayout.CENTER);

        tgtLangEncJPanel.add(tgtEncodingJPanel);

        inputJPanel.add(tgtLangEncJPanel);

        iFilejPanel.setLayout(new javax.swing.BoxLayout(iFilejPanel, javax.swing.BoxLayout.LINE_AXIS));

        iFileLabel.setText(bundle.getString("Dictionary_File:")); // NOI18N
        iFilejPanel.add(iFileLabel);

        iFileTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iFileTextFieldActionPerformed(evt);
            }
        });
        iFilejPanel.add(iFileTextField);

        iFleToggleButton.setText(bundle.getString("Browse")); // NOI18N
        iFleToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iFleToggleButtonActionPerformed(evt);
            }
        });
        iFilejPanel.add(iFleToggleButton);

        iCompileToggleButton.setText(bundle.getString("Compile")); // NOI18N
        iFilejPanel.add(iCompileToggleButton);

        inputJPanel.add(iFilejPanel);

        inputPanel.setLayout(new javax.swing.BoxLayout(inputPanel, javax.swing.BoxLayout.LINE_AXIS));

        inputLabel.setText(bundle.getString("Enter_the_Word")); // NOI18N
        inputPanel.add(inputLabel);

        inputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTextFieldActionPerformed(evt);
            }
        });
        inputPanel.add(inputTextField);

        retriveButton.setText(bundle.getString("Retrieve")); // NOI18N
        retriveButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                retriveButtonStateChanged(evt);
            }
        });
        inputPanel.add(retriveButton);

        inputJPanel.add(inputPanel);

        add(inputJPanel, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout outputjPanelLayout = new javax.swing.GroupLayout(outputjPanel);
        outputjPanel.setLayout(outputjPanelLayout);
        outputjPanelLayout.setHorizontalGroup(
            outputjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
        );
        outputjPanelLayout.setVerticalGroup(
            outputjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        add(outputjPanel, java.awt.BorderLayout.LINE_START);

        javax.swing.GroupLayout optionsjPanelLayout = new javax.swing.GroupLayout(optionsjPanel);
        optionsjPanel.setLayout(optionsjPanelLayout);
        optionsjPanelLayout.setHorizontalGroup(
            optionsjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 108, Short.MAX_VALUE)
        );
        optionsjPanelLayout.setVerticalGroup(
            optionsjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        add(optionsjPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void iFileTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iFileTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_iFileTextFieldActionPerformed

    private void inputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputTextFieldActionPerformed

    private void retriveButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_retriveButtonStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_retriveButtonStateChanged

    private void srcLanguageJComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_srcLanguageJComboBoxActionPerformed
    {//GEN-HEADEREND:event_srcLanguageJComboBoxActionPerformed
        // TODO add your handling code here:
        if(langEncFilled == false)
            return;

        srcLangauge = (String) srcLanguageJComboBox.getSelectedItem();
        SanchayLanguages.fillEncodings(srcEncodings, SanchayLanguages.getLanguageCode(srcLangauge));
        KeyValueProperties stateKVProps = SanchayClientsStateData.getSateData().getPropertiesValue(ClientType.DICTIONARY_EDITOR.toString());

        if(srcLangauge != null)
        {
            srcLangEnc = SanchayLanguages.getLangEncCode(srcLangauge, srcEncoding);
            stateKVProps.addProperty("srcLangEnc", srcLangEnc);

//            UtilityFunctions.setComponentFont(srcCellRenderer, srcLangEnc);
        }
}//GEN-LAST:event_srcLanguageJComboBoxActionPerformed

    private void srcEncodingJComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_srcEncodingJComboBoxActionPerformed
    {//GEN-HEADEREND:event_srcEncodingJComboBoxActionPerformed
        // TODO add your handling code here:
        if(langEncFilled == false)
            return;

        srcEncoding = (String) srcEncodingJComboBox.getSelectedItem();
        KeyValueProperties stateKVProps = SanchayClientsStateData.getSateData().getPropertiesValue(ClientType.SENTENCE_ALIGNMENT_INTERFACE.toString());

        if(srcEncoding != null)
        {
            srcLangEnc = SanchayLanguages.getLangEncCode(srcLangauge, srcEncoding);
            stateKVProps.addProperty("srcEangEnc", srcLangEnc);

//            UtilityFunctions.setComponentFont(srcCellRenderer, srcLangEnc);
        }
}//GEN-LAST:event_srcEncodingJComboBoxActionPerformed

    private void tgtLanguageJComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tgtLanguageJComboBoxActionPerformed
    {//GEN-HEADEREND:event_tgtLanguageJComboBoxActionPerformed
        // TODO add your handling code here:
        if(langEncFilled == false)
            return;

        tgtLangauge = (String) tgtLanguageJComboBox.getSelectedItem();
        SanchayLanguages.fillEncodings(tgtEncodings, SanchayLanguages.getLanguageCode(tgtLangauge));
        KeyValueProperties stateKVProps = SanchayClientsStateData.getSateData().getPropertiesValue(ClientType.SENTENCE_ALIGNMENT_INTERFACE.toString());

        if(tgtLangauge != null)
        {
            tgtLangEnc = SanchayLanguages.getLangEncCode(tgtLangauge, tgtEncoding);
            stateKVProps.addProperty("tgtLangEnc", tgtLangEnc);

//            UtilityFunctions.setComponentFont(tgtCellRenderer, tgtLangEnc);
        }
}//GEN-LAST:event_tgtLanguageJComboBoxActionPerformed

    private void tgtEncodingJComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tgtEncodingJComboBoxActionPerformed
    {//GEN-HEADEREND:event_tgtEncodingJComboBoxActionPerformed
        // TODO add your handling code here:
        if(langEncFilled == false)
            return;

        tgtEncoding = (String) tgtEncodingJComboBox.getSelectedItem();
        KeyValueProperties stateKVProps = SanchayClientsStateData.getSateData().getPropertiesValue(ClientType.SENTENCE_ALIGNMENT_INTERFACE.toString());

        if(tgtEncoding != null)
        {
            tgtLangEnc = SanchayLanguages.getLangEncCode(tgtLangauge, tgtEncoding);
            stateKVProps.addProperty("tgtLangEnc", tgtLangEnc);

//            UtilityFunctions.setComponentFont(tgtCellRenderer, tgtLangEnc);
        }
}//GEN-LAST:event_tgtEncodingJComboBoxActionPerformed

    private void iFleToggleButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_iFleToggleButtonActionPerformed
    {//GEN-HEADEREND:event_iFleToggleButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_iFleToggleButtonActionPerformed
    private static void saveState(DictionaryEditorJPanel editorInstance) {
        stateKVProps = SanchayClientsStateData.getSateData().getPropertiesValue(ClientType.DICTIONARY_EDITOR.toString());

        String currentDir = stateKVProps.getPropertyValue("CurrentDir");

        if(currentDir == null)
            currentDir = ".";

        File file = null;

        if(editorInstance.srcFilePath != null) {
            file = new File(editorInstance.srcFilePath);

            if(file.exists()) {
                currentDir = file.getParent();
            }
        }

        stateKVProps.addProperty("CurrentDir", currentDir);
        stateKVProps.addProperty("srcLangEnc", editorInstance.getSrcLangEnc());
        stateKVProps.addProperty("tgtLangEnc", editorInstance.getTgtLangEnc());

        SanchayClientsStateData.save();
    }

    private static void loadState(DictionaryEditorJPanel editorInstance) {
        stateKVProps = SanchayClientsStateData.getSateData().getPropertiesValue(ClientType.DICTIONARY_EDITOR.toString());

        String currentDir = stateKVProps.getPropertyValue("CurrentDir");

        String srcLangEnc = stateKVProps.getPropertyValue("srcLangEnc");
        String tgtLangEnc = stateKVProps.getPropertyValue("tgtLangEnc");

        if(srcLangEnc == null) {
            srcLangEnc = sanchay.GlobalProperties.getIntlString("eng::utf8");
            stateKVProps.addProperty("srcLangEnc", srcLangEnc);
        }

        if(tgtLangEnc == null) {
            tgtLangEnc = sanchay.GlobalProperties.getIntlString("hin::utf8");
            stateKVProps.addProperty("tgtLangEnc", tgtLangEnc);
        }
    }

    public ClientType getClientType()
    {
        return clientType;
    }

    public String getSrcLangEnc()
    {
        return srcLangEnc;
    }

    public String getTgtLangEnc()
    {
        return tgtLangEnc;
    }

    public String getLangEnc()
    {
        return srcLangEnc;
    }

    public Frame getOwner() {
        return owner;
    }

    public void setOwner(Frame frame) {
        owner = (JFrame) frame;
    }

    public void setParentComponent(Component parentComponent)
    {
        this.parentComponent = parentComponent;
    }

    public void setDialog(JDialog dialog) {
        this.dialog = dialog;
    }

    public String getTitle() {
        return title;
    }

    public JMenuBar getJMenuBar() {
        return null;
    }

    public JPopupMenu getJPopupMenu() {
        return null;
    }

    public JToolBar getJToolBar() {
        return null;
    }
    public void windowOpened(WindowEvent e) {
    }

    public void windowClosing(WindowEvent e) {
        saveState(this);
    }

    public void windowClosed(WindowEvent e) {
    }

    public void windowIconified(WindowEvent e) {
    }

    public void windowDeiconified(WindowEvent e) {
    }

    public void windowActivated(WindowEvent e) {
    }

    public void windowDeactivated(WindowEvent e) {
   }

    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);

        //Create and set up the window.
        JFrame frame = new JFrame("Sanchay Shell");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Create and set up the content pane.
    	DictionaryEditorJPanel newContentPane = new DictionaryEditorJPanel();
        newContentPane.setOwner(frame);

        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);

        //Display the window.
        frame.pack();

        int inset = 35;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setBounds(inset, inset,
		screenSize.width  - inset*2,
		screenSize.height - inset*5);

	frame.setVisible(true);

        newContentPane.requestFocusInWindow();
    }

    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton iCompileToggleButton;
    private javax.swing.JLabel iFileLabel;
    private javax.swing.JTextField iFileTextField;
    private javax.swing.JPanel iFilejPanel;
    private javax.swing.JToggleButton iFleToggleButton;
    private javax.swing.JLabel iTextjLabel;
    private javax.swing.JTextField ijTextField;
    private javax.swing.JPanel inputJPanel;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JPanel optionsjPanel;
    private javax.swing.JPanel outputjPanel;
    private javax.swing.JButton retriveButton;
    private javax.swing.JComboBox srcEncodingJComboBox;
    private javax.swing.JLabel srcEncodingJLabel;
    private javax.swing.JPanel srcEncodingJPanel;
    private javax.swing.JPanel srcLangEncJPanel;
    private javax.swing.JComboBox srcLanguageJComboBox;
    private javax.swing.JLabel srcLanguageJLabel;
    private javax.swing.JPanel srcLanguageJPanel;
    private javax.swing.JComboBox tgtEncodingJComboBox;
    private javax.swing.JLabel tgtEncodingJLabel;
    private javax.swing.JPanel tgtEncodingJPanel;
    private javax.swing.JPanel tgtLangEncJPanel;
    private javax.swing.JComboBox tgtLanguageJComboBox;
    private javax.swing.JLabel tgtLanguageJLabel;
    private javax.swing.JPanel tgtLanguageJPanel;
    // End of variables declaration//GEN-END:variables

}
