/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AutomaticAnnotationNewJPanel.java
 *
 * Created on 9 Jun, 2009, 1:52:34 PM
 */

package sanchay.annotation.common;

import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JToolBar;
import javax.swing.ListCellRenderer;
import sanchay.GlobalProperties;
import sanchay.annotation.DefaultAnnotationMain;
import sanchay.gui.clients.SanchayClient;
import sanchay.gui.common.DialogFactory;
import sanchay.gui.common.FileSelectionJPanel;
import sanchay.gui.common.SanchayJDialog;
import sanchay.gui.common.SanchayLanguages;
import sanchay.mlearning.common.MLCorpusConverter;
import sanchay.mlearning.crf.CRFAnnotationMain;
import sanchay.mlearning.maxent.MaxEntAnnotationMain;
import sanchay.mlearning.svm.SVMAnnotationMain;
import sanchay.mlearning.weka.WekaAnnotationMain;
import sanchay.common.types.ClientType;



/**
 *
 * @author Anil Kumar Singh
 */
public class AutomaticAnnotationJPanel extends javax.swing.JPanel
    implements SanchayClient , sanchay.gui.common.JPanelDialog {

    protected ClientType clientType = ClientType.AUTOMATIC_ANNOTATION;

    protected JFrame owner;
    protected JDialog dialog;
    protected Component parentComponent;

    protected DefaultAnnotationMain annotationMain;

    protected DefaultComboBoxModel languages;
    protected DefaultComboBoxModel encodings;
    protected DefaultComboBoxModel types;
    protected DefaultComboBoxModel methods;

    protected String language;
    protected String encoding;
    protected String charset = "UTF-8";

    protected String title = "";

    protected String trainingPath;
    protected String referencePath;
    protected String baseDir;

    protected boolean trainingMode = false;
    protected boolean loaded = false;

    protected DefaultListModel selectedFiles;

    protected int type;
    protected int method;

    /** Creates new form AutomaticAnnotationNewJPanel */
    public AutomaticAnnotationJPanel() {
        initComponents();

        parentComponent = this;

        languages = new DefaultComboBoxModel();
        encodings = new DefaultComboBoxModel();

        SanchayLanguages.fillLanguages(languages);
        SanchayLanguages.fillEncodings(encodings, "hin");

        languageJComboBox.setModel(languages);
        encodingJComboBox.setModel(encodings);

        languageJPanel.setVisible(false);
        languageJPanel.setVisible(true);

        encodingJPanel.setVisible(false);
        encodingJPanel.setVisible(true);

        String[] typeString = {GlobalProperties.getIntlString("Tagging"), GlobalProperties.getIntlString("Chunking"), GlobalProperties.getIntlString("Other_Sequence_Labeling")};

        types = new DefaultComboBoxModel();

        for (int i = 0; i < typeString.length; i++)
            types.addElement(typeString[i]);

        annotationTypeJComboBox.setModel(types);

        String[] methodString = {GlobalProperties.getIntlString("Support_Vector_Machines_(LibSVM)"), GlobalProperties.getIntlString("Conditional_Random_Fields_(IIT-B)"), GlobalProperties.getIntlString("Maximum_Entropy"), GlobalProperties.getIntlString("Weka_Classifiers")};

        methods = new DefaultComboBoxModel();

        for (int i = 0; i < methodString.length; i++)
            methods.addElement(methodString[i]);

        annotationMethodJComboBox.setModel(methods);

        init(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topJPanel = new javax.swing.JPanel();
        languageJPanel = new javax.swing.JPanel();
        languageJLabel = new javax.swing.JLabel();
        languageJComboBox = new javax.swing.JComboBox();
        encodingJPanel = new javax.swing.JPanel();
        encodingJLabel = new javax.swing.JLabel();
        encodingJComboBox = new javax.swing.JComboBox();
        annotationSettingJPanel = new javax.swing.JPanel();
        annotationTypeJLabel = new javax.swing.JLabel();
        annotationTypeJComboBox = new javax.swing.JComboBox();
        annotationMethodJPanel = new javax.swing.JPanel();
        annotationMethodJLabel = new javax.swing.JLabel();
        annotationMethodJComboBox = new javax.swing.JComboBox();
        mainJPanel = new javax.swing.JPanel();
        mainJSplitPane = new javax.swing.JSplitPane();
        mainLeftJPanel = new javax.swing.JPanel();
        pathsJPanel = new javax.swing.JPanel();
        trainingDataPathJPanel = new javax.swing.JPanel();
        leftTrainingDataPathJPanel = new javax.swing.JPanel();
        trainingModelPathJLabel = new javax.swing.JLabel();
        trainingDataModelJTextField = new javax.swing.JTextField();
        trainingDataModelJButton = new javax.swing.JButton();
        modeJButton = new javax.swing.JCheckBox();
        referenceDataPathJPanel = new javax.swing.JPanel();
        leftReferenceDataPathJPanel = new javax.swing.JPanel();
        referenceDataPathJLabel = new javax.swing.JLabel();
        referenceDataJTextField = new javax.swing.JTextField();
        referenceDataJButton = new javax.swing.JButton();
        sourcescrollJPane = new javax.swing.JScrollPane();
        sourceJList = new javax.swing.JList();
        mainRightJPanel = new javax.swing.JPanel();
        logJScrollPane = new javax.swing.JScrollPane();
        logJTextPane = new javax.swing.JTextPane();
        resultsTableJPanel = new javax.swing.JPanel();
        bottomJPanel = new javax.swing.JPanel();
        addSourcesJButton = new javax.swing.JButton();
        removeSourcesJButton = new javax.swing.JButton();
        loadJButton = new javax.swing.JButton();
        annotateJButton = new javax.swing.JButton();
        evaluateJButton = new javax.swing.JButton();
        resetJButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        topJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        languageJPanel.setLayout(new java.awt.BorderLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        languageJLabel.setText(bundle.getString("Language:_")); // NOI18N
        languageJLabel.setPreferredSize(new java.awt.Dimension(70, 15));
        languageJPanel.add(languageJLabel, java.awt.BorderLayout.WEST);

        languageJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageJComboBoxActionPerformed(evt);
            }
        });
        languageJPanel.add(languageJComboBox, java.awt.BorderLayout.CENTER);

        topJPanel.add(languageJPanel);

        encodingJPanel.setLayout(new java.awt.BorderLayout());

        encodingJLabel.setText(bundle.getString("Encoding:__")); // NOI18N
        encodingJLabel.setPreferredSize(new java.awt.Dimension(70, 15));
        encodingJPanel.add(encodingJLabel, java.awt.BorderLayout.WEST);

        encodingJPanel.add(encodingJComboBox, java.awt.BorderLayout.CENTER);

        topJPanel.add(encodingJPanel);

        annotationSettingJPanel.setLayout(new java.awt.BorderLayout());

        annotationTypeJLabel.setText(bundle.getString("Type_of_annotation:__")); // NOI18N
        annotationTypeJLabel.setPreferredSize(new java.awt.Dimension(135, 15));
        annotationSettingJPanel.add(annotationTypeJLabel, java.awt.BorderLayout.WEST);

        annotationTypeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotationTypeJComboBoxActionPerformed(evt);
            }
        });
        annotationSettingJPanel.add(annotationTypeJComboBox, java.awt.BorderLayout.CENTER);

        topJPanel.add(annotationSettingJPanel);

        annotationMethodJPanel.setLayout(new java.awt.BorderLayout());

        annotationMethodJLabel.setText(bundle.getString("Annotation_method:_")); // NOI18N
        annotationMethodJLabel.setPreferredSize(new java.awt.Dimension(135, 15));
        annotationMethodJPanel.add(annotationMethodJLabel, java.awt.BorderLayout.WEST);

        annotationMethodJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotationMethodJComboBoxActionPerformed(evt);
            }
        });
        annotationMethodJPanel.add(annotationMethodJComboBox, java.awt.BorderLayout.CENTER);

        topJPanel.add(annotationMethodJPanel);

        add(topJPanel, java.awt.BorderLayout.NORTH);

        mainJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected files"));
        mainJPanel.setLayout(new java.awt.BorderLayout());

        mainJSplitPane.setOneTouchExpandable(true);

        mainLeftJPanel.setLayout(new java.awt.BorderLayout());

        pathsJPanel.setLayout(new java.awt.GridLayout(0, 1, 4, 0));

        trainingDataPathJPanel.setLayout(new java.awt.BorderLayout(5, 0));

        leftTrainingDataPathJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        trainingModelPathJLabel.setText(bundle.getString("Path_for_the_training_model:")); // NOI18N
        trainingModelPathJLabel.setToolTipText(bundle.getString("Output_file_to_save_to.")); // NOI18N
        trainingModelPathJLabel.setPreferredSize(new java.awt.Dimension(177, 15));
        leftTrainingDataPathJPanel.add(trainingModelPathJLabel);

        trainingDataModelJTextField.setColumns(45);
        trainingDataModelJTextField.setToolTipText(bundle.getString("Dictionary_File")); // NOI18N
        trainingDataModelJTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        leftTrainingDataPathJPanel.add(trainingDataModelJTextField);

        trainingDataModelJButton.setText(bundle.getString("Browse")); // NOI18N
        trainingDataModelJButton.setToolTipText(bundle.getString("Browse_to_the_word_list_file_to_be_saved_to")); // NOI18N
        trainingDataModelJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainingDataModelJButtonActionPerformed(evt);
            }
        });
        leftTrainingDataPathJPanel.add(trainingDataModelJButton);

        modeJButton.setText(bundle.getString("Training_Mode")); // NOI18N
        modeJButton.setToolTipText(bundle.getString("Click_to_switch_between_training_and_testing_mode")); // NOI18N
        modeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeJButtonActionPerformed(evt);
            }
        });
        leftTrainingDataPathJPanel.add(modeJButton);

        trainingDataPathJPanel.add(leftTrainingDataPathJPanel, java.awt.BorderLayout.WEST);

        pathsJPanel.add(trainingDataPathJPanel);

        referenceDataPathJPanel.setLayout(new java.awt.BorderLayout(5, 0));

        leftReferenceDataPathJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        referenceDataPathJLabel.setText(bundle.getString("Path_for_the_reference_data:__")); // NOI18N
        referenceDataPathJLabel.setToolTipText(bundle.getString("The_reference_data_against_which_to_evaluate")); // NOI18N
        referenceDataPathJLabel.setPreferredSize(new java.awt.Dimension(177, 15));
        leftReferenceDataPathJPanel.add(referenceDataPathJLabel);

        referenceDataJTextField.setColumns(45);
        referenceDataJTextField.setToolTipText(bundle.getString("Dictionary_File")); // NOI18N
        referenceDataJTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        referenceDataJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                referenceDataJTextFieldActionPerformed(evt);
            }
        });
        leftReferenceDataPathJPanel.add(referenceDataJTextField);

        referenceDataJButton.setText(bundle.getString("Browse")); // NOI18N
        referenceDataJButton.setToolTipText(bundle.getString("Browse_to_the_reference_data_path")); // NOI18N
        referenceDataJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                referenceDataJButtonActionPerformed(evt);
            }
        });
        leftReferenceDataPathJPanel.add(referenceDataJButton);

        referenceDataPathJPanel.add(leftReferenceDataPathJPanel, java.awt.BorderLayout.WEST);

        pathsJPanel.add(referenceDataPathJPanel);

        mainLeftJPanel.add(pathsJPanel, java.awt.BorderLayout.PAGE_START);

        sourcescrollJPane.setViewportView(sourceJList);

        mainLeftJPanel.add(sourcescrollJPane, java.awt.BorderLayout.CENTER);

        mainJSplitPane.setLeftComponent(mainLeftJPanel);

        mainRightJPanel.setLayout(new java.awt.CardLayout());

        logJTextPane.setEditable(false);
        logJScrollPane.setViewportView(logJTextPane);

        mainRightJPanel.add(logJScrollPane, "card2");

        javax.swing.GroupLayout resultsTableJPanelLayout = new javax.swing.GroupLayout(resultsTableJPanel);
        resultsTableJPanel.setLayout(resultsTableJPanelLayout);
        resultsTableJPanelLayout.setHorizontalGroup(
            resultsTableJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 407, Short.MAX_VALUE)
        );
        resultsTableJPanelLayout.setVerticalGroup(
            resultsTableJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
        );

        mainRightJPanel.add(resultsTableJPanel, "card3");

        mainJSplitPane.setRightComponent(mainRightJPanel);

        mainJPanel.add(mainJSplitPane, java.awt.BorderLayout.CENTER);

        add(mainJPanel, java.awt.BorderLayout.CENTER);

        bottomJPanel.setLayout(new java.awt.GridLayout(1, 0, 4, 0));

        addSourcesJButton.setText(bundle.getString("Add_Files")); // NOI18N
        addSourcesJButton.setToolTipText(bundle.getString("Add_files_for_training_or_testing,_depending_on_the_mode_you_have_selected")); // NOI18N
        addSourcesJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSourcesJButtonActionPerformed(evt);
            }
        });
        bottomJPanel.add(addSourcesJButton);

        removeSourcesJButton.setText(bundle.getString("Remove_Files")); // NOI18N
        removeSourcesJButton.setToolTipText(bundle.getString("Remove_files_from_the_set_to_be_used_for_training_or_testing,_depending_on_the_mode_you_have_selected")); // NOI18N
        removeSourcesJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSourcesJButtonActionPerformed(evt);
            }
        });
        bottomJPanel.add(removeSourcesJButton);

        loadJButton.setText(bundle.getString("Load")); // NOI18N
        loadJButton.setToolTipText(bundle.getString("Load_the_already_trained_model")); // NOI18N
        loadJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadJButtonActionPerformed(evt);
            }
        });
        bottomJPanel.add(loadJButton);

        annotateJButton.setText(bundle.getString("Annotate")); // NOI18N
        annotateJButton.setToolTipText(bundle.getString("Automatically_annotate_the_selcted_files")); // NOI18N
        annotateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotateJButtonActionPerformed(evt);
            }
        });
        bottomJPanel.add(annotateJButton);

        evaluateJButton.setText(bundle.getString("Evaluate")); // NOI18N
        evaluateJButton.setToolTipText(bundle.getString("Evaluate_against_the_reference_data")); // NOI18N
        evaluateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluateJButtonActionPerformed(evt);
            }
        });
        bottomJPanel.add(evaluateJButton);

        resetJButton.setText(bundle.getString("Reset")); // NOI18N
        resetJButton.setToolTipText(bundle.getString("Reset_the_sources_to_start_again")); // NOI18N
        resetJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetJButtonActionPerformed(evt);
            }
        });
        bottomJPanel.add(resetJButton);

        add(bottomJPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void languageJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageJComboBoxActionPerformed
        // TODO add your handling code here:
        language = (String) languageJComboBox.getSelectedItem();
        SanchayLanguages.fillEncodings(encodings, SanchayLanguages.getLanguageCode(language));
}//GEN-LAST:event_languageJComboBoxActionPerformed

    private void annotationTypeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotationTypeJComboBoxActionPerformed
        // TODO add your handling code here:
        type = annotationTypeJComboBox.getSelectedIndex();

        if(type == MLCorpusConverter.TAG_FORMAT) {
            baseDir = GlobalProperties.resolveRelativePath("data/automatic-annotation/pos-tagging/learntModels");
            trainingDataModelJTextField.setText(baseDir);
        } else if(type == MLCorpusConverter.CHUNK_FORMAT) {
            baseDir = GlobalProperties.resolveRelativePath("data/automatic-annotation/chunking/learntModels");
            trainingDataModelJTextField.setText(baseDir);
        } else if(type == MLCorpusConverter.CHUNK_FEATURE_FORMAT) {
            baseDir = GlobalProperties.resolveRelativePath("data/automatic-annotation/ner/learntModels");
            trainingDataModelJTextField.setText(baseDir);
        }
}//GEN-LAST:event_annotationTypeJComboBoxActionPerformed

    private void trainingDataModelJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainingDataModelJButtonActionPerformed
        // TODO add your handling code here:
        String path = GlobalProperties.resolveRelativePath("data/automatic-annotation");

        if(trainingPath != null) {
            File tfile = new File(trainingPath);

            if(tfile.exists()) {
                path = tfile.getParentFile().getAbsolutePath();
            }
        }

        JFileChooser chooser = null;

        if(path != null)
            chooser = new JFileChooser(path);
        else
            chooser = new JFileChooser();

        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int returnVal = chooser.showSaveDialog(this);

        if(returnVal == JFileChooser.APPROVE_OPTION) {
            trainingPath = chooser.getSelectedFile().getAbsolutePath();
            trainingDataModelJTextField.setText(trainingPath);
        }
}//GEN-LAST:event_trainingDataModelJButtonActionPerformed

    private void modeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeJButtonActionPerformed
        // TODO add your handling code here:
        if(modeJButton.isSelected()) {
            trainingMode = true;
            annotateJButton.setText(GlobalProperties.getIntlString("Train"));
        } else {
            trainingMode = false;
            annotateJButton.setText(GlobalProperties.getIntlString("Annotate"));
        }
}//GEN-LAST:event_modeJButtonActionPerformed

    private void addSourcesJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSourcesJButtonActionPerformed
        // TODO add your handling code here:
        File[] newSourceList = getSelectedFiles();

        for (int i = 0; i < newSourceList.length; i++) {
            selectedFiles.addElement(newSourceList[i]);
        }
}//GEN-LAST:event_addSourcesJButtonActionPerformed

    private void removeSourcesJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSourcesJButtonActionPerformed
        // TODO add your handling code here:
        int selIndices[] = sourceJList.getSelectedIndices();

        for (int i = 0; i < selIndices.length; i++) {
            selectedFiles.removeElementAt(selIndices[i] - i);
        }
}//GEN-LAST:event_removeSourcesJButtonActionPerformed

    private void loadJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadJButtonActionPerformed
        // TODO add your handling code here:
        Cursor cursor = owner.getCursor();
        owner.setCursor(Cursor.WAIT_CURSOR);
        init(true);

        type = annotationTypeJComboBox.getSelectedIndex();

        baseDir = trainingDataModelJTextField.getText();

        if(baseDir == null || baseDir.equals("") || (new File(baseDir)).exists() == false) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Path_given_for_the_training_model_doesn't_exist"), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            owner.setCursor(cursor);
            return;
        }

        annotationMain.setFormatType(type);

        annotationMain.setCharset(charset);
        annotationMain.setLabelFeature("ne");

        annotationMain.setBaseDir(baseDir);

        try {
            annotationMain.load();
            loaded = true;
        } catch (Exception ex) {
            owner.setCursor(cursor);
            Logger.getLogger(AutomaticAnnotationJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        owner.setCursor(cursor);

}//GEN-LAST:event_loadJButtonActionPerformed

        private void annotateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotateJButtonActionPerformed
            // TODO add your handling code here:
            Cursor cursor = owner.getCursor();
            owner.setCursor(Cursor.WAIT_CURSOR);

            if((trainingMode = modeJButton.isSelected()))
                init(false);
            else {
                if(loaded == false) {
                    JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Please_either_load_a_trained_model_or_train_a_new_model."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                    owner.setCursor(cursor);
                    return;
                }
            }

            language = (String) languageJComboBox.getSelectedItem();
            encoding = (String) encodingJComboBox.getSelectedItem();
            type = annotationTypeJComboBox.getSelectedIndex();

            baseDir = trainingDataModelJTextField.getText();

            if(baseDir == null || baseDir.equals("") || (new File(baseDir)).exists() == false) {
                JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Path_given_for_the_training_model_doesn't_exist."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                owner.setCursor(cursor);
                return;
            }

            annotationMain.setFormatType(type);

            annotationMain.setCharset(charset);
            annotationMain.setLabelFeature("ne");

            int fcount = selectedFiles.size();

            File files[] = new File[fcount];

            for (int i = 0; i < files.length; i++) {
                files[i] = (File) selectedFiles.get(i);
            }

            if(trainingMode)
                annotationMain.setTrainDataPaths(files);

            //        annotationMain.setTrainDataPath(trainingPath);
            annotationMain.setBaseDir(baseDir);
            annotationMain.setMLTrainPath(baseDir + "/" + "ml-train.txt");
            annotationMain.setMLTestPath(baseDir + "/" + "ml-test.txt");
            annotationMain.setMLTaggedPath(baseDir + "/" + "ml-tagged.txt");

            if(trainingMode) {
                annotationMain.train();
                loaded = true;
            } else {
                for (int i = 0; i < files.length; i++) {
                    annotationMain.setTestDataPath(files[i].getAbsolutePath());
                    annotationMain.setTaggedDataPath(files[i].getAbsolutePath() + "-ml-tagged.txt");
                    annotationMain.test();
                }

                JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("The_files_selected_by_you_have_been_annotated.\n")
                        + GlobalProperties.getIntlString("The_output_has_been_stored_in_the_same_location\n")
                        + GlobalProperties.getIntlString("as_the_unannotated_files_and_with_the_same_initial\n")
                        + GlobalProperties.getIntlString("name_but_with_the_extension_\'.out.txt\'."), GlobalProperties.getIntlString("Annotation_Completed"), JOptionPane.INFORMATION_MESSAGE);
            }

            owner.setCursor(cursor);
}//GEN-LAST:event_annotateJButtonActionPerformed

        private void resetJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetJButtonActionPerformed
            // TODO add your handling code here:
            init(true);
}//GEN-LAST:event_resetJButtonActionPerformed

        private void evaluateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluateJButtonActionPerformed
            // TODO add your handling code here:
        }//GEN-LAST:event_evaluateJButtonActionPerformed

        private void referenceDataJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referenceDataJButtonActionPerformed
            // TODO add your handling code here:
            String path = GlobalProperties.resolveRelativePath("data/automatic-annotation");

            if(referencePath != null) {
                File rfile = new File(referencePath);

                if(rfile.exists()) {
                    path = rfile.getParentFile().getAbsolutePath();
                }
            }

            JFileChooser chooser = null;

            if(path != null)
                chooser = new JFileChooser(path);
            else
                chooser = new JFileChooser();

            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            int returnVal = chooser.showSaveDialog(this);

            if(returnVal == JFileChooser.APPROVE_OPTION) {
                referencePath = chooser.getSelectedFile().getAbsolutePath();
                referenceDataJTextField.setText(referencePath);
            }
}//GEN-LAST:event_referenceDataJButtonActionPerformed

        private void referenceDataJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referenceDataJTextFieldActionPerformed
            // TODO add your handling code here:
        }//GEN-LAST:event_referenceDataJTextFieldActionPerformed

        private void annotationMethodJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotationMethodJComboBoxActionPerformed
            // TODO add your handling code here:
}//GEN-LAST:event_annotationMethodJComboBoxActionPerformed


    private void init(boolean clearFiles)
    {
        loaded = false;

        if(annotationTypeJComboBox == null || annotationTypeJComboBox.getSelectedIndex() <= 0)
            annotationMain = new SVMAnnotationMain(type);
        else if(annotationTypeJComboBox.getSelectedIndex() == 1)
            annotationMain = new CRFAnnotationMain(type);
        else if(annotationTypeJComboBox.getSelectedIndex() == 2)
            annotationMain = new MaxEntAnnotationMain(type);
        else if(annotationTypeJComboBox.getSelectedIndex() == 3)
            annotationMain = new WekaAnnotationMain(type);

        if(clearFiles)
        {
            selectedFiles = new DefaultListModel();
            sourceJList.setModel(selectedFiles);
            sourceJList.setCellRenderer(new FileListCellRenderer());
        }

        if(annotationTypeJComboBox.getSelectedIndex() == -1 || annotationTypeJComboBox.getSelectedItem() == null)
            annotationTypeJComboBox.setSelectedIndex(0);

        if(annotationMethodJComboBox.getSelectedIndex() == -1 || annotationMethodJComboBox.getSelectedItem() == null)
            annotationMethodJComboBox.setSelectedIndex(0);
   }

    private File[] getSelectedFiles()
    {
        SanchayJDialog fsDialog = (SanchayJDialog) DialogFactory.showDialog(FileSelectionJPanel.class, owner, GlobalProperties.getIntlString("Select_Files"), true);

        FileSelectionJPanel fsPanel = (FileSelectionJPanel) fsDialog.getJPanel();

        return fsPanel.getSelectedFilesExt();
    }

    public ClientType getClientType()
    {
        return clientType;
    }

    public String getLangEnc()
    {
        return SanchayLanguages.getLangEncCode(language, encoding);
    }

    public Frame getOwner() {
        return owner;
    }

    public void setOwner(Frame f) {
        owner = (JFrame) f;
    }

    public void setParentComponent(Component parentComponent)
    {
        this.parentComponent = parentComponent;
    }

    public void setDialog(JDialog d) {
        dialog = d;
    }

    public String getTitle() {
        return title;
    }

    public JMenuBar getJMenuBar() {
        return null;
    }

    public JToolBar getJToolBar() {
        return null;
    }

    public JPopupMenu getJPopupMenu()
    {
        return null;
    }

    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);

        //Create and set up the window.
        JFrame frame = new JFrame(GlobalProperties.getIntlString("Automatic_Annotation"));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Create and set up the content pane.
	AutomaticAnnotationJPanel newContentPane = new AutomaticAnnotationJPanel();
        newContentPane.setOwner(frame);

        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);

        //Display the window.
        frame.pack();

        int inset = 35;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setBounds(inset, inset,
		screenSize.width  - inset*2,
		screenSize.height - inset*5);

	frame.setVisible(true);

        newContentPane.requestFocusInWindow();
    }

    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSourcesJButton;
    private javax.swing.JButton annotateJButton;
    private javax.swing.JComboBox annotationMethodJComboBox;
    private javax.swing.JLabel annotationMethodJLabel;
    private javax.swing.JPanel annotationMethodJPanel;
    private javax.swing.JPanel annotationSettingJPanel;
    private javax.swing.JComboBox annotationTypeJComboBox;
    private javax.swing.JLabel annotationTypeJLabel;
    private javax.swing.JPanel bottomJPanel;
    private javax.swing.JComboBox encodingJComboBox;
    private javax.swing.JLabel encodingJLabel;
    private javax.swing.JPanel encodingJPanel;
    private javax.swing.JButton evaluateJButton;
    private javax.swing.JComboBox languageJComboBox;
    private javax.swing.JLabel languageJLabel;
    private javax.swing.JPanel languageJPanel;
    private javax.swing.JPanel leftReferenceDataPathJPanel;
    private javax.swing.JPanel leftTrainingDataPathJPanel;
    private javax.swing.JButton loadJButton;
    private javax.swing.JScrollPane logJScrollPane;
    private javax.swing.JTextPane logJTextPane;
    private javax.swing.JPanel mainJPanel;
    private javax.swing.JSplitPane mainJSplitPane;
    private javax.swing.JPanel mainLeftJPanel;
    private javax.swing.JPanel mainRightJPanel;
    private javax.swing.JCheckBox modeJButton;
    private javax.swing.JPanel pathsJPanel;
    private javax.swing.JButton referenceDataJButton;
    private javax.swing.JTextField referenceDataJTextField;
    private javax.swing.JLabel referenceDataPathJLabel;
    private javax.swing.JPanel referenceDataPathJPanel;
    private javax.swing.JButton removeSourcesJButton;
    private javax.swing.JButton resetJButton;
    private javax.swing.JPanel resultsTableJPanel;
    private javax.swing.JList sourceJList;
    private javax.swing.JScrollPane sourcescrollJPane;
    private javax.swing.JPanel topJPanel;
    private javax.swing.JButton trainingDataModelJButton;
    private javax.swing.JTextField trainingDataModelJTextField;
    private javax.swing.JPanel trainingDataPathJPanel;
    private javax.swing.JLabel trainingModelPathJLabel;
    // End of variables declaration//GEN-END:variables

}

class FileListCellRenderer extends JLabel implements ListCellRenderer {
    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N

    public FileListCellRenderer()
    {
         super();

         setOpaque(true);
    }

    public Component getListCellRendererComponent
        (
             JList list,
             Object value,
             int index,
             boolean isSelected,
             boolean cellHasFocus
        )
    {
        this.setBackground(isSelected ? list.getSelectionBackground() : list.getBackground());
        this.setForeground(isSelected ? list.getSelectionForeground() : list.getForeground());

        File srcFile = (File) value;

        this.setText(srcFile.getAbsolutePath());

        return this;
     }
}