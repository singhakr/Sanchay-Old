/*
 * FileSplitterJPanel1.java
 *
 * Created on February 14, 2006, 10:55 PM
 */

package sanchay.util.gui;

import java.io.*;
import java.awt.*;
import java.util.*;
import javax.swing.*;
import sanchay.GlobalProperties;
import sanchay.common.types.ClientType;
import sanchay.common.types.CorpusType;
import sanchay.corpus.ssf.SSFCorpus;
import sanchay.corpus.ssf.gui.SSFAnnotationLevelsJPanel;

import sanchay.util.*;

/**
 *
 * @author  anil
 */
public class FileSplitterJPanel extends javax.swing.JPanel implements sanchay.gui.common.JPanelDialog, sanchay.gui.clients.SanchayClient {

    protected ClientType clientType = ClientType.FILE_SPLITTER;

    protected JFrame owner;
    protected JDialog dialog;
    protected Component parentComponent;

    protected FileSplittingOptions fileSplittingOptions;
    
    protected String langEnc;
    protected String title = "";
    
    protected DefaultComboBoxModel readCorpusTypes;
    protected DefaultComboBoxModel writeCorpusTypes;
    
    /** Creates new form FileSplitterJPanel */
    public FileSplitterJPanel() {
        fileSplittingOptions = new FileSplittingOptions();
        
        initComponents();

        parentComponent = this;
        
        configure();
        setDefaults();
    }

    public ClientType getClientType()
    {
        return clientType;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        corpusTypeJPanel = new javax.swing.JPanel();
        corpusTypeLeftJPanel = new javax.swing.JPanel();
        readAsJLabel = new javax.swing.JLabel();
        saveAsJLabel = new javax.swing.JLabel();
        corpusTypeRightJPanel = new javax.swing.JPanel();
        readAsJComboBox = new javax.swing.JComboBox();
        saveAsJComboBox = new javax.swing.JComboBox();
        ioJPanel = new javax.swing.JPanel();
        inDirJPanel = new javax.swing.JPanel();
        inDirJLabel = new javax.swing.JLabel();
        inDirJTextField = new javax.swing.JTextField();
        inDirJButton = new javax.swing.JButton();
        outDirJPanel = new javax.swing.JPanel();
        outDirJLabel = new javax.swing.JLabel();
        outDirJTextField = new javax.swing.JTextField();
        outDirJButton = new javax.swing.JButton();
        optionsJPanel = new javax.swing.JPanel();
        optionLeftJPanel = new javax.swing.JPanel();
        unitJLabel = new javax.swing.JLabel();
        charsetJLabel = new javax.swing.JLabel();
        splitSizeJLabel = new javax.swing.JLabel();
        maxSizeJLabel = new javax.swing.JLabel();
        optionRightJPanel = new javax.swing.JPanel();
        unitJComboBox = new javax.swing.JComboBox();
        charsetJTextField = new javax.swing.JTextField();
        splitSizeJTextField = new javax.swing.JTextField();
        maxSizeJTextField = new javax.swing.JTextField();
        booleanOptionsJPanelJPanel = new javax.swing.JPanel();
        otherCommonOptionsJPanel = new javax.swing.JPanel();
        allowLastSmallerJCheckBox = new javax.swing.JCheckBox();
        cleanBeforeJCheckBox = new javax.swing.JCheckBox();
        recreateDirStrJCheckBox = new javax.swing.JCheckBox();
        exactSizeJCheckBox = new javax.swing.JCheckBox();
        sizePerDirJCheckBox = new javax.swing.JCheckBox();
        someSpecialOptionsJPanel = new javax.swing.JPanel();
        reallocateStoryIDsJCheckBox = new javax.swing.JCheckBox();
        reallocateSenIDsJCheckBox = new javax.swing.JCheckBox();
        reallocateNodeIDsJCheckBox = new javax.swing.JCheckBox();
        clearAnnotationJCheckBox = new javax.swing.JCheckBox();
        commandsJPanel = new javax.swing.JPanel();
        defaultsJButton = new javax.swing.JButton();
        splitJButton = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        corpusTypeJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Corpus Type"));
        corpusTypeJPanel.setLayout(new java.awt.BorderLayout());

        corpusTypeLeftJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        readAsJLabel.setLabelFor(readAsJComboBox);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        readAsJLabel.setText(bundle.getString("Read_as:_")); // NOI18N
        corpusTypeLeftJPanel.add(readAsJLabel);

        saveAsJLabel.setLabelFor(saveAsJComboBox);
        saveAsJLabel.setText(bundle.getString("Save_as:_")); // NOI18N
        corpusTypeLeftJPanel.add(saveAsJLabel);

        corpusTypeJPanel.add(corpusTypeLeftJPanel, java.awt.BorderLayout.WEST);

        corpusTypeRightJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        readAsJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readAsJComboBoxActionPerformed(evt);
            }
        });
        corpusTypeRightJPanel.add(readAsJComboBox);

        saveAsJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsJComboBoxActionPerformed(evt);
            }
        });
        corpusTypeRightJPanel.add(saveAsJComboBox);

        corpusTypeJPanel.add(corpusTypeRightJPanel, java.awt.BorderLayout.CENTER);

        add(corpusTypeJPanel);

        ioJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("I/O"));
        ioJPanel.setLayout(new javax.swing.BoxLayout(ioJPanel, javax.swing.BoxLayout.Y_AXIS));

        inDirJPanel.setLayout(new java.awt.BorderLayout());

        inDirJLabel.setLabelFor(inDirJTextField);
        inDirJLabel.setText(bundle.getString("Input_directory:")); // NOI18N
        inDirJPanel.add(inDirJLabel, java.awt.BorderLayout.NORTH);
        inDirJPanel.add(inDirJTextField, java.awt.BorderLayout.CENTER);

        inDirJButton.setText(bundle.getString("Browse")); // NOI18N
        inDirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inDirJButtonActionPerformed(evt);
            }
        });
        inDirJPanel.add(inDirJButton, java.awt.BorderLayout.EAST);

        ioJPanel.add(inDirJPanel);

        outDirJPanel.setLayout(new java.awt.BorderLayout());

        outDirJLabel.setLabelFor(outDirJTextField);
        outDirJLabel.setText(bundle.getString("Output_directory:")); // NOI18N
        outDirJPanel.add(outDirJLabel, java.awt.BorderLayout.NORTH);
        outDirJPanel.add(outDirJTextField, java.awt.BorderLayout.CENTER);

        outDirJButton.setText(bundle.getString("Browse")); // NOI18N
        outDirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outDirJButtonActionPerformed(evt);
            }
        });
        outDirJPanel.add(outDirJButton, java.awt.BorderLayout.EAST);

        ioJPanel.add(outDirJPanel);

        add(ioJPanel);

        optionsJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Spliting Options"));
        optionsJPanel.setLayout(new java.awt.BorderLayout());

        optionLeftJPanel.setLayout(new java.awt.GridLayout(0, 1));

        unitJLabel.setText(bundle.getString("Split_size_unit:_")); // NOI18N
        optionLeftJPanel.add(unitJLabel);

        charsetJLabel.setText(bundle.getString("Charset_or_encoding:_")); // NOI18N
        optionLeftJPanel.add(charsetJLabel);

        splitSizeJLabel.setText(bundle.getString("Split_size:_")); // NOI18N
        optionLeftJPanel.add(splitSizeJLabel);

        maxSizeJLabel.setText(bundle.getString("Total_size_of_split_files:_")); // NOI18N
        optionLeftJPanel.add(maxSizeJLabel);

        optionsJPanel.add(optionLeftJPanel, java.awt.BorderLayout.WEST);

        optionRightJPanel.setLayout(new java.awt.GridLayout(0, 1));

        unitJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Word", "Sentence", "Character", "Paragraph" }));
        optionRightJPanel.add(unitJComboBox);

        charsetJTextField.setText(bundle.getString("UTF8")); // NOI18N
        optionRightJPanel.add(charsetJTextField);
        optionRightJPanel.add(splitSizeJTextField);
        optionRightJPanel.add(maxSizeJTextField);

        optionsJPanel.add(optionRightJPanel, java.awt.BorderLayout.CENTER);

        add(optionsJPanel);

        booleanOptionsJPanelJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Some Other Options"));
        booleanOptionsJPanelJPanel.setLayout(new java.awt.GridLayout(1, 0));

        otherCommonOptionsJPanel.setLayout(new java.awt.GridLayout(5, 1, 0, 4));

        allowLastSmallerJCheckBox.setText(bundle.getString("Allow_the_last_part_to_be_smaller")); // NOI18N
        allowLastSmallerJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        allowLastSmallerJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        otherCommonOptionsJPanel.add(allowLastSmallerJCheckBox);

        cleanBeforeJCheckBox.setSelected(true);
        cleanBeforeJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cleanBeforeJCheckBox.setLabel(bundle.getString("Clean_output_directory_before_starting")); // NOI18N
        cleanBeforeJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        otherCommonOptionsJPanel.add(cleanBeforeJCheckBox);

        recreateDirStrJCheckBox.setText(bundle.getString("Recreate_directory_structure")); // NOI18N
        recreateDirStrJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        recreateDirStrJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        otherCommonOptionsJPanel.add(recreateDirStrJCheckBox);

        exactSizeJCheckBox.setText(bundle.getString("Exact_size")); // NOI18N
        exactSizeJCheckBox.setToolTipText(bundle.getString("Exact_size_(break_in_the_middle_of_a_line)")); // NOI18N
        exactSizeJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        exactSizeJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        otherCommonOptionsJPanel.add(exactSizeJCheckBox);

        sizePerDirJCheckBox.setText(bundle.getString("Split_size_per_directory")); // NOI18N
        sizePerDirJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        sizePerDirJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        otherCommonOptionsJPanel.add(sizePerDirJCheckBox);

        booleanOptionsJPanelJPanel.add(otherCommonOptionsJPanel);

        someSpecialOptionsJPanel.setLayout(new java.awt.GridLayout(5, 1, 0, 4));

        reallocateStoryIDsJCheckBox.setSelected(true);
        reallocateStoryIDsJCheckBox.setText(bundle.getString("Reallocate_story_IDs")); // NOI18N
        reallocateStoryIDsJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        reallocateStoryIDsJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        someSpecialOptionsJPanel.add(reallocateStoryIDsJCheckBox);

        reallocateSenIDsJCheckBox.setSelected(true);
        reallocateSenIDsJCheckBox.setText(bundle.getString("Reallocate_sentence_IDs")); // NOI18N
        reallocateSenIDsJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        reallocateSenIDsJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        someSpecialOptionsJPanel.add(reallocateSenIDsJCheckBox);

        reallocateNodeIDsJCheckBox.setSelected(true);
        reallocateNodeIDsJCheckBox.setText(bundle.getString("Reallocate_node_IDs")); // NOI18N
        reallocateNodeIDsJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        reallocateNodeIDsJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        someSpecialOptionsJPanel.add(reallocateNodeIDsJCheckBox);

        clearAnnotationJCheckBox.setText(bundle.getString("Clear_feature_structures")); // NOI18N
        clearAnnotationJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        clearAnnotationJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        clearAnnotationJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAnnotationJCheckBoxActionPerformed(evt);
            }
        });
        someSpecialOptionsJPanel.add(clearAnnotationJCheckBox);

        booleanOptionsJPanelJPanel.add(someSpecialOptionsJPanel);

        add(booleanOptionsJPanelJPanel);

        commandsJPanel.setLayout(new java.awt.GridLayout(1, 0, 4, 4));

        defaultsJButton.setText(bundle.getString("Defaults")); // NOI18N
        defaultsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultsJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(defaultsJButton);

        splitJButton.setText(bundle.getString("Split")); // NOI18N
        splitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(splitJButton);

        add(commandsJPanel);
    }// </editor-fold>//GEN-END:initComponents
    
    private void clearAnnotationJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAnnotationJCheckBoxActionPerformed
// TODO add your handling code here:
        int ret = JOptionPane.showConfirmDialog(parentComponent, GlobalProperties.getIntlString("Are_you_sure_you_want_to_clear_some_annotation_in_all_the_files?"), GlobalProperties.getIntlString("Clear_Annotation"), JOptionPane.YES_NO_OPTION);
        
        if(ret == JOptionPane.NO_OPTION)
            return;
        
        JDialog alDialog = SSFAnnotationLevelsJPanel.showDialog((Frame) getTopLevelAncestor(), GlobalProperties.getIntlString("SSF_Annotation_Levels"), true);
        
        fileSplittingOptions.clearAnnotationLevelsFlag = ((SSFAnnotationLevelsJPanel.LocalDialog) alDialog).getAnnotationLevelsFlag();
    }//GEN-LAST:event_clearAnnotationJCheckBoxActionPerformed
    
    private void saveAsJComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveAsJComboBoxActionPerformed
    {//GEN-HEADEREND:event_saveAsJComboBoxActionPerformed
// TODO add your handling code here:
        String selWriteCorpusType = (String) saveAsJComboBox.getSelectedItem();
        fileSplittingOptions.writeCorpusType = (CorpusType) CorpusType.findFromId(selWriteCorpusType);
        
        if(fileSplittingOptions.writeCorpusType == CorpusType.XML_FORMAT) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Saving_as_") + fileSplittingOptions.writeCorpusType + GlobalProperties.getIntlString("_corpus_is_not_yet_supported._Hope_it_will_be_done_soon."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            saveAsJComboBox.setSelectedItem(CorpusType.RAW.toString());
            return;
        }
    }//GEN-LAST:event_saveAsJComboBoxActionPerformed
    
    private void readAsJComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_readAsJComboBoxActionPerformed
    {//GEN-HEADEREND:event_readAsJComboBoxActionPerformed
// TODO add your handling code here:
        String selReadCorpusType = (String) readAsJComboBox.getSelectedItem();
        fileSplittingOptions.readCorpusType = (CorpusType) CorpusType.findFromId(selReadCorpusType);
        
        if(fileSplittingOptions.readCorpusType == CorpusType.XML_FORMAT) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Reading_as_") + fileSplittingOptions.readCorpusType.toString() + GlobalProperties.getIntlString("_corpus_is_not_yet_supported._Hope_it_will_be_done_soon."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            readAsJComboBox.setSelectedItem(CorpusType.RAW.toString());
            
            return;
        }
        
        if(fileSplittingOptions.readCorpusType == CorpusType.RAW)
            exactSizeJCheckBox.setVisible(true);
        else
            exactSizeJCheckBox.setVisible(false);
        
        if(fileSplittingOptions.readCorpusType == CorpusType.SSF_FORMAT)
            someSpecialOptionsJPanel.setVisible(true);
        else
            someSpecialOptionsJPanel.setVisible(false);
    }//GEN-LAST:event_readAsJComboBoxActionPerformed
    
    private void splitJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_splitJButtonActionPerformed
    {//GEN-HEADEREND:event_splitJButtonActionPerformed
// TODO add your handling code here:
        Cursor cursor = getParent().getCursor();
        getParent().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        if(validateSplitSpec() == true) {
            try {
                FileSplitter fileSplitter = new FileSplitter(fileSplittingOptions);
                
                fileSplitter.splitFilesBatch();
                fileSplitter.cleanup();
                
                JOptionPane.showInternalMessageDialog(parentComponent, GlobalProperties.getIntlString("Splitting_has_been_completed._Please_check\nthe_output_in_the_directory_you_specified."),
                        GlobalProperties.getIntlString("Splitting_Completed"), JOptionPane.INFORMATION_MESSAGE);
                
            } catch (FileNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        
        getParent().setCursor(cursor);
    }//GEN-LAST:event_splitJButtonActionPerformed
    
    private void defaultsJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_defaultsJButtonActionPerformed
    {//GEN-HEADEREND:event_defaultsJButtonActionPerformed
// TODO add your handling code here:
        setDefaults();
    }//GEN-LAST:event_defaultsJButtonActionPerformed
    
    private void outDirJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_outDirJButtonActionPerformed
    {//GEN-HEADEREND:event_outDirJButtonActionPerformed
// TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(fileSplittingOptions.outDirectory);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File selFile = chooser.getSelectedFile();
            outDirJTextField.setText(selFile.getAbsolutePath());
        }
    }//GEN-LAST:event_outDirJButtonActionPerformed
    
    private void inDirJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_inDirJButtonActionPerformed
    {//GEN-HEADEREND:event_inDirJButtonActionPerformed
// TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(fileSplittingOptions.inDirectory);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = chooser.showOpenDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File selFile = chooser.getSelectedFile();
            inDirJTextField.setText(selFile.getAbsolutePath());
        }
    }//GEN-LAST:event_inDirJButtonActionPerformed
    
    public void configure() {
        if(readCorpusTypes != null)
            readCorpusTypes.removeAllElements();
        
        if(writeCorpusTypes != null)
            writeCorpusTypes.removeAllElements();
        
        readCorpusTypes = new DefaultComboBoxModel();
        writeCorpusTypes = new DefaultComboBoxModel();
        
        Enumeration enm = CorpusType.elements();
        while(enm.hasMoreElements()) {
            CorpusType ct = (CorpusType) enm.nextElement();
            
            readCorpusTypes.addElement(ct.toString());
            writeCorpusTypes.addElement(ct.toString());
        }
        
        readAsJComboBox.setModel(readCorpusTypes);
        saveAsJComboBox.setModel(writeCorpusTypes);
        
        someSpecialOptionsJPanel.setVisible(false);
    }
    
    public boolean validateSplitSpec() {
        String selReadCorpusType = (String) readAsJComboBox.getSelectedItem();
        fileSplittingOptions.readCorpusType = (CorpusType) CorpusType.findFromId(selReadCorpusType);
        
        String selWriteCorpusType = (String) saveAsJComboBox.getSelectedItem();
        fileSplittingOptions.writeCorpusType = (CorpusType) CorpusType.findFromId(selWriteCorpusType);
        
        if(fileSplittingOptions.readCorpusType == CorpusType.XML_FORMAT
                || fileSplittingOptions.writeCorpusType == CorpusType.XML_FORMAT) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("XMLTagged_corpus_is_not_yet_supported._Hope_it_will_be_done_soon."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        fileSplittingOptions.inDirectory = inDirJTextField.getText();
        fileSplittingOptions.outDirectory = outDirJTextField.getText();
        
        File inFile = new File(fileSplittingOptions.inDirectory);
        File outFile = new File(fileSplittingOptions.outDirectory);
        
        if(inFile.exists() == false) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Couldn't_find_input_directory."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            return false;
        } else if(inFile.canRead() == false) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("No_read_permission_for_input_directory:\n") + fileSplittingOptions.inDirectory, GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            return false;
        } else if(inFile.canWrite() == false) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("No_write_permission_for_input_directory:\n") + fileSplittingOptions.inDirectory, GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if(outFile.exists() == true && outFile.canWrite() == false) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("No_write_permission_for_output_directory:\n") + fileSplittingOptions.inDirectory, GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        fileSplittingOptions.charset = charsetJTextField.getText();
        
        if(FileSplitter.validateCorpusType(inFile, fileSplittingOptions.charset, fileSplittingOptions.readCorpusType) == false) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Corpus_type_of_input_files_may_not_be_") + fileSplittingOptions.readCorpusType.toString(), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        String unitStr = (String) unitJComboBox.getSelectedItem();
        fileSplittingOptions.unit = FileSplitter.getUnitFromString(unitStr);
        
        String sizeStr = (String) splitSizeJTextField.getText();
        String maxSizeStr = (String) maxSizeJTextField.getText();
        
        try {
            fileSplittingOptions.splitSize = Long.parseLong(sizeStr);
            fileSplittingOptions.maxSize = Long.parseLong(maxSizeStr);
            
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Invalid_value_for_split_size_or_maximum_size."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            return false;
//	    ex.printStackTrace();
        }
        
        fileSplittingOptions.allowLastSmaller = allowLastSmallerJCheckBox.isSelected();
        fileSplittingOptions.clean = cleanBeforeJCheckBox.isSelected();
        fileSplittingOptions.recreateDirStr = recreateDirStrJCheckBox.isSelected();
        fileSplittingOptions.splitSizePerDir = sizePerDirJCheckBox.isSelected();
        fileSplittingOptions.exactSize = exactSizeJCheckBox.isSelected();
        
        fileSplittingOptions.reallocateStoryIDs = reallocateStoryIDsJCheckBox.isSelected();
        fileSplittingOptions.reallocateSentenceIDs = reallocateSenIDsJCheckBox.isSelected();
        fileSplittingOptions.reallocateNodeIDs = reallocateNodeIDsJCheckBox.isSelected();
        
        return true;
    }
    
    public void setDefaults() {
        readAsJComboBox.setSelectedItem(CorpusType.RAW.toString());
        saveAsJComboBox.setSelectedItem(CorpusType.RAW.toString());
        
        inDirJTextField.setText(fileSplittingOptions.inDirectory);
        outDirJTextField.setText(fileSplittingOptions.outDirectory);
        charsetJTextField.setText(fileSplittingOptions.charset);
        unitJComboBox.setSelectedItem(GlobalProperties.getIntlString("Word"));
        splitSizeJTextField.setText(Long.toString(fileSplittingOptions.splitSize));
        maxSizeJTextField.setText(Long.toString(fileSplittingOptions.maxSize));
        
        allowLastSmallerJCheckBox.setSelected(fileSplittingOptions.allowLastSmaller);
        cleanBeforeJCheckBox.setSelected(fileSplittingOptions.clean);
        recreateDirStrJCheckBox.setSelected(fileSplittingOptions.recreateDirStr);
        sizePerDirJCheckBox.setSelected(fileSplittingOptions.splitSizePerDir);
        exactSizeJCheckBox.setSelected(fileSplittingOptions.exactSize);
        
        reallocateStoryIDsJCheckBox.setSelected(fileSplittingOptions.reallocateStoryIDs);
        reallocateSenIDsJCheckBox.setSelected(fileSplittingOptions.reallocateSentenceIDs);
        reallocateNodeIDsJCheckBox.setSelected(fileSplittingOptions.reallocateNodeIDs);
        
        if(fileSplittingOptions.clearAnnotationLevelsFlag == SSFCorpus.NONE)
            clearAnnotationJCheckBox.setSelected(false);
        else
            clearAnnotationJCheckBox.setSelected(true);
    }

    public String getLangEnc()
    {
        return langEnc;
    }
    
    public Frame getOwner() {
        return owner;
    }
    
    public void setOwner(Frame f) {
        owner = (JFrame) f;
    }

    public void setParentComponent(Component parentComponent)
    {
        this.parentComponent = parentComponent;
    }
    
    public void setDialog(JDialog dialog) {
        this.dialog=dialog;
    }

    public String getTitle() {
        return title;
    }
    
    public JMenuBar getJMenuBar() {
        return null;
    }
    
    public JPopupMenu getJPopupMenu() {
        return null;
    }
    
    public JToolBar getJToolBar() {
        return null;
    }
    
    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);
        
        //Create and set up the window.
        JFrame frame = new JFrame(GlobalProperties.getIntlString("Sanchay_File_Splitter"));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        //Create and set up the content pane.
        FileSplitterJPanel newContentPane = new FileSplitterJPanel();
        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);
        
        //Display the window.
        frame.pack();
        
        int xinset = 200;
        int yinset = 150;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setBounds(xinset, yinset,
                screenSize.width  - xinset*2,
                screenSize.height - yinset*2);
        
        frame.setVisible(true);
    }
    
    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JCheckBox allowLastSmallerJCheckBox;
    public javax.swing.JPanel booleanOptionsJPanelJPanel;
    public javax.swing.JLabel charsetJLabel;
    public javax.swing.JTextField charsetJTextField;
    public javax.swing.JCheckBox cleanBeforeJCheckBox;
    public javax.swing.JCheckBox clearAnnotationJCheckBox;
    public javax.swing.JPanel commandsJPanel;
    public javax.swing.JPanel corpusTypeJPanel;
    public javax.swing.JPanel corpusTypeLeftJPanel;
    public javax.swing.JPanel corpusTypeRightJPanel;
    public javax.swing.JButton defaultsJButton;
    public javax.swing.JCheckBox exactSizeJCheckBox;
    public javax.swing.JButton inDirJButton;
    public javax.swing.JLabel inDirJLabel;
    public javax.swing.JPanel inDirJPanel;
    public javax.swing.JTextField inDirJTextField;
    public javax.swing.JPanel ioJPanel;
    public javax.swing.JLabel maxSizeJLabel;
    public javax.swing.JTextField maxSizeJTextField;
    public javax.swing.JPanel optionLeftJPanel;
    public javax.swing.JPanel optionRightJPanel;
    public javax.swing.JPanel optionsJPanel;
    public javax.swing.JPanel otherCommonOptionsJPanel;
    public javax.swing.JButton outDirJButton;
    public javax.swing.JLabel outDirJLabel;
    public javax.swing.JPanel outDirJPanel;
    public javax.swing.JTextField outDirJTextField;
    public javax.swing.JComboBox readAsJComboBox;
    public javax.swing.JLabel readAsJLabel;
    public javax.swing.JCheckBox reallocateNodeIDsJCheckBox;
    public javax.swing.JCheckBox reallocateSenIDsJCheckBox;
    public javax.swing.JCheckBox reallocateStoryIDsJCheckBox;
    public javax.swing.JCheckBox recreateDirStrJCheckBox;
    public javax.swing.JComboBox saveAsJComboBox;
    public javax.swing.JLabel saveAsJLabel;
    public javax.swing.JCheckBox sizePerDirJCheckBox;
    public javax.swing.JPanel someSpecialOptionsJPanel;
    public javax.swing.JButton splitJButton;
    public javax.swing.JLabel splitSizeJLabel;
    public javax.swing.JTextField splitSizeJTextField;
    public javax.swing.JComboBox unitJComboBox;
    public javax.swing.JLabel unitJLabel;
    // End of variables declaration//GEN-END:variables
    
}
