/*
 * FileSplitterJPanel1.java
 *
 * Created on February 14, 2006, 10:55 PM
 */

package sanchay.util.gui;

import java.io.*;
import java.awt.*;
import java.util.*;
import java.util.List;
import javax.swing.*;

import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import sanchay.GlobalProperties;
import sanchay.common.types.ClientType;
import sanchay.common.types.CorpusType;
import sanchay.corpus.ssf.SSFCorpus;
import sanchay.corpus.ssf.gui.SSFAnnotationLevelsJPanel;

import sanchay.util.*;

/**
 *
 * @author  anil
 */
public class DocumentConverterJPanel extends javax.swing.JPanel implements sanchay.gui.common.JPanelDialog, sanchay.gui.clients.SanchayClient {

    protected ClientType clientType = ClientType.FILE_SPLITTER;

    protected JFrame owner;
    protected JDialog dialog;
    protected Component parentComponent;

    protected FileSplittingOptions fileSplittingOptions;
    
    protected String langEnc;
    protected String title = "";
    
    protected DefaultComboBoxModel readCorpusTypes;
    protected DefaultComboBoxModel writeCorpusTypes;
    
    /** Creates new form FileSplitterJPanel */
    public DocumentConverterJPanel() {
        fileSplittingOptions = new FileSplittingOptions();
        
        initComponents();

        parentComponent = this;
        
        configure();
        setDefaults();
    }

    public ClientType getClientType()
    {
        return clientType;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputFormatJPanel = new javax.swing.JPanel();
        inputFormatLeftJPanel = new javax.swing.JPanel();
        inputFormatJLabel = new javax.swing.JLabel();
        inputFormatRightJPanel = new javax.swing.JPanel();
        inputFormatJScrollPane = new javax.swing.JScrollPane();
        inputFormatJList = new javax.swing.JList<>();
        outputFormatJPanel = new javax.swing.JPanel();
        outputFormatLeftJPanel = new javax.swing.JPanel();
        outputFormatJLabel = new javax.swing.JLabel();
        outputFormatRightJPanel = new javax.swing.JPanel();
        outputFormatJComboBox = new javax.swing.JComboBox<>();
        ioJPanel = new javax.swing.JPanel();
        inDirJPanel = new javax.swing.JPanel();
        inDirJLabel = new javax.swing.JLabel();
        inDirJTextField = new javax.swing.JTextField();
        inDirJButton = new javax.swing.JButton();
        outDirJPanel = new javax.swing.JPanel();
        outDirJLabel = new javax.swing.JLabel();
        outDirJTextField = new javax.swing.JTextField();
        outDirJButton = new javax.swing.JButton();
        optionsJPanel = new javax.swing.JPanel();
        optionLeftJPanel = new javax.swing.JPanel();
        charsetJLabel = new javax.swing.JLabel();
        optionRightJPanel = new javax.swing.JPanel();
        charsetJTextField = new javax.swing.JTextField();
        booleanOptionsJPanelJPanel = new javax.swing.JPanel();
        otherCommonOptionsJPanel = new javax.swing.JPanel();
        cleanBeforeJCheckBox = new javax.swing.JCheckBox();
        recreateDirStrJCheckBox = new javax.swing.JCheckBox();
        someSpecialOptionsJPanel = new javax.swing.JPanel();
        commandsJPanel = new javax.swing.JPanel();
        defaultsJButton = new javax.swing.JButton();
        convertJButton = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        inputFormatJPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        inputFormatJPanel.setLayout(new java.awt.BorderLayout());

        inputFormatLeftJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        inputFormatJLabel.setText(bundle.getString("Read_as:_")); // NOI18N
        inputFormatLeftJPanel.add(inputFormatJLabel);

        inputFormatJPanel.add(inputFormatLeftJPanel, java.awt.BorderLayout.WEST);

        inputFormatRightJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        inputFormatJList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Plain Text" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        inputFormatJScrollPane.setViewportView(inputFormatJList);

        inputFormatRightJPanel.add(inputFormatJScrollPane);

        inputFormatJPanel.add(inputFormatRightJPanel, java.awt.BorderLayout.CENTER);

        add(inputFormatJPanel);

        outputFormatJPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        outputFormatJPanel.setLayout(new java.awt.BorderLayout());

        outputFormatLeftJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        outputFormatJLabel.setText(bundle.getString("Read_as:_")); // NOI18N
        outputFormatLeftJPanel.add(outputFormatJLabel);

        outputFormatJPanel.add(outputFormatLeftJPanel, java.awt.BorderLayout.WEST);

        outputFormatRightJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        outputFormatJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Plain Text" }));
        outputFormatRightJPanel.add(outputFormatJComboBox);

        outputFormatJPanel.add(outputFormatRightJPanel, java.awt.BorderLayout.CENTER);

        add(outputFormatJPanel);

        ioJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("I/O"));
        ioJPanel.setLayout(new javax.swing.BoxLayout(ioJPanel, javax.swing.BoxLayout.Y_AXIS));

        inDirJPanel.setLayout(new java.awt.BorderLayout());

        inDirJLabel.setLabelFor(inDirJTextField);
        inDirJLabel.setText(bundle.getString("Input_directory:")); // NOI18N
        inDirJPanel.add(inDirJLabel, java.awt.BorderLayout.NORTH);
        inDirJPanel.add(inDirJTextField, java.awt.BorderLayout.CENTER);

        inDirJButton.setText(bundle.getString("Browse")); // NOI18N
        inDirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inDirJButtonActionPerformed(evt);
            }
        });
        inDirJPanel.add(inDirJButton, java.awt.BorderLayout.EAST);

        ioJPanel.add(inDirJPanel);

        outDirJPanel.setLayout(new java.awt.BorderLayout());

        outDirJLabel.setLabelFor(outDirJTextField);
        outDirJLabel.setText(bundle.getString("Output_directory:")); // NOI18N
        outDirJPanel.add(outDirJLabel, java.awt.BorderLayout.NORTH);
        outDirJPanel.add(outDirJTextField, java.awt.BorderLayout.CENTER);

        outDirJButton.setText(bundle.getString("Browse")); // NOI18N
        outDirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outDirJButtonActionPerformed(evt);
            }
        });
        outDirJPanel.add(outDirJButton, java.awt.BorderLayout.EAST);

        ioJPanel.add(outDirJPanel);

        add(ioJPanel);

        optionsJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Spliting Options"));
        optionsJPanel.setLayout(new java.awt.BorderLayout());

        optionLeftJPanel.setLayout(new java.awt.GridLayout(0, 1));

        charsetJLabel.setText(bundle.getString("Charset_or_encoding:_")); // NOI18N
        optionLeftJPanel.add(charsetJLabel);

        optionsJPanel.add(optionLeftJPanel, java.awt.BorderLayout.WEST);

        optionRightJPanel.setLayout(new java.awt.GridLayout(0, 1));

        charsetJTextField.setText(bundle.getString("UTF8")); // NOI18N
        optionRightJPanel.add(charsetJTextField);

        optionsJPanel.add(optionRightJPanel, java.awt.BorderLayout.CENTER);

        add(optionsJPanel);

        booleanOptionsJPanelJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Some Other Options"));
        booleanOptionsJPanelJPanel.setLayout(new java.awt.GridLayout(1, 0));

        otherCommonOptionsJPanel.setLayout(new java.awt.GridLayout(5, 1, 0, 4));

        cleanBeforeJCheckBox.setSelected(true);
        cleanBeforeJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cleanBeforeJCheckBox.setLabel(bundle.getString("Clean_output_directory_before_starting")); // NOI18N
        cleanBeforeJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        otherCommonOptionsJPanel.add(cleanBeforeJCheckBox);

        recreateDirStrJCheckBox.setText(bundle.getString("Recreate_directory_structure")); // NOI18N
        recreateDirStrJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        recreateDirStrJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        otherCommonOptionsJPanel.add(recreateDirStrJCheckBox);

        booleanOptionsJPanelJPanel.add(otherCommonOptionsJPanel);

        someSpecialOptionsJPanel.setLayout(new java.awt.GridLayout(5, 1, 0, 4));
        booleanOptionsJPanelJPanel.add(someSpecialOptionsJPanel);

        add(booleanOptionsJPanelJPanel);

        commandsJPanel.setLayout(new java.awt.GridLayout(1, 0, 4, 4));

        defaultsJButton.setText(bundle.getString("Defaults")); // NOI18N
        defaultsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultsJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(defaultsJButton);

        convertJButton.setText(bundle.getString("Split")); // NOI18N
        convertJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(convertJButton);

        add(commandsJPanel);
    }// </editor-fold>//GEN-END:initComponents
                
    private void convertJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_convertJButtonActionPerformed
    {//GEN-HEADEREND:event_convertJButtonActionPerformed
// TODO add your handling code here:
        Cursor cursor = getParent().getCursor();
        getParent().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        convertDocuments();
        
        getParent().setCursor(cursor);
    }//GEN-LAST:event_convertJButtonActionPerformed
    
    private void defaultsJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_defaultsJButtonActionPerformed
    {//GEN-HEADEREND:event_defaultsJButtonActionPerformed
// TODO add your handling code here:
        setDefaults();
    }//GEN-LAST:event_defaultsJButtonActionPerformed
    
    private void outDirJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_outDirJButtonActionPerformed
    {//GEN-HEADEREND:event_outDirJButtonActionPerformed
// TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(fileSplittingOptions.outDirectory);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File selFile = chooser.getSelectedFile();
            outDirJTextField.setText(selFile.getAbsolutePath());
        }
    }//GEN-LAST:event_outDirJButtonActionPerformed
    
    private void inDirJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_inDirJButtonActionPerformed
    {//GEN-HEADEREND:event_inDirJButtonActionPerformed
// TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(fileSplittingOptions.inDirectory);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = chooser.showOpenDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File selFile = chooser.getSelectedFile();
            inDirJTextField.setText(selFile.getAbsolutePath());
        }
    }//GEN-LAST:event_inDirJButtonActionPerformed
    
    private void convertDocuments()
    {
        File inputDir = new File(inDirJTextField.getText());
        
        File files[] = inputDir.listFiles();
        
        for (int i = 0; i < files.length; i++) {
            File file = files[i];
            File outFile = new File(file.getAbsolutePath() + ".txt");

            try {
                FileInputStream fis = new FileInputStream(file.getAbsolutePath());
                FileWriter fileWriter = new FileWriter(outFile.getAbsolutePath());

//                try (XWPFDocument doc = new XWPFDocument(fis)) {
//
//                    XWPFWordExtractor xwpfWordExtractor = new XWPFWordExtractor(doc);
//                    String docText = xwpfWordExtractor.getText();
//                    System.out.println(docText);
//
//                    // find number of words in the document
//                    long count = Arrays.stream(docText.split("\\s+")).count();
//                    System.out.println("Total words: " + count);
//
//                    fileWriter.write(docText);
//                }

//                XWPFDocument document = new XWPFDocument(fis);
//
//                List<XWPFParagraph> paragraphs = document.getParagraphs();
//
//                for (XWPFParagraph para : paragraphs) {
//                    fileWriter.write(para.getText());
//                    fileWriter.write("\n");
//                }

                fis.close();
                fileWriter.close();
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }
    
    public void configure() {
        
        inputFormatJList.setModel(new DefaultListModel<String>());
        
        someSpecialOptionsJPanel.setVisible(false);
    }
    
    public void setDefaults() {
        DefaultListModel listModel = (DefaultListModel) inputFormatJList.getModel();
        listModel.addElement("Microsoft Word (.doc)");
        listModel.addElement("Microsoft Word (.docx)");
        
        inputFormatJList.setSelectedIndices(new int[] {0, 1});
        
        outputFormatJComboBox.setSelectedItem(CorpusType.RAW.toString());
        
        inDirJTextField.setText(fileSplittingOptions.inDirectory);
        outDirJTextField.setText(fileSplittingOptions.outDirectory);
        charsetJTextField.setText(fileSplittingOptions.charset);
        
        cleanBeforeJCheckBox.setSelected(fileSplittingOptions.clean);
        recreateDirStrJCheckBox.setSelected(fileSplittingOptions.recreateDirStr);        
    }

    public String getLangEnc()
    {
        return langEnc;
    }
    
    public Frame getOwner() {
        return owner;
    }
    
    public void setOwner(Frame f) {
        owner = (JFrame) f;
    }

    public void setParentComponent(Component parentComponent)
    {
        this.parentComponent = parentComponent;
    }
    
    public void setDialog(JDialog dialog) {
        this.dialog=dialog;
    }

    public String getTitle() {
        return title;
    }
    
    public JMenuBar getJMenuBar() {
        return null;
    }
    
    public JPopupMenu getJPopupMenu() {
        return null;
    }
    
    public JToolBar getJToolBar() {
        return null;
    }
    
    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);
        
        //Create and set up the window.
        JFrame frame = new JFrame(GlobalProperties.getIntlString("Sanchay_File_Splitter"));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        //Create and set up the content pane.
        DocumentConverterJPanel newContentPane = new DocumentConverterJPanel();
        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);
        
        //Display the window.
        frame.pack();
        
        int xinset = 200;
        int yinset = 150;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setBounds(xinset, yinset,
                screenSize.width  - xinset*2,
                screenSize.height - yinset*2);
        
        frame.setVisible(true);
    }
    
    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel booleanOptionsJPanelJPanel;
    public javax.swing.JLabel charsetJLabel;
    public javax.swing.JTextField charsetJTextField;
    public javax.swing.JCheckBox cleanBeforeJCheckBox;
    public javax.swing.JPanel commandsJPanel;
    public javax.swing.JButton convertJButton;
    public javax.swing.JButton defaultsJButton;
    public javax.swing.JButton inDirJButton;
    public javax.swing.JLabel inDirJLabel;
    public javax.swing.JPanel inDirJPanel;
    public javax.swing.JTextField inDirJTextField;
    public javax.swing.JLabel inputFormatJLabel;
    public javax.swing.JList<String> inputFormatJList;
    public javax.swing.JPanel inputFormatJPanel;
    public javax.swing.JScrollPane inputFormatJScrollPane;
    public javax.swing.JPanel inputFormatLeftJPanel;
    public javax.swing.JPanel inputFormatRightJPanel;
    public javax.swing.JPanel ioJPanel;
    public javax.swing.JPanel optionLeftJPanel;
    public javax.swing.JPanel optionRightJPanel;
    public javax.swing.JPanel optionsJPanel;
    public javax.swing.JPanel otherCommonOptionsJPanel;
    public javax.swing.JButton outDirJButton;
    public javax.swing.JLabel outDirJLabel;
    public javax.swing.JPanel outDirJPanel;
    public javax.swing.JTextField outDirJTextField;
    public javax.swing.JComboBox<String> outputFormatJComboBox;
    public javax.swing.JLabel outputFormatJLabel;
    public javax.swing.JPanel outputFormatJPanel;
    public javax.swing.JPanel outputFormatLeftJPanel;
    public javax.swing.JPanel outputFormatRightJPanel;
    public javax.swing.JCheckBox recreateDirStrJCheckBox;
    public javax.swing.JPanel someSpecialOptionsJPanel;
    // End of variables declaration//GEN-END:variables
    
}
