/*
 * NewJPanel.java
 *
 * Created on October 17, 2005, 11:37 PM
 */

package sanchay.langenc.gui;

import java.io.*;
import java.awt.*;
import java.util.Iterator;
import java.util.LinkedHashMap;
import javax.swing.*;

import sanchay.SanchayMain;
import sanchay.GlobalProperties;
import sanchay.common.types.ClientType;
import sanchay.langenc.LangEncIdentifier;
import sanchay.util.UtilityFunctions;

/**
 *
 * @author  anil
 */
public class LanguageEncodingIdentifierJPanel extends javax.swing.JPanel implements sanchay.gui.common.JPanelDialog, sanchay.gui.clients.SanchayClient  {

    protected ClientType clientType = ClientType.LANGUAGE_ENCODING_IDENTIFIER;
    
    protected JFrame owner;
    protected JDialog dialog;
    protected Component parentComponent;
    
    protected String path;
    protected String text;
    protected String langEnc;

    protected String title = "";
    
    protected LangEncIdentifier encLangIdentifier;
    protected LanguageEncodingIdentifierWorker languageEncodingIdentifierWorker;
    
    /** Creates new form NewJPanel */
    public LanguageEncodingIdentifierJPanel() {
        initComponents();

        parentComponent = this;
    }

    public ClientType getClientType()
    {
        return clientType;
    }

    public void load()
    {
        languageEncodingIdentifierWorker = new LanguageEncodingIdentifierWorker();
        (languageEncodingIdentifierWorker = new LanguageEncodingIdentifierWorker()).execute();
    }

    public void cancel()
    {
        languageEncodingIdentifierWorker.cancel(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topJPanel = new javax.swing.JPanel();
        taskSelectJPanel = new javax.swing.JPanel();
        taskJLabel = new javax.swing.JLabel();
        taskJComboBox = new javax.swing.JComboBox();
        modeSelectJPanel = new javax.swing.JPanel();
        modeJLabel = new javax.swing.JLabel();
        modeJComboBox = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        centreJPanel = new javax.swing.JPanel();
        inputJPanel = new javax.swing.JPanel();
        textInputJPanel = new javax.swing.JPanel();
        textInputJLabel = new javax.swing.JLabel();
        textInputJScrollPane = new javax.swing.JScrollPane();
        textInputJTextArea = new javax.swing.JTextArea();
        pathInputJPanel = new javax.swing.JPanel();
        pathInputJLabel = new javax.swing.JLabel();
        pathInputJTextField = new javax.swing.JTextField();
        pathInputJButton = new javax.swing.JButton();
        outputJPanel = new javax.swing.JPanel();
        singleOutputJPanel = new javax.swing.JPanel();
        singleOutputJLabel = new javax.swing.JLabel();
        singleOutputJTextField = new javax.swing.JTextField();
        batchOutputJPanel = new javax.swing.JPanel();
        batchOutputJLabel = new javax.swing.JLabel();
        commandsJPanel = new javax.swing.JPanel();
        loadJButton = new javax.swing.JButton();
        cancelJButton = new javax.swing.JButton();
        identifyJButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout(0, 4));

        topJPanel.setLayout(new javax.swing.BoxLayout(topJPanel, javax.swing.BoxLayout.Y_AXIS));

        taskSelectJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        taskJLabel.setText(bundle.getString("Task:")); // NOI18N
        taskSelectJPanel.add(taskJLabel);

        taskJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Identify" }));
        taskJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskJComboBoxActionPerformed(evt);
            }
        });
        taskSelectJPanel.add(taskJComboBox);

        topJPanel.add(taskSelectJPanel);

        modeSelectJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        modeJLabel.setText("Mode:");
        modeSelectJPanel.add(modeJLabel);

        modeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Text", "File" }));
        modeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeJComboBoxActionPerformed(evt);
            }
        });
        modeSelectJPanel.add(modeJComboBox);

        topJPanel.add(modeSelectJPanel);
        topJPanel.add(jSeparator1);

        add(topJPanel, java.awt.BorderLayout.NORTH);

        centreJPanel.setLayout(new java.awt.GridLayout(2, 0, 0, 4));

        inputJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input"));
        inputJPanel.setLayout(new java.awt.CardLayout());

        textInputJPanel.setLayout(new java.awt.BorderLayout());

        textInputJLabel.setLabelFor(textInputJTextArea);
        textInputJLabel.setText("Text");
        textInputJPanel.add(textInputJLabel, java.awt.BorderLayout.NORTH);

        textInputJTextArea.setColumns(20);
        textInputJTextArea.setRows(5);
        textInputJScrollPane.setViewportView(textInputJTextArea);

        textInputJPanel.add(textInputJScrollPane, java.awt.BorderLayout.CENTER);

        inputJPanel.add(textInputJPanel, "textInput");

        pathInputJPanel.setLayout(new java.awt.BorderLayout());

        pathInputJLabel.setLabelFor(pathInputJTextField);
        pathInputJLabel.setText("Path");
        pathInputJPanel.add(pathInputJLabel, java.awt.BorderLayout.NORTH);

        pathInputJTextField.setText("Path");
        pathInputJPanel.add(pathInputJTextField, java.awt.BorderLayout.CENTER);

        pathInputJButton.setText("Browse");
        pathInputJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathInputJButtonActionPerformed(evt);
            }
        });
        pathInputJPanel.add(pathInputJButton, java.awt.BorderLayout.EAST);

        inputJPanel.add(pathInputJPanel, "pathInput");

        centreJPanel.add(inputJPanel);

        outputJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));
        outputJPanel.setLayout(new java.awt.CardLayout());

        singleOutputJPanel.setLayout(new java.awt.BorderLayout());

        singleOutputJLabel.setLabelFor(singleOutputJTextField);
        singleOutputJLabel.setText("Language-Encoding: ");
        singleOutputJPanel.add(singleOutputJLabel, java.awt.BorderLayout.WEST);
        singleOutputJPanel.add(singleOutputJTextField, java.awt.BorderLayout.CENTER);

        outputJPanel.add(singleOutputJPanel, "singleOutput");

        batchOutputJPanel.setLayout(new java.awt.BorderLayout());

        batchOutputJLabel.setText("Language-Encoding: ");
        batchOutputJPanel.add(batchOutputJLabel, java.awt.BorderLayout.WEST);

        outputJPanel.add(batchOutputJPanel, "batchOutput");

        centreJPanel.add(outputJPanel);

        add(centreJPanel, java.awt.BorderLayout.CENTER);

        commandsJPanel.setLayout(new java.awt.GridLayout(1, 0));

        loadJButton.setText(bundle.getString("Load"));
        loadJButton.setToolTipText("Load the models");
        loadJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(loadJButton);

        cancelJButton.setText(bundle.getString("Cancel"));
        cancelJButton.setToolTipText("Cancel the operation");
        cancelJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(cancelJButton);

        identifyJButton.setText(bundle.getString("Identify")); // NOI18N
        identifyJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                identifyJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(identifyJButton);

        add(commandsJPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents
    
    private void pathInputJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathInputJButtonActionPerformed
// TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            path = chooser.getSelectedFile().getAbsolutePath();
            
            if(path.equals("") == false) {
                pathInputJTextField.setText(path);
            }
        }
    }//GEN-LAST:event_pathInputJButtonActionPerformed
    
    private void modeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeJComboBoxActionPerformed
// TODO add your handling code here:
        if(modeJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Text"))) {
            ((CardLayout) inputJPanel.getLayout()).show(inputJPanel, "textInput");
            ((CardLayout) outputJPanel.getLayout()).show(outputJPanel, "singleOutput");
        } else if(modeJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("File"))) {
            ((CardLayout) inputJPanel.getLayout()).show(inputJPanel, "pathInput");
            ((CardLayout) outputJPanel.getLayout()).show(outputJPanel, "singleOutput");
        } else if(modeJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Directory"))
        || modeJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Batch"))) {
            ((CardLayout) inputJPanel.getLayout()).show(inputJPanel, "pathInput");
            ((CardLayout) outputJPanel.getLayout()).show(outputJPanel, "batchOutput");
        }
    }//GEN-LAST:event_modeJComboBoxActionPerformed
    
    private void taskJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskJComboBoxActionPerformed
// TODO add your handling code here:
        if(taskJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Identify"))) {
            identifyJButton.setText(GlobalProperties.getIntlString("Identify"));
        } else if(taskJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Train"))) {
            identifyJButton.setText(GlobalProperties.getIntlString("Train"));
        }
    }//GEN-LAST:event_taskJComboBoxActionPerformed
    
    private void identifyJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_identifyJButtonActionPerformed
    {//GEN-HEADEREND:event_identifyJButtonActionPerformed
// TODO add your handling code here:
        Cursor cursor = null;

        if(owner != null)
        {
            cursor = owner.getCursor();
            owner.setCursor(Cursor.WAIT_CURSOR);
        }
            
//        owner.setCursor(new Cursor((Cursor.WAIT_CURSOR)));

        int mode = 0;
        
        if(modeJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Text"))) {
            mode = 1;
            text = textInputJTextArea.getText();
        } else if(modeJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("File"))) {
            mode = 2;
            path = pathInputJTextField.getText();
        } else if(modeJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Directory"))) {
            mode = 3;
            path = pathInputJTextField.getText();
        } else if(modeJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Batch"))) {
            mode = 4;
            path = pathInputJTextField.getText();
        }
        
        if(taskJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Identify"))) {
            // For now, text mode is working through the file mode by creating a temp file using ISO-8859-1 encoding
            if(mode == 1) {
                path = "tmp/tmp-tmp-tmp-1-2-3.xyz.abc";
                String cs = GlobalProperties.getIntlString("ISO-8859-1");

                if(UtilityFunctions.isPossiblyUTF8String(text))
                    cs = GlobalProperties.getIntlString("UTF-8");
                
                PrintStream ps = null;
                
                try {
                    ps = new PrintStream(path, cs);
                } catch (FileNotFoundException ex) {
                    ex.printStackTrace();
                } catch (UnsupportedEncodingException ex) {
                    ex.printStackTrace();
                }
                
                ps.println(text);
                ps.close();
            }
            
            if(mode == 1 || mode == 2) {
                try {
                    File tfile = new File(path);
                    LinkedHashMap LEs = ((LinkedHashMap) encLangIdentifier.identify(tfile));
                    Iterator itr = LEs.keySet().iterator();
                    langEnc = (String) itr.next();
                    
                    singleOutputJTextField.setText(langEnc);
                    
                    if(mode == 1)
                        tfile.delete();
                } catch(FileNotFoundException e) {
                    e.printStackTrace();
                } catch(IOException e) {
                    e.printStackTrace();
                }
            } else if(mode == 3) {
            } else if(mode == 4) {
                try {
                    encLangIdentifier.evaluate(path);
                } catch(Exception e) {
                    e.printStackTrace();
                }
            }
        } else if(taskJComboBox.getSelectedItem().equals(GlobalProperties.getIntlString("Train"))) {
            if(mode == 1) {
                
            } else if(mode == 2) {
                
            } else if(mode == 3) {
                
            } else if(mode == 4) {
            }
        }

        if(owner != null)
            owner.setCursor(cursor);
}//GEN-LAST:event_identifyJButtonActionPerformed

    private void loadJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadJButtonActionPerformed
    {//GEN-HEADEREND:event_loadJButtonActionPerformed
        // TODO add your handling code here:
        load();
}//GEN-LAST:event_loadJButtonActionPerformed

    private void cancelJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelJButtonActionPerformed
    {//GEN-HEADEREND:event_cancelJButtonActionPerformed
        // TODO add your handling code here:
        cancel();
}//GEN-LAST:event_cancelJButtonActionPerformed

    @Override
    public String getLangEnc()
    {
        return langEnc;
    }
    
    @Override
    public Frame getOwner()
    {
        return owner;
    }
    
    @Override
    public void setOwner(Frame f)
    {
        owner = (JFrame) f;
    }

    @Override
    public void setParentComponent(Component parentComponent)
    {
        this.parentComponent = parentComponent;
    }
    
    @Override
    public void setDialog(JDialog dialog) {
        this.dialog = dialog;
    }

    @Override
    public String getTitle() {
        return title;
    }
    
    @Override
    public JMenuBar getJMenuBar() {
        return null;
    }
    
    @Override
    public JPopupMenu getJPopupMenu() {
        return null;
    }
    
    @Override
    public JToolBar getJToolBar() {
        return null;
    }
    
    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);
        
        //Create and set up the window.
        JFrame frame = new JFrame(GlobalProperties.getIntlString("Sanchay_Language_and_Encoding_Identifier"));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        //Create and set up the content pane.
        LanguageEncodingIdentifierJPanel newContentPane = new LanguageEncodingIdentifierJPanel();
        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);
        
        //Display the window.
        frame.pack();
        
        int xinset = 250;
        int yinset = 200;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setBounds(xinset, yinset,
                screenSize.width  - xinset*2,
                screenSize.height - yinset*2);
        
        frame.setVisible(true);
    }
    
    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel batchOutputJLabel;
    public javax.swing.JPanel batchOutputJPanel;
    public javax.swing.JButton cancelJButton;
    public javax.swing.JPanel centreJPanel;
    public javax.swing.JPanel commandsJPanel;
    public javax.swing.JButton identifyJButton;
    public javax.swing.JPanel inputJPanel;
    public javax.swing.JSeparator jSeparator1;
    public javax.swing.JButton loadJButton;
    public javax.swing.JComboBox modeJComboBox;
    public javax.swing.JLabel modeJLabel;
    public javax.swing.JPanel modeSelectJPanel;
    public javax.swing.JPanel outputJPanel;
    public javax.swing.JButton pathInputJButton;
    public javax.swing.JLabel pathInputJLabel;
    public javax.swing.JPanel pathInputJPanel;
    public javax.swing.JTextField pathInputJTextField;
    public javax.swing.JLabel singleOutputJLabel;
    public javax.swing.JPanel singleOutputJPanel;
    public javax.swing.JTextField singleOutputJTextField;
    public javax.swing.JComboBox taskJComboBox;
    public javax.swing.JLabel taskJLabel;
    public javax.swing.JPanel taskSelectJPanel;
    public javax.swing.JLabel textInputJLabel;
    public javax.swing.JPanel textInputJPanel;
    public javax.swing.JScrollPane textInputJScrollPane;
    public javax.swing.JTextArea textInputJTextArea;
    public javax.swing.JPanel topJPanel;
    // End of variables declaration//GEN-END:variables

    private class LanguageEncodingIdentifierWorker extends SwingWorker {

        @Override
        protected Object doInBackground() throws Exception
        {
            if(owner !=null && owner instanceof SanchayMain)
                ((SanchayMain) owner).showConsole();

            try {
                encLangIdentifier = new LangEncIdentifier(GlobalProperties.resolveRelativePath("props/enc-lang-identify-models.txt"),
                        LangEncIdentifier.FREQ_IDENTIFIER, LangEncIdentifier.MUTUAL_CROSS_ENTROPY, 3000, true,
                        false, true, 5, 5, 1.0, 7, 3);
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            encLangIdentifier.train();

            if(owner !=null && owner instanceof SanchayMain)
                ((SanchayMain) owner).showConsole();

            return encLangIdentifier;
        }
    }
}
