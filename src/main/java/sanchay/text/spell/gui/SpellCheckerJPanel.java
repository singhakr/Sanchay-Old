/*
 * SpellCheckerJPanel.java
 *
 * Created on April 1, 2006, 3:38 PM
 */

package sanchay.text.spell.gui;

import java.awt.event.ActionEvent;
import java.io.*;
import java.awt.*;
import java.util.*;
import javax.swing.*;

import sanchay.GlobalProperties;
import sanchay.common.types.*;
import sanchay.gui.actions.SpellCheckerAction;
import sanchay.text.editor.gui.TextEditorJPanel;
import sanchay.text.spell.*;
import sanchay.util.*;
import sanchay.common.types.ClientType;
import sanchay.gui.common.ExitListener;
import sanchay.gui.common.SanchayLanguages;

/**
 *
 * @author  anil
 */
public class SpellCheckerJPanel extends javax.swing.JPanel implements sanchay.gui.common.JPanelDialog, sanchay.gui.clients.SanchayClient {

    protected ClientType clientType = ClientType.LANGUAGE_ENCODING_IDENTIFIER;
    
    protected JFrame owner;
    protected JDialog dialog;
    protected Component parentComponent;
    
    protected SpellChecker spellChecker;
    
    protected SpellCheckerOptions spellCheckerOptions;
    
    protected DefaultComboBoxModel readCorpusTypes;
    
    protected JPanel contentJPanel;
    
    protected int wordCount;
    
    protected String title = "";
    protected String langEnc;

    protected File inputFile;
    protected File outputFile;
    
    protected File selFile;
    
    protected Hashtable actionMap;
    protected SpellCheckerAction actions[];
    
    protected boolean optionsShown;
    
    private DefaultComboBoxModel langauges;
    
    /** Creates new form SpellCheckerJPanel */
    public SpellCheckerJPanel() {
        this(false);
    }
    
    public SpellCheckerJPanel(boolean batchMode, JPanel contentJPanel) {
        this(batchMode);
    }
    
    // Stand-alone mode
    public SpellCheckerJPanel(boolean batchMode) {
        super();
        
        optionsShown = true;
        
        spellCheckerOptions = new SpellCheckerOptions();
        
        spellCheckerOptions.standAlone = true;
        spellCheckerOptions.batchMode = batchMode;
        
        initComponents();

        parentComponent = this;
        
        langauges = new DefaultComboBoxModel();
        SanchayLanguages.fillLanguages(langauges);
        languageJComboBox.setModel(langauges);
        
        initActions();
        fillActionButtions();
        
        readCorpusTypes = new DefaultComboBoxModel();
        
        configure();
        setDefaults();
        
        initLanguage();
        
        contentJPanel = fileContentJPanel;
        
        topJPanel.setVisible(batchMode);
        filesJSplitPane.setVisible(batchMode);
        
        if(batchMode == false)
            commonOptionsJPanel.remove(recreateDirStrJCheckBox);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topJPanel = new javax.swing.JPanel();
        langDictJPanel = new javax.swing.JPanel();
        ldLeftJPanel = new javax.swing.JPanel();
        languageJLabel = new javax.swing.JLabel();
        dictionaryJLabel = new javax.swing.JLabel();
        ldRightJPanel = new javax.swing.JPanel();
        languageJComboBox = new javax.swing.JComboBox();
        dictionaryJComboBox = new javax.swing.JComboBox();
        corpusTypeJPanel = new javax.swing.JPanel();
        corpusTypeLeftJPanel = new javax.swing.JPanel();
        readAsJLabel = new javax.swing.JLabel();
        corpusTypeRightJPanel = new javax.swing.JPanel();
        readAsJComboBox = new javax.swing.JComboBox();
        ioJPanel = new javax.swing.JPanel();
        inDirJPanel = new javax.swing.JPanel();
        inDirJLabel = new javax.swing.JLabel();
        inDirJTextField = new javax.swing.JTextField();
        inDirJButton = new javax.swing.JButton();
        outDirJPanel = new javax.swing.JPanel();
        outDirJLabel = new javax.swing.JLabel();
        outDirJTextField = new javax.swing.JTextField();
        outDirJButton = new javax.swing.JButton();
        charsetJPanel = new javax.swing.JPanel();
        charsetJLabel = new javax.swing.JLabel();
        charsetJTextField = new javax.swing.JTextField();
        mainJPanel = new javax.swing.JPanel();
        spellCheckJPanel = new javax.swing.JPanel();
        wrdSenJPanel = new javax.swing.JPanel();
        senJScrollPane = new javax.swing.JScrollPane();
        senJTextArea = new javax.swing.JTextArea();
        wordJPanel = new javax.swing.JPanel();
        leftJPanel = new javax.swing.JPanel();
        origWordJLabel = new javax.swing.JLabel();
        editWordJLabel = new javax.swing.JLabel();
        rightJPanel = new javax.swing.JPanel();
        origWordJScrollPane = new javax.swing.JScrollPane();
        origWordJTextArea = new javax.swing.JTextArea();
        editWordJScrollPane = new javax.swing.JScrollPane();
        editWordJTextArea = new javax.swing.JTextArea();
        suggestionsJPanel = new javax.swing.JPanel();
        suggestedWordsJScrollPane = new javax.swing.JScrollPane();
        suggestedWordsJList = new javax.swing.JList();
        optionsJPanel = new javax.swing.JPanel();
        commonOptionsJPanel = new javax.swing.JPanel();
        backwardJCheckBox = new javax.swing.JCheckBox();
        recreateDirStrJCheckBox = new javax.swing.JCheckBox();
        filesJSplitPane = new javax.swing.JSplitPane();
        fileListJScrollPane = new javax.swing.JScrollPane();
        fileListJList = new javax.swing.JList();
        fileContentJPanel = new javax.swing.JPanel();
        commandsJPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        topJPanel.setLayout(new javax.swing.BoxLayout(topJPanel, javax.swing.BoxLayout.Y_AXIS));

        langDictJPanel.setLayout(new java.awt.BorderLayout(4, 4));

        ldLeftJPanel.setLayout(new java.awt.GridLayout(0, 1, 4, 4));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        languageJLabel.setText(bundle.getString("Language:_")); // NOI18N
        ldLeftJPanel.add(languageJLabel);

        dictionaryJLabel.setLabelFor(dictionaryJComboBox);
        dictionaryJLabel.setText(bundle.getString("Dictionary:")); // NOI18N
        ldLeftJPanel.add(dictionaryJLabel);

        langDictJPanel.add(ldLeftJPanel, java.awt.BorderLayout.WEST);

        ldRightJPanel.setLayout(new java.awt.GridLayout(0, 1, 4, 4));

        ldRightJPanel.add(languageJComboBox);

        ldRightJPanel.add(dictionaryJComboBox);

        langDictJPanel.add(ldRightJPanel, java.awt.BorderLayout.CENTER);

        topJPanel.add(langDictJPanel);

        corpusTypeJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Corpus Type"));
        corpusTypeJPanel.setLayout(new java.awt.BorderLayout());

        corpusTypeLeftJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        readAsJLabel.setText(bundle.getString("Read_as:_")); // NOI18N
        corpusTypeLeftJPanel.add(readAsJLabel);

        corpusTypeJPanel.add(corpusTypeLeftJPanel, java.awt.BorderLayout.WEST);

        corpusTypeRightJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        readAsJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readAsJComboBoxActionPerformed(evt);
            }
        });
        corpusTypeRightJPanel.add(readAsJComboBox);

        corpusTypeJPanel.add(corpusTypeRightJPanel, java.awt.BorderLayout.CENTER);

        topJPanel.add(corpusTypeJPanel);

        ioJPanel.setLayout(new javax.swing.BoxLayout(ioJPanel, javax.swing.BoxLayout.Y_AXIS));

        inDirJPanel.setLayout(new java.awt.BorderLayout());

        inDirJLabel.setDisplayedMnemonic('I');
        inDirJLabel.setText(bundle.getString("Input_directory:")); // NOI18N
        inDirJPanel.add(inDirJLabel, java.awt.BorderLayout.NORTH);
        inDirJPanel.add(inDirJTextField, java.awt.BorderLayout.CENTER);

        inDirJButton.setText(bundle.getString("Browse")); // NOI18N
        inDirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inDirJButtonActionPerformed(evt);
            }
        });
        inDirJPanel.add(inDirJButton, java.awt.BorderLayout.EAST);

        ioJPanel.add(inDirJPanel);

        outDirJPanel.setLayout(new java.awt.BorderLayout());

        outDirJLabel.setDisplayedMnemonic('O');
        outDirJLabel.setText(bundle.getString("Output_directory:")); // NOI18N
        outDirJPanel.add(outDirJLabel, java.awt.BorderLayout.NORTH);
        outDirJPanel.add(outDirJTextField, java.awt.BorderLayout.CENTER);

        outDirJButton.setText(bundle.getString("Browse")); // NOI18N
        outDirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outDirJButtonActionPerformed(evt);
            }
        });
        outDirJPanel.add(outDirJButton, java.awt.BorderLayout.EAST);

        ioJPanel.add(outDirJPanel);

        charsetJPanel.setLayout(new java.awt.BorderLayout());

        charsetJLabel.setText(bundle.getString("Charset_or_encoding:_")); // NOI18N
        charsetJPanel.add(charsetJLabel, java.awt.BorderLayout.WEST);

        charsetJTextField.setText(bundle.getString("UTF8")); // NOI18N
        charsetJPanel.add(charsetJTextField, java.awt.BorderLayout.CENTER);

        ioJPanel.add(charsetJPanel);

        topJPanel.add(ioJPanel);

        add(topJPanel, java.awt.BorderLayout.NORTH);

        mainJPanel.setLayout(new java.awt.BorderLayout(0, 4));

        spellCheckJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Spell Check"));
        spellCheckJPanel.setLayout(new java.awt.BorderLayout(4, 0));

        wrdSenJPanel.setLayout(new java.awt.BorderLayout(4, 0));

        senJTextArea.setColumns(20);
        senJTextArea.setEditable(false);
        senJTextArea.setLineWrap(true);
        senJTextArea.setRows(2);
        senJScrollPane.setViewportView(senJTextArea);

        wrdSenJPanel.add(senJScrollPane, java.awt.BorderLayout.NORTH);

        wordJPanel.setLayout(new java.awt.BorderLayout());

        leftJPanel.setLayout(new java.awt.GridLayout(0, 1, 4, 4));

        origWordJLabel.setLabelFor(origWordJTextArea);
        origWordJLabel.setText(bundle.getString("Original_word:_")); // NOI18N
        leftJPanel.add(origWordJLabel);

        editWordJLabel.setLabelFor(editWordJTextArea);
        editWordJLabel.setText(bundle.getString("Edit_word:_")); // NOI18N
        leftJPanel.add(editWordJLabel);

        wordJPanel.add(leftJPanel, java.awt.BorderLayout.WEST);

        rightJPanel.setLayout(new java.awt.GridLayout(0, 1, 4, 4));

        origWordJTextArea.setColumns(20);
        origWordJTextArea.setEditable(false);
        origWordJTextArea.setRows(1);
        origWordJScrollPane.setViewportView(origWordJTextArea);

        rightJPanel.add(origWordJScrollPane);

        editWordJTextArea.setColumns(20);
        editWordJTextArea.setRows(1);
        editWordJScrollPane.setViewportView(editWordJTextArea);

        rightJPanel.add(editWordJScrollPane);

        wordJPanel.add(rightJPanel, java.awt.BorderLayout.CENTER);

        wrdSenJPanel.add(wordJPanel, java.awt.BorderLayout.CENTER);

        spellCheckJPanel.add(wrdSenJPanel, java.awt.BorderLayout.NORTH);

        suggestionsJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Suggestions"));
        suggestionsJPanel.setLayout(new java.awt.BorderLayout());

        suggestedWordsJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        suggestedWordsJList.setToolTipText(bundle.getString("Select_the_correct_word")); // NOI18N
        suggestedWordsJList.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        suggestedWordsJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                suggestedWordsJListMouseClicked(evt);
            }
        });
        suggestedWordsJScrollPane.setViewportView(suggestedWordsJList);

        suggestionsJPanel.add(suggestedWordsJScrollPane, java.awt.BorderLayout.CENTER);

        spellCheckJPanel.add(suggestionsJPanel, java.awt.BorderLayout.CENTER);

        mainJPanel.add(spellCheckJPanel, java.awt.BorderLayout.NORTH);

        optionsJPanel.setLayout(new java.awt.BorderLayout());

        commonOptionsJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Spell Check Options"));
        commonOptionsJPanel.setLayout(new java.awt.GridLayout(0, 4, 4, 4));

        backwardJCheckBox.setText(bundle.getString("Backward")); // NOI18N
        backwardJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        commonOptionsJPanel.add(backwardJCheckBox);

        recreateDirStrJCheckBox.setText(bundle.getString("Recreate_directory_structure")); // NOI18N
        recreateDirStrJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        commonOptionsJPanel.add(recreateDirStrJCheckBox);

        optionsJPanel.add(commonOptionsJPanel, java.awt.BorderLayout.NORTH);

        mainJPanel.add(optionsJPanel, java.awt.BorderLayout.SOUTH);

        filesJSplitPane.setOneTouchExpandable(true);

        fileListJScrollPane.setViewportView(fileListJList);

        filesJSplitPane.setLeftComponent(fileListJScrollPane);

        fileContentJPanel.setLayout(new java.awt.BorderLayout());
        filesJSplitPane.setRightComponent(fileContentJPanel);

        mainJPanel.add(filesJSplitPane, java.awt.BorderLayout.CENTER);

        add(mainJPanel, java.awt.BorderLayout.CENTER);
        add(commandsJPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents
    
    private void readAsJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readAsJComboBoxActionPerformed
// TODO add your handling code here:
        String selReadCorpusType = (String) readAsJComboBox.getSelectedItem();
        spellCheckerOptions.readCorpusType = (CorpusType) CorpusType.findFromId(selReadCorpusType);
        
        if(spellCheckerOptions.readCorpusType == CorpusType.CHUNKED
                || spellCheckerOptions.readCorpusType == CorpusType.XML_FORMAT) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Reading_as_") + spellCheckerOptions.readCorpusType.toString() + GlobalProperties.getIntlString("_corpus_is_not_yet_supported._Hope_it_will_be_done_soon."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
            readAsJComboBox.setSelectedItem(CorpusType.RAW.toString());
            
            return;
        }
    }//GEN-LAST:event_readAsJComboBoxActionPerformed
    
    private void outDirJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outDirJButtonActionPerformed
// TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(spellCheckerOptions.outDirectory);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File outFile = chooser.getSelectedFile();
            outDirJTextField.setText(outFile.getAbsolutePath());
        }
    }//GEN-LAST:event_outDirJButtonActionPerformed
    
    private void inDirJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inDirJButtonActionPerformed
// TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(spellCheckerOptions.inDirectory);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = chooser.showOpenDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File inFile = chooser.getSelectedFile();
            inDirJTextField.setText(inFile.getAbsolutePath());
        }
    }//GEN-LAST:event_inDirJButtonActionPerformed
    
    private void suggestedWordsJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_suggestedWordsJListMouseClicked
// TODO add your handling code here:
        if(evt.getClickCount() == 2) {
            selFile = (File) fileListJList.getSelectedValue();
            
            if(selFile != null) {
                initSpellChecker();
                
//		try
//		{
//		    wordCount = spellChecker.findAll(selFile);
//		}
//		catch(Exception ex)
//		{
//		    ex.printStackTrace();
//		}
            }
        }
    }//GEN-LAST:event_suggestedWordsJListMouseClicked
    
    private boolean initSpellChecker() {
        if(spellChecker != null) {
            if(origWordJTextArea.getText() == null || origWordJTextArea.getText().equals(""))
                spellChecker = null;
            else
                return validateSpellSpec();
        }
        
        if(spellChecker == null) {
            if(validateSpellSpec() == true) {
                try {
                    if(spellCheckerOptions.batchMode) {
                        fileContentJPanel.removeAll();
                        filesJSplitPane.setVisible(false);
                        filesJSplitPane.setVisible(true);
                        
                        spellChecker = new SpellChecker(spellCheckerOptions, fileListJList, fileContentJPanel);
                        
//			if(fileListJList.getModel().getSize() > 0)
//			{
//			    fileListJList.setSelectedIndex(0);
//			    findReplace.findAll((File) fileListJList.getSelectedValue());
//			    findReplace.find();
//			}
                    } else
                        spellChecker = new SpellChecker(spellCheckerOptions, contentJPanel);
                    
                    return true;
                    
                } catch (FileNotFoundException ex) {
                    ex.printStackTrace();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            } else
                return false;
        }
        
        return false;
    }

    public ClientType getClientType()
    {
        return clientType;
    }
    
    public void configure() {
        if(readCorpusTypes != null)
            readCorpusTypes.removeAllElements();
        
        Enumeration enm = CorpusType.elements();
        while(enm.hasMoreElements()) {
            CorpusType ct = (CorpusType) enm.nextElement();
            
            readCorpusTypes.addElement(ct.toString());
        }
        
        readAsJComboBox.setModel(readCorpusTypes);
    }
    
    public boolean validateSpellSpec() {
        initLanguage();
        
        if(spellCheckerOptions.batchMode) {
            String selReadCorpusType = (String) readAsJComboBox.getSelectedItem();
            spellCheckerOptions.readCorpusType = (CorpusType) CorpusType.findFromId(selReadCorpusType);
            
            
            if(spellCheckerOptions.readCorpusType == CorpusType.XML_FORMAT) {
                JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("XMLTagged_corpus_is_not_yet_supported._Hope_it_will_be_done_soon."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                return false;
            }
            
            spellCheckerOptions.inDirectory = inDirJTextField.getText();
            spellCheckerOptions.outDirectory = outDirJTextField.getText();
            
            inputFile = new File(spellCheckerOptions.inDirectory);
            outputFile = new File(spellCheckerOptions.outDirectory);
            
            if(inputFile.exists() == false) {
                JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Couldn't_find_input_directory."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                return false;
            } else if(inputFile.canRead() == false) {
                JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("No_read_permission_for_input_directory:\n") + spellCheckerOptions.inDirectory, GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                return false;
            } else if(inputFile.canWrite() == false) {
                JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("No_write_permission_for_input_directory:\n") + spellCheckerOptions.inDirectory, GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                return false;
            }
            
            if(spellCheckerOptions.outDirectory != null && spellCheckerOptions.outDirectory.equals("") == false && outputFile.exists() == true && outputFile.canWrite() == false) {
                JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("No_write_permission_for_output_directory:\n") + spellCheckerOptions.inDirectory, GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                return false;
            }
            
            spellCheckerOptions.charset = charsetJTextField.getText();
            
            if(FileSplitter.validateCorpusType(inputFile, spellCheckerOptions.charset, spellCheckerOptions.readCorpusType) == false) {
                JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Corpus_type_of_input_files_may_not_be_") + spellCheckerOptions.readCorpusType.toString(), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        
        spellCheckerOptions.backward = backwardJCheckBox.isSelected();
        spellCheckerOptions.recreateDirStr = recreateDirStrJCheckBox.isSelected();
        
        return true;
    }
    
    private void initActions() {
        actionMap = new Hashtable(SpellCheckerAction._TOTAL_ACTIONS_);
        actions = new SpellCheckerAction[SpellCheckerAction._TOTAL_ACTIONS_];
        
        for (int i = 0; i < SpellCheckerAction._TOTAL_ACTIONS_; i++) {
            SpellCheckerAction act = SpellCheckerAction.createAction(this, i);
            actionMap.put(act.getValue(AbstractAction.NAME), act);
            actions[i] = act;
        }
    }
    
    private void fillActionButtions() {
        commandsJPanel.removeAll();
        
        JButton button = new JButton(actions[SpellCheckerAction.CLOSE_ACTION]);
        commandsJPanel.add(button);
        
        if(spellCheckerOptions.batchMode) {
            button = new JButton(actions[SpellCheckerAction.SAVE_OUTPUT_ACTION]);
            commandsJPanel.add(button);
            
            button = new JButton(actions[SpellCheckerAction.AUTO_CORRECT_ACTION]);
            commandsJPanel.add(button);
        }
        
        button = new JButton(actions[SpellCheckerAction.ADD_TO_DICT_ACTION]);
        commandsJPanel.add(button);
        
        button = new JButton(actions[SpellCheckerAction.IGNORE_ACTION]);
        commandsJPanel.add(button);
        
        button = new JButton(actions[SpellCheckerAction.IGNORE_ALL_ACTION]);
        commandsJPanel.add(button);
        
        button = new JButton(actions[SpellCheckerAction.REPLACE_ACTION]);
        commandsJPanel.add(button);
        
        button = new JButton(actions[SpellCheckerAction.REPLACE_ALL_ACTION]);
        commandsJPanel.add(button);
        
        if(spellCheckerOptions.batchMode) {
            button = new JButton(actions[SpellCheckerAction.DEFAULTS_ACTION]);
            commandsJPanel.add(button);
        }
        
        if(spellCheckerOptions.batchMode) {
            button = new JButton(actions[SpellCheckerAction.SHOW_OPTIONS_ACTION]);
            commandsJPanel.add(button);
        }
        
        commandsJPanel.setVisible(false);
        commandsJPanel.setVisible(true);
    }
    
    private void initLanguage() {
        if(spellCheckerOptions.batchMode || spellCheckerOptions.standAlone) {
            spellCheckerOptions.language = (String) languageJComboBox.getSelectedItem();
            spellCheckerOptions.language = SanchayLanguages.getLangEncCode(spellCheckerOptions.language);
        } else {
            if(contentJPanel instanceof TextEditorJPanel) {
                spellCheckerOptions.language = ((TextEditorJPanel) contentJPanel).getLangEnc();
            }
        }
        
        UtilityFunctions.setComponentFont(senJTextArea, spellCheckerOptions.language);
        UtilityFunctions.setComponentFont(origWordJTextArea, spellCheckerOptions.language);
        UtilityFunctions.setComponentFont(editWordJTextArea, spellCheckerOptions.language);
        UtilityFunctions.setComponentFont(suggestedWordsJList, spellCheckerOptions.language);
    }
    
    public void setDefaults() {
        languageJComboBox.setSelectedItem(spellCheckerOptions.language);
        
        readAsJComboBox.setSelectedItem(CorpusType.RAW.toString());
        
        inDirJTextField.setText(spellCheckerOptions.inDirectory);
        outDirJTextField.setText(spellCheckerOptions.outDirectory);
        charsetJTextField.setText(spellCheckerOptions.charset);
        
        backwardJCheckBox.setSelected(spellCheckerOptions.backward);
        recreateDirStrJCheckBox.setSelected(spellCheckerOptions.recreateDirStr);
    }

    public String getLangEnc()
    {
        return langEnc;
    }
   
    public Frame getOwner() {
        return owner;
    }
    
    public void setOwner(Frame f) {
        owner = (JFrame) f;
    }

    public void setParentComponent(Component parentComponent)
    {
        this.parentComponent = parentComponent;
    }
    
    public void setDialog(JDialog d) {
        dialog = d;
    }

    public String getTitle() {
        return title;
    }
    
    public JMenuBar getJMenuBar() {
        return null;
    }
    
    public JPopupMenu getJPopupMenu() {
        return null;
    }
    
    public JToolBar getJToolBar() {
        return null;
    }
    
    // Actions methods
    public void close(ActionEvent e) {
        if(dialog != null)
            dialog.setVisible(false);
        else if(owner != null) {
            System.exit(0);
        }
    }
    
    public void ignore(ActionEvent e) {
        
    }
    
    public void ignoreAll(ActionEvent e) {
        
    }
    
    public void replace(ActionEvent e) {
        
    }
    
    public void replaceAll(ActionEvent e) {
        
    }
    
    public void addToDictionary(ActionEvent e) {
        
    }
    
    public void autoCorrect(ActionEvent e) {
        
    }
    
    public void showOptions(ActionEvent e) {
        if(optionsShown == true) {
            optionsShown = false;
            
            actions[SpellCheckerAction.SHOW_OPTIONS_ACTION].putValue(AbstractAction.NAME, GlobalProperties.getIntlString("Show_Options"));
            topJPanel.setVisible(false);
            optionsJPanel.setVisible(false);
        } else {
            optionsShown = true;
            
            actions[SpellCheckerAction.SHOW_OPTIONS_ACTION].putValue(AbstractAction.NAME, GlobalProperties.getIntlString("Hide_Options"));
            topJPanel.setVisible(true);
            optionsJPanel.setVisible(true);
        }
    }
    
    public void saveOutput(ActionEvent e) {
        if(validateSpellSpec() == true) {
            try {
                spellChecker.saveOutput(inputFile);
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    public void defaults(ActionEvent e) {
        setDefaults();
    }
    
    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);
        
        //Create and set up the window.
        JFrame frame = new JFrame(GlobalProperties.getIntlString("Sanchay_Spell_Checker"));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.addWindowListener(new ExitListener());
        
        //Create and set up the content pane.
        SpellCheckerJPanel newContentPane = new SpellCheckerJPanel(true);
        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);
        newContentPane.setOwner(frame);
        
        //Display the window.
        frame.pack();
        UtilityFunctions.centre(frame);
        
//        int inset = 5;
//        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
//        frame.setBounds(inset, inset,
//		screenSize.width  - inset * 2,
//		screenSize.height - inset * 9);
        
        frame.setVisible(true);
    }
    
    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JCheckBox backwardJCheckBox;
    protected javax.swing.JLabel charsetJLabel;
    protected javax.swing.JPanel charsetJPanel;
    protected javax.swing.JTextField charsetJTextField;
    protected javax.swing.JPanel commandsJPanel;
    protected javax.swing.JPanel commonOptionsJPanel;
    protected javax.swing.JPanel corpusTypeJPanel;
    protected javax.swing.JPanel corpusTypeLeftJPanel;
    protected javax.swing.JPanel corpusTypeRightJPanel;
    protected javax.swing.JComboBox dictionaryJComboBox;
    protected javax.swing.JLabel dictionaryJLabel;
    protected javax.swing.JLabel editWordJLabel;
    protected javax.swing.JScrollPane editWordJScrollPane;
    protected javax.swing.JTextArea editWordJTextArea;
    protected javax.swing.JPanel fileContentJPanel;
    protected javax.swing.JList fileListJList;
    protected javax.swing.JScrollPane fileListJScrollPane;
    protected javax.swing.JSplitPane filesJSplitPane;
    protected javax.swing.JButton inDirJButton;
    protected javax.swing.JLabel inDirJLabel;
    protected javax.swing.JPanel inDirJPanel;
    protected javax.swing.JTextField inDirJTextField;
    protected javax.swing.JPanel ioJPanel;
    protected javax.swing.JPanel langDictJPanel;
    protected javax.swing.JComboBox languageJComboBox;
    protected javax.swing.JLabel languageJLabel;
    protected javax.swing.JPanel ldLeftJPanel;
    protected javax.swing.JPanel ldRightJPanel;
    protected javax.swing.JPanel leftJPanel;
    protected javax.swing.JPanel mainJPanel;
    protected javax.swing.JPanel optionsJPanel;
    protected javax.swing.JLabel origWordJLabel;
    protected javax.swing.JScrollPane origWordJScrollPane;
    protected javax.swing.JTextArea origWordJTextArea;
    protected javax.swing.JButton outDirJButton;
    protected javax.swing.JLabel outDirJLabel;
    protected javax.swing.JPanel outDirJPanel;
    protected javax.swing.JTextField outDirJTextField;
    protected javax.swing.JComboBox readAsJComboBox;
    protected javax.swing.JLabel readAsJLabel;
    protected javax.swing.JCheckBox recreateDirStrJCheckBox;
    protected javax.swing.JPanel rightJPanel;
    protected javax.swing.JScrollPane senJScrollPane;
    protected javax.swing.JTextArea senJTextArea;
    protected javax.swing.JPanel spellCheckJPanel;
    protected javax.swing.JList suggestedWordsJList;
    protected javax.swing.JScrollPane suggestedWordsJScrollPane;
    protected javax.swing.JPanel suggestionsJPanel;
    protected javax.swing.JPanel topJPanel;
    protected javax.swing.JPanel wordJPanel;
    protected javax.swing.JPanel wrdSenJPanel;
    // End of variables declaration//GEN-END:variables
    
}
