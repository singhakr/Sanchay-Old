/*
 * DictionaryFSTJPanel.java
 *
 * Created on April 16, 2008, 4:14 AM
 */

package sanchay.text.spell.gui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JToolBar;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import sanchay.GlobalProperties;
import sanchay.gui.common.JPanelDialog;
import sanchay.gui.common.SanchayLanguages;
import sanchay.table.SanchayTableModel;
import sanchay.table.gui.SanchayTableJPanel;
import sanchay.text.DictionaryFSTNode;
import sanchay.text.spell.DictionaryFSTExt;
import sanchay.util.UtilityFunctions;
import sanchay.common.types.ClientType;

/**
 *
 * @author  anil
 */
public class DictionaryFSTJPanel extends javax.swing.JPanel implements JPanelDialog, sanchay.gui.clients.SanchayClient  {

    protected ClientType clientType = ClientType.DICTIONARY_FST;
    
    protected JFrame owner;
    protected JDialog dialog;
    protected Component parentComponent;
    
    private String langEnc = GlobalProperties.getIntlString("hin::utf8");
    protected String charset = GlobalProperties.getIntlString("UTF-8");
    
    private DefaultComboBoxModel langauges;
    private DefaultComboBoxModel encodings;
    
    protected String dictFile;
    protected String inFile;

    protected String title;
    
    protected float totalScoreCutoff = 50.0f;
    protected float scaledScoreCutoff = 20.0f;
    protected int nearest = 20;

    protected DictionaryFSTExt fst;
    
    protected SanchayTableJPanel letterPanel;
    protected SanchayTableJPanel aksharPanel;
    protected SanchayTableJPanel letterPrefixPanel;
    protected SanchayTableJPanel letterSuffixPanel;
    protected SanchayTableJPanel aksharPrefixPanel;
    protected SanchayTableJPanel aksharSuffixPanel;
    protected SanchayTableJPanel rootPanel;
    protected SanchayTableJPanel morphemePanel;

    protected DefaultListModel matchingEntries;
    protected String dictQuery;
    
    protected int letterPrefixDepth = 5;
    protected int letterSuffixDepth = 5;
    protected int aksharPrefixDepth = 3;
    protected int aksharSuffixDepth = 3;
    
    protected int letterPrefixFreq = 5;
    protected int letterSuffixFreq = 5;
    protected int aksharPrefixFreq = 3;
    protected int aksharSuffixFreq = 3;
    
    /** Creates new form DictionaryFSTJPanel */
    public DictionaryFSTJPanel() {
        initComponents();

        parentComponent = this;
        
        langauges = new DefaultComboBoxModel();
        encodings = new DefaultComboBoxModel();
        
        SanchayLanguages.fillLanguages(langauges);
        SanchayLanguages.fillEncodings(encodings, GlobalProperties.getIntlString("hin"));
        
        languageJComboBox.setModel(langauges);
        encodingJComboBox.setModel(encodings);
        
        charset = GlobalProperties.getIntlString("UTF-8");

        mainJTabbedPane.remove(letterJPanel);
        mainJTabbedPane.remove(aksharJPanel);
        mainJTabbedPane.remove(aksharPrefixJPanel);
        mainJTabbedPane.remove(aksharSuffixJPanel);
        mainJTabbedPane.remove(morphemeJPanel);

        matchingEntries = new DefaultListModel();
        entriesJList.setModel(matchingEntries);

        UtilityFunctions.setComponentFont(searchDictJTextField, langEnc);
        UtilityFunctions.setComponentFont(entriesTextJTextPane, langEnc);

        totalCutoffJTextField.setText(totalScoreCutoff + "");
        scaledCutoffJTextField.setText(scaledScoreCutoff + "");
        topNJTextField.setText(nearest + "");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loadJPanel = new javax.swing.JPanel();
        lagEncJPanel = new javax.swing.JPanel();
        languageJPanel = new javax.swing.JPanel();
        languageJLabel = new javax.swing.JLabel();
        languageJComboBox = new javax.swing.JComboBox();
        encodingJPanel = new javax.swing.JPanel();
        encodingJLabel = new javax.swing.JLabel();
        encodingJComboBox = new javax.swing.JComboBox();
        dictJPanel = new javax.swing.JPanel();
        dictFileJPanel = new javax.swing.JPanel();
        dictFileJLabel = new javax.swing.JLabel();
        dictFileJTextField = new javax.swing.JTextField();
        dictFilebuttonJPanel = new javax.swing.JPanel();
        dictFileJButton = new javax.swing.JButton();
        compileFileJButton = new javax.swing.JButton();
        corpusFileJButton = new javax.swing.JButton();
        forwardTreeJButton = new javax.swing.JButton();
        reverseTreeJButton = new javax.swing.JButton();
        recompileJCheckBox = new javax.swing.JCheckBox();
        mainJPanel = new javax.swing.JPanel();
        mainJTabbedPane = new javax.swing.JTabbedPane();
        letterJPanel = new javax.swing.JPanel();
        aksharJPanel = new javax.swing.JPanel();
        letterPrefixJPanel = new javax.swing.JPanel();
        aksharPrefixJPanel = new javax.swing.JPanel();
        letterSuffixJPanel = new javax.swing.JPanel();
        aksharSuffixJPanel = new javax.swing.JPanel();
        rootsJPanel = new javax.swing.JPanel();
        morphemeJPanel = new javax.swing.JPanel();
        searchDictJPanel = new javax.swing.JPanel();
        dictQueryJPanel = new javax.swing.JPanel();
        searchDictJLabel = new javax.swing.JLabel();
        searchDictJTextField = new javax.swing.JTextField();
        searchJButton = new javax.swing.JButton();
        surfaceSimilarityJCheckBox = new javax.swing.JCheckBox();
        totalCutoffJLabel = new javax.swing.JLabel();
        totalCutoffJTextField = new javax.swing.JTextField();
        scaledCutoffJLabel = new javax.swing.JLabel();
        scaledCutoffJTextField = new javax.swing.JTextField();
        topNJLabel = new javax.swing.JLabel();
        topNJTextField = new javax.swing.JTextField();
        inFileJLabel = new javax.swing.JLabel();
        inFileJTextField = new javax.swing.JTextField();
        inFileJButton = new javax.swing.JButton();
        normalizeJButton = new javax.swing.JButton();
        entriesJSplitPane = new javax.swing.JSplitPane();
        entriesListJPanel = new javax.swing.JPanel();
        entriesJScrollPane = new javax.swing.JScrollPane();
        entriesJList = new javax.swing.JList();
        entriesJPanel = new javax.swing.JPanel();
        entriesTextJScrollPane = new javax.swing.JScrollPane();
        entriesTextJTextPane = new javax.swing.JTextPane();
        mainCommandsJPanel = new javax.swing.JPanel();
        customAffixJPanel = new javax.swing.JPanel();
        customAffixJLabel = new javax.swing.JLabel();
        customAffixJComboBox = new javax.swing.JComboBox();
        customAffixJCheckBox = new javax.swing.JCheckBox();
        commandsJPanel = new javax.swing.JPanel();
        viewPrefixTreeJButton = new javax.swing.JButton();
        viewSuffixTreeJButton = new javax.swing.JButton();
        saveJButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        loadJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Dictionary File"));
        loadJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        lagEncJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        languageJPanel.setLayout(new java.awt.BorderLayout());

        languageJLabel.setText("Language: ");
        languageJPanel.add(languageJLabel, java.awt.BorderLayout.WEST);

        languageJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageJComboBoxActionPerformed(evt);
            }
        });
        languageJPanel.add(languageJComboBox, java.awt.BorderLayout.CENTER);

        lagEncJPanel.add(languageJPanel);

        encodingJPanel.setLayout(new java.awt.BorderLayout());

        encodingJLabel.setText("Encoding:  ");
        encodingJPanel.add(encodingJLabel, java.awt.BorderLayout.WEST);

        encodingJPanel.add(encodingJComboBox, java.awt.BorderLayout.CENTER);

        lagEncJPanel.add(encodingJPanel);

        loadJPanel.add(lagEncJPanel);

        dictJPanel.setLayout(new javax.swing.BoxLayout(dictJPanel, javax.swing.BoxLayout.LINE_AXIS));

        dictFileJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        dictFileJLabel.setText("Dictionary File: ");
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        dictFileJLabel.setToolTipText(bundle.getString("Dictionary_File")); // NOI18N
        dictFileJPanel.add(dictFileJLabel);

        dictFileJTextField.setText("                                        ");
        dictFileJTextField.setToolTipText(bundle.getString("Dictionary_File")); // NOI18N
        dictFileJPanel.add(dictFileJTextField);

        dictJPanel.add(dictFileJPanel);

        dictFilebuttonJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        dictFileJButton.setText("Dictionary");
        dictFileJButton.setToolTipText("Browse to the dictionary file");
        dictFileJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dictFileJButtonActionPerformed(evt);
            }
        });
        dictFilebuttonJPanel.add(dictFileJButton);

        compileFileJButton.setText("Compile");
        compileFileJButton.setToolTipText("Compile the dictionary file");
        compileFileJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileFileJButtonActionPerformed(evt);
            }
        });
        dictFilebuttonJPanel.add(compileFileJButton);

        corpusFileJButton.setText("Corpus");
        corpusFileJButton.setToolTipText("Browse to the corpus file");
        corpusFileJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                corpusFileJButtonActionPerformed(evt);
            }
        });
        dictFilebuttonJPanel.add(corpusFileJButton);

        forwardTreeJButton.setText("Forward FST");
        forwardTreeJButton.setToolTipText("View Forward FST");
        forwardTreeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardTreeJButtonActionPerformed(evt);
            }
        });
        dictFilebuttonJPanel.add(forwardTreeJButton);

        reverseTreeJButton.setText("Reverse FST");
        reverseTreeJButton.setToolTipText("View Reverse FST");
        reverseTreeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reverseTreeJButtonActionPerformed(evt);
            }
        });
        dictFilebuttonJPanel.add(reverseTreeJButton);

        recompileJCheckBox.setText("Recompile");
        recompileJCheckBox.setToolTipText("Recompile tje dictionary");
        recompileJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        recompileJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        dictFilebuttonJPanel.add(recompileJCheckBox);

        dictJPanel.add(dictFilebuttonJPanel);

        loadJPanel.add(dictJPanel);

        add(loadJPanel, java.awt.BorderLayout.NORTH);

        mainJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Dictionary Data"));
        mainJPanel.setLayout(new java.awt.BorderLayout(0, 4));

        letterJPanel.setLayout(new java.awt.BorderLayout());
        mainJTabbedPane.addTab("Letters", letterJPanel);

        aksharJPanel.setLayout(new java.awt.BorderLayout());
        mainJTabbedPane.addTab("Akshars", aksharJPanel);

        letterPrefixJPanel.setLayout(new java.awt.BorderLayout(4, 4));
        mainJTabbedPane.addTab("Letter Prefixes", letterPrefixJPanel);

        aksharPrefixJPanel.setLayout(new java.awt.BorderLayout());
        mainJTabbedPane.addTab("Akshar Prefixes", aksharPrefixJPanel);

        letterSuffixJPanel.setLayout(new java.awt.BorderLayout());
        mainJTabbedPane.addTab("Letter Suffixes", letterSuffixJPanel);

        aksharSuffixJPanel.setLayout(new java.awt.BorderLayout());
        mainJTabbedPane.addTab("Akshar Suffixes", aksharSuffixJPanel);

        rootsJPanel.setLayout(new java.awt.BorderLayout());
        mainJTabbedPane.addTab("Possible Roots", rootsJPanel);

        morphemeJPanel.setLayout(new java.awt.BorderLayout());
        mainJTabbedPane.addTab("Morphemes", morphemeJPanel);

        searchDictJPanel.setLayout(new java.awt.BorderLayout());

        dictQueryJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        searchDictJLabel.setText("Find: ");
        searchDictJLabel.setToolTipText("Find a word or a substring in the compiled dictionary");
        dictQueryJPanel.add(searchDictJLabel);

        searchDictJTextField.setToolTipText(bundle.getString("Dictionary_File")); // NOI18N
        searchDictJTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        searchDictJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDictJTextFieldActionPerformed(evt);
            }
        });
        searchDictJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchDictJTextFieldKeyTyped(evt);
            }
        });
        dictQueryJPanel.add(searchDictJTextField);

        searchJButton.setText("Search");
        searchJButton.setToolTipText("Search a word or a substring in the compiled dictionary");
        searchJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchJButtonActionPerformed(evt);
            }
        });
        dictQueryJPanel.add(searchJButton);

        surfaceSimilarityJCheckBox.setSelected(true);
        surfaceSimilarityJCheckBox.setText("Surface Similarity");
        surfaceSimilarityJCheckBox.setToolTipText("Apply Surface Similarity");
        dictQueryJPanel.add(surfaceSimilarityJCheckBox);

        totalCutoffJLabel.setText("Cutoff (Total)");
        totalCutoffJLabel.setToolTipText("Cutoff for the total score");
        dictQueryJPanel.add(totalCutoffJLabel);

        totalCutoffJTextField.setToolTipText(bundle.getString("Dictionary_File")); // NOI18N
        totalCutoffJTextField.setPreferredSize(new java.awt.Dimension(50, 19));
        totalCutoffJTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                totalCutoffJTextFieldCaretUpdate(evt);
            }
        });
        totalCutoffJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                totalCutoffJTextFieldKeyTyped(evt);
            }
        });
        dictQueryJPanel.add(totalCutoffJTextField);

        scaledCutoffJLabel.setText("Cutoff (Scaled)");
        scaledCutoffJLabel.setToolTipText("Cutoff for the scaled score");
        dictQueryJPanel.add(scaledCutoffJLabel);

        scaledCutoffJTextField.setToolTipText(bundle.getString("Dictionary_File")); // NOI18N
        scaledCutoffJTextField.setPreferredSize(new java.awt.Dimension(50, 19));
        scaledCutoffJTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                scaledCutoffJTextFieldCaretUpdate(evt);
            }
        });
        scaledCutoffJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                scaledCutoffJTextFieldKeyTyped(evt);
            }
        });
        dictQueryJPanel.add(scaledCutoffJTextField);

        topNJLabel.setText("Top N");
        topNJLabel.setToolTipText("Top N matches to be listed");
        dictQueryJPanel.add(topNJLabel);

        topNJTextField.setToolTipText(bundle.getString("Dictionary_File")); // NOI18N
        topNJTextField.setPreferredSize(new java.awt.Dimension(50, 19));
        topNJTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                topNJTextFieldCaretUpdate(evt);
            }
        });
        topNJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                topNJTextFieldKeyTyped(evt);
            }
        });
        dictQueryJPanel.add(topNJTextField);

        inFileJLabel.setText(bundle.getString("File:_")); // NOI18N
        inFileJLabel.setToolTipText(bundle.getString("Normalize_a_file")); // NOI18N
        dictQueryJPanel.add(inFileJLabel);

        inFileJTextField.setToolTipText(bundle.getString("Input_file")); // NOI18N
        inFileJTextField.setPreferredSize(new java.awt.Dimension(200, 19));
        inFileJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inFileJTextFieldKeyTyped(evt);
            }
        });
        dictQueryJPanel.add(inFileJTextField);

        inFileJButton.setText(bundle.getString("File")); // NOI18N
        inFileJButton.setToolTipText(bundle.getString("Browse_to_the_file_to_be_normalized")); // NOI18N
        inFileJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inFileJButtonActionPerformed(evt);
            }
        });
        dictQueryJPanel.add(inFileJButton);

        normalizeJButton.setText(bundle.getString("Normalize")); // NOI18N
        normalizeJButton.setToolTipText(bundle.getString("Normalize_the_file_using_surface_similarity")); // NOI18N
        normalizeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeJButtonActionPerformed(evt);
            }
        });
        dictQueryJPanel.add(normalizeJButton);

        searchDictJPanel.add(dictQueryJPanel, java.awt.BorderLayout.NORTH);

        entriesJSplitPane.setOneTouchExpandable(true);

        entriesListJPanel.setPreferredSize(new java.awt.Dimension(200, 10));
        entriesListJPanel.setLayout(new java.awt.BorderLayout());

        entriesJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        entriesJScrollPane.setViewportView(entriesJList);

        entriesListJPanel.add(entriesJScrollPane, java.awt.BorderLayout.CENTER);

        entriesJSplitPane.setLeftComponent(entriesListJPanel);

        entriesJPanel.setLayout(new java.awt.BorderLayout());

        entriesTextJScrollPane.setViewportView(entriesTextJTextPane);

        entriesJPanel.add(entriesTextJScrollPane, java.awt.BorderLayout.CENTER);

        entriesJSplitPane.setRightComponent(entriesJPanel);

        searchDictJPanel.add(entriesJSplitPane, java.awt.BorderLayout.CENTER);

        mainJTabbedPane.addTab("Search Dictionary", searchDictJPanel);

        mainJPanel.add(mainJTabbedPane, java.awt.BorderLayout.CENTER);

        mainCommandsJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        customAffixJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        customAffixJLabel.setText(bundle.getString("Affix:_")); // NOI18N
        customAffixJPanel.add(customAffixJLabel);

        customAffixJComboBox.setEditable(true);
        customAffixJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customAffixJComboBoxActionPerformed(evt);
            }
        });
        customAffixJPanel.add(customAffixJComboBox);

        customAffixJCheckBox.setText(bundle.getString("Use_It")); // NOI18N
        customAffixJCheckBox.setToolTipText(bundle.getString("Use_custom_affix_field?")); // NOI18N
        customAffixJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        customAffixJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        customAffixJPanel.add(customAffixJCheckBox);

        mainCommandsJPanel.add(customAffixJPanel);

        commandsJPanel.setLayout(new java.awt.GridLayout(1, 0, 4, 0));

        viewPrefixTreeJButton.setText(bundle.getString("View_Prefix_Tree")); // NOI18N
        viewPrefixTreeJButton.setToolTipText(bundle.getString("View_Prefix_Tree")); // NOI18N
        viewPrefixTreeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPrefixTreeJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(viewPrefixTreeJButton);

        viewSuffixTreeJButton.setText(bundle.getString("View_Suffix_Tree")); // NOI18N
        viewSuffixTreeJButton.setToolTipText(bundle.getString("View_Suffix_Tree")); // NOI18N
        viewSuffixTreeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSuffixTreeJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(viewSuffixTreeJButton);

        saveJButton.setText(bundle.getString("Save")); // NOI18N
        saveJButton.setToolTipText(bundle.getString("Save_the_dictionary")); // NOI18N
        saveJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJButtonActionPerformed(evt);
            }
        });
        commandsJPanel.add(saveJButton);

        mainCommandsJPanel.add(commandsJPanel);

        mainJPanel.add(mainCommandsJPanel, java.awt.BorderLayout.SOUTH);

        add(mainJPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    
    private void customAffixJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customAffixJComboBoxActionPerformed
// TODO add your handling code here:
        String text = (String) customAffixJComboBox.getSelectedItem();
        
        UtilityFunctions.addItemToJCoboBox(customAffixJComboBox, text);
    }//GEN-LAST:event_customAffixJComboBoxActionPerformed
    
    private void saveJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJButtonActionPerformed
// TODO add your handling code here:
        dictFile = dictFileJTextField.getText();
        
        File dfile = new File(dictFile);
        
        if(dfile.exists() == false) {
            return;
        }
        
        File ffile = new File(GlobalProperties.getHomeDirectory() + "/" + "tmp/" + dfile.getName() + GlobalProperties.getIntlString(".forward"));
        File bfile = new File(GlobalProperties.getHomeDirectory() + "/" + "tmp/" + dfile.getName() + GlobalProperties.getIntlString(".reverse"));
        
        try {
            
            fst.save(dictFile, charset, ffile.getAbsolutePath(), bfile.getAbsolutePath());
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_saveJButtonActionPerformed
    
    private void viewSuffixTreeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSuffixTreeJButtonActionPerformed
// TODO add your handling code here:
//        if(letterSuffixJPanel.hasFocus())
        viewAffixTree(true);
    }//GEN-LAST:event_viewSuffixTreeJButtonActionPerformed
    
    private void viewPrefixTreeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPrefixTreeJButtonActionPerformed
// TODO add your handling code here:
//        if(letterPrefixJPanel.hasFocus())
        viewAffixTree(false);
    }//GEN-LAST:event_viewPrefixTreeJButtonActionPerformed
    
    private void compileFileJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileFileJButtonActionPerformed
// TODO add your handling code here:
        Cursor cursor = owner.getCursor();
        owner.setCursor(Cursor.WAIT_CURSOR);

        dictFile = dictFileJTextField.getText();
        
        File dfile = new File(dictFile);
        
        if(dfile.exists() == false) {
            return;
        }
        
        File ffile = new File(GlobalProperties.getHomeDirectory() + "/" + "tmp/" + dfile.getName() + GlobalProperties.getIntlString(".forward"));
        File bfile = new File(GlobalProperties.getHomeDirectory() + "/" + "tmp/" + dfile.getName() + GlobalProperties.getIntlString(".reverse"));
        
        langEnc = (String) languageJComboBox.getSelectedItem();
        charset = (String) encodingJComboBox.getSelectedItem();
        
        if( (ffile.exists() && bfile.exists()) && recompileJCheckBox.isSelected()) {
            ffile.delete();
            bfile.delete();
        }
        
        try {
            fst = new DictionaryFSTExt(dictFile, charset, ffile.getAbsolutePath(), bfile.getAbsolutePath(), true, 0);
            
            addLetterTable();
            addAksharTable();
            addLetterAffixTable(false);
            addLetterAffixTable(true);
            addAksharAffixTable(false);
            addAksharAffixTable(true);
            addRootTable();
            addMorphemeTable();
            
            mainJTabbedPane.setVisible(false);
            mainJTabbedPane.setVisible(true);

            fst.loadPhoneticModelOfScripts();
            
            owner.setCursor(cursor);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("Error_in_the_file_") + dictFile
                    + "\n" + GlobalProperties.getIntlString("The_format_required_is_a_text_file_with_two_tab_separated_columns.")
                    + "\n" + GlobalProperties.getIntlString("The_first_column_should_have_a_word_and_the_second_its_frequency."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);

            ex.printStackTrace();

            owner.setCursor(cursor);
        }
    }//GEN-LAST:event_compileFileJButtonActionPerformed
    
    private void languageJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageJComboBoxActionPerformed
// TODO add your handling code here:
        langEnc = (String) languageJComboBox.getSelectedItem();
        SanchayLanguages.fillEncodings(encodings, SanchayLanguages.getLanguageCode(langEnc));
    }//GEN-LAST:event_languageJComboBoxActionPerformed
    
    private void corpusFileJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_corpusFileJButtonActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_corpusFileJButtonActionPerformed
    
    private void reverseTreeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reverseTreeJButtonActionPerformed
// TODO add your handling code here:
        int returnVal = JOptionPane.showConfirmDialog(parentComponent, GlobalProperties.getIntlString("You_have_asked_to_show_the_visualization_of_the_complete_FST.")
                + GlobalProperties.getIntlString("\nThis_may_take_a_lot_of_time,_depending_on_the_dictionary_size.")
                + GlobalProperties.getIntlString("Do_you_want_to_continue?"), GlobalProperties.getIntlString("Caution"), JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

        if(returnVal == JOptionPane.YES_OPTION)
        {
            Cursor cursor = owner.getCursor();
            owner.setCursor(Cursor.WAIT_CURSOR);

            fst.showTreeView(true, SanchayLanguages.getLangEncCode(langEnc, charset));

            owner.setCursor(cursor);
        }
    }//GEN-LAST:event_reverseTreeJButtonActionPerformed
    
    private void forwardTreeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardTreeJButtonActionPerformed
// TODO add your handling code here:
        int returnVal = JOptionPane.showConfirmDialog(parentComponent, GlobalProperties.getIntlString("You_have_asked_to_show_the_visualization_of_the_complete_FST.")
                + GlobalProperties.getIntlString("\nThis_may_take_a_lot_of_time,_depending_on_the_dictionary_size.")
                + GlobalProperties.getIntlString("Do_you_want_to_continue?"), GlobalProperties.getIntlString("Caution"), JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

        if(returnVal == JOptionPane.YES_OPTION)
        {
            Cursor cursor = owner.getCursor();
            owner.setCursor(Cursor.WAIT_CURSOR);

            fst.showTreeView(false, SanchayLanguages.getLangEncCode(langEnc, charset));

            owner.setCursor(cursor);
        }
    }//GEN-LAST:event_forwardTreeJButtonActionPerformed
    
    private void dictFileJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dictFileJButtonActionPerformed
// TODO add your handling code here:
//        String path = "props/spell-checker";

        String path = GlobalProperties.resolveRelativePath("data/word-translation/word-lists");
        
        if(dictFile != null) {
            File dfile = new File(dictFile);
            
            if(dfile.exists()) {
                path = dfile.getParentFile().getAbsolutePath();
            }
        }
        
        JFileChooser chooser = null;
        
        if(path != null)
            chooser = new JFileChooser(path);
        else
            chooser = new JFileChooser();
        
        int returnVal = chooser.showOpenDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            dictFile = chooser.getSelectedFile().getAbsolutePath();
            dictFileJTextField.setText(dictFile);
        }
    }//GEN-LAST:event_dictFileJButtonActionPerformed

    private void searchJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchJButtonActionPerformed
    {//GEN-HEADEREND:event_searchJButtonActionPerformed
        // TODO add your handling code here:
        search();
    }//GEN-LAST:event_searchJButtonActionPerformed

    private void totalCutoffJTextFieldCaretUpdate(javax.swing.event.CaretEvent evt)//GEN-FIRST:event_totalCutoffJTextFieldCaretUpdate
    {//GEN-HEADEREND:event_totalCutoffJTextFieldCaretUpdate
        // TODO add your handling code here:
        try
        {
            totalScoreCutoff = Float.parseFloat(totalCutoffJTextField.getText());
        }
        catch(NumberFormatException ex)
        {
            ex.printStackTrace();
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }

        if(fst != null)
            fst.setTotalScoreCutoff(totalScoreCutoff);
}//GEN-LAST:event_totalCutoffJTextFieldCaretUpdate

    private void scaledCutoffJTextFieldCaretUpdate(javax.swing.event.CaretEvent evt)//GEN-FIRST:event_scaledCutoffJTextFieldCaretUpdate
    {//GEN-HEADEREND:event_scaledCutoffJTextFieldCaretUpdate
        // TODO add your handling code here:
        try
        {
            scaledScoreCutoff = Float.parseFloat(scaledCutoffJTextField.getText());
        }
        catch(NumberFormatException ex)
        {
            ex.printStackTrace();
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }

        if(fst != null)
            fst.setScaledScoreCutoff(scaledScoreCutoff);
}//GEN-LAST:event_scaledCutoffJTextFieldCaretUpdate

    private void topNJTextFieldCaretUpdate(javax.swing.event.CaretEvent evt)//GEN-FIRST:event_topNJTextFieldCaretUpdate
    {//GEN-HEADEREND:event_topNJTextFieldCaretUpdate
        // TODO add your handling code here:
        try
        {
            nearest = Integer.parseInt(topNJTextField.getText());
        }
        catch(NumberFormatException ex)
        {
            ex.printStackTrace();
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
}//GEN-LAST:event_topNJTextFieldCaretUpdate

    private void searchDictJTextFieldKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_searchDictJTextFieldKeyTyped
    {//GEN-HEADEREND:event_searchDictJTextFieldKeyTyped
        // TODO add your handling code here:
        if(evt.getKeyChar() == KeyEvent.VK_ENTER)
            search();
    }//GEN-LAST:event_searchDictJTextFieldKeyTyped

    private void totalCutoffJTextFieldKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_totalCutoffJTextFieldKeyTyped
    {//GEN-HEADEREND:event_totalCutoffJTextFieldKeyTyped
        // TODO add your handling code here:
        if(evt.getKeyChar() == KeyEvent.VK_ENTER)
            search();
    }//GEN-LAST:event_totalCutoffJTextFieldKeyTyped

    private void scaledCutoffJTextFieldKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_scaledCutoffJTextFieldKeyTyped
    {//GEN-HEADEREND:event_scaledCutoffJTextFieldKeyTyped
        // TODO add your handling code here:
        if(evt.getKeyChar() == KeyEvent.VK_ENTER)
            search();
    }//GEN-LAST:event_scaledCutoffJTextFieldKeyTyped

    private void topNJTextFieldKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_topNJTextFieldKeyTyped
    {//GEN-HEADEREND:event_topNJTextFieldKeyTyped
        // TODO add your handling code here:
        if(evt.getKeyChar() == KeyEvent.VK_ENTER)
            search();
    }//GEN-LAST:event_topNJTextFieldKeyTyped

    private void inFileJTextFieldKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_inFileJTextFieldKeyTyped
    {//GEN-HEADEREND:event_inFileJTextFieldKeyTyped
        // TODO add your handling code here:

}//GEN-LAST:event_inFileJTextFieldKeyTyped

    private void normalizeJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_normalizeJButtonActionPerformed
    {//GEN-HEADEREND:event_normalizeJButtonActionPerformed
        // TODO add your handling code here:
        normalize();
}//GEN-LAST:event_normalizeJButtonActionPerformed

    private void searchDictJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchDictJTextFieldActionPerformed
    {//GEN-HEADEREND:event_searchDictJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchDictJTextFieldActionPerformed

    private void inFileJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_inFileJButtonActionPerformed
    {//GEN-HEADEREND:event_inFileJButtonActionPerformed
        // TODO add your handling code here:

        String path = "/home/anil/tmp/feature_based_code";

        if(inFile != null) {
            File dfile = new File(inFile);

            if(dfile.exists()) {
                path = dfile.getParentFile().getAbsolutePath();
            }
        }

        JFileChooser chooser = null;

        if(path != null)
            chooser = new JFileChooser(path);
        else
            chooser = new JFileChooser();

        int returnVal = chooser.showOpenDialog(this);

        if(returnVal == JFileChooser.APPROVE_OPTION) {
            inFile = chooser.getSelectedFile().getAbsolutePath();
            inFileJTextField.setText(inFile);
        }
}//GEN-LAST:event_inFileJButtonActionPerformed

    public ClientType getClientType()
    {
        return clientType;
    }

    private void normalize()
    {
        if(surfaceSimilarityJCheckBox.isSelected())
        {
            inFile = inFileJTextField.getText();

            if((new File(inFile)).exists() == false)
            {
                JOptionPane.showMessageDialog(parentComponent, GlobalProperties.getIntlString("File_not_found:_\n") + inFile
                        + GlobalProperties.getIntlString("\nPlease_select_a_valid_file."), GlobalProperties.getIntlString("Error"), JOptionPane.ERROR_MESSAGE);
                return;
            }

            BufferedReader inReader = null;

            try
            {
                if(charset != null && charset.equals("") == false)
                    inReader = new BufferedReader(new InputStreamReader(new FileInputStream(inFile), charset));
                else
                    inReader = new BufferedReader(new InputStreamReader(new FileInputStream(inFile)));

                String line = "";

                String normalizedText = "";

                matchingEntries.removeAllElements();

                while((line = inReader.readLine()) != null) {

                    String words[] = line.split(" ");

                    for (int i = 0; i < words.length; i++)
                    {
                        String string = words[i];

                        string = string.trim();

                        if(string.equals(""))
                            continue;
                        
                        LinkedHashMap<DictionaryFSTNode,Double> nearestMatches = fst.getNearestWords(string.trim(), 1, false);

                        if(nearestMatches.isEmpty())
                        {
                            matchingEntries.addElement(GlobalProperties.getIntlString("Not_Found") + "(" + string + ")");

                            normalizedText += string + " ";
                        }
                        else
                        {
                            Iterator itr = nearestMatches.keySet().iterator();

                            if(itr.hasNext())
                            {
                                DictionaryFSTNode nword = (DictionaryFSTNode) itr.next();

                                normalizedText += nword.getWordString() + " ";
                            }
                        }
                    }

                    normalizedText += "\n";
                }

                entriesTextJTextPane.setText(normalizedText);

            } catch (FileNotFoundException ex)
            {
                Logger.getLogger(DictionaryFSTJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex)
            {
                Logger.getLogger(DictionaryFSTJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex)
            {
                Logger.getLogger(DictionaryFSTJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void search()
    {
        matchingEntries.removeAllElements();
        dictQuery = searchDictJTextField.getText();

        if(surfaceSimilarityJCheckBox.isSelected())
        {
            LinkedHashMap<DictionaryFSTNode,Double> nearestMatches = fst.getNearestWords(dictQuery, nearest, false);

            if(nearestMatches.isEmpty())
                matchingEntries.addElement(GlobalProperties.getIntlString("Not_found") + "(" + dictQuery + ")");
            else
            {
                Iterator itr = nearestMatches.keySet().iterator();

                while(itr.hasNext())
                {
                    Object key = itr.next();
                    matchingEntries.addElement(((DictionaryFSTNode) key).getWordString() + " : " + nearestMatches.get(key));
                }
            }
        }
        else
        {
            Vector<DictionaryFSTNode> matchingNodes = new Vector<DictionaryFSTNode>(0, 10);

            matchingNodes = UtilityFunctions.getTopNElements(matchingNodes, nearest);

            fst.getMatchingNodes(fst.getRoot(), dictQuery, matchingNodes);

            if(matchingNodes != null)
            {
                int count = matchingNodes.size();

                for (int i = 0; i < count; i++)
                {
                    matchingEntries.addElement(matchingNodes.get(i).getWordString());
                }

            }
            else
                matchingEntries.addElement(GlobalProperties.getIntlString("Not_found") + "(" + dictQuery + ")");
        }
    }

    private void viewAffixTree(boolean rev) {
        SanchayTableModel tbl = null;
        
        if(rev)
            tbl = (SanchayTableModel) letterSuffixPanel.getJTable().getModel();
        else
            tbl = (SanchayTableModel) letterPrefixPanel.getJTable().getModel();
        
        Vector nodes = new Vector();
        String affix = "";
        
        if(customAffixJCheckBox.isSelected()) {
            affix = (String) customAffixJComboBox.getSelectedItem();
            
            if(rev)
                affix = UtilityFunctions.reverseString(affix);
            
            if(affix.equals("") == false)
                fst.getRoot(rev).getNodesForPrefix(affix, nodes);
        } else {
            int row = 0;
            
            if(rev) {
                row = letterSuffixPanel.getJTable().getSelectedRow();
                row = letterSuffixPanel.getJTable().getRowSorter().convertRowIndexToModel(row);
            } else {
                row = letterPrefixPanel.getJTable().getSelectedRow();
                row = letterPrefixPanel.getJTable().getRowSorter().convertRowIndexToModel(row);
            }
            
            if(row >=0 && row < tbl.getRowCount()) {
                affix = (String) tbl.getValueAt(row, 0);
                
                if(rev)
                    affix = UtilityFunctions.reverseString(affix);
                
                fst.getRoot(rev).getNodesForPrefix(affix, nodes);
            }
        }
        
//        if(rev)
//            affix = UtilityFunctions.reverseString(affix);
        
        if(nodes.size() > 0)
            ((DictionaryFSTNode)nodes.get(0)).showTreeView(SanchayLanguages.getLangEncCode(langEnc, charset), affix);
    }
    
    private void addLetterTable() {
        SanchayTableModel table = fst.getLetterTable();
        table.setEditable(false);
        letterPanel = SanchayTableJPanel.createTableDefaultJPanel(table, GlobalProperties.getIntlString("hin::utf8"));
        letterPanel.setSortable(true);
        
        TableRowSorter<TableModel> sorter = (TableRowSorter<TableModel>) letterPanel.getJTable().getRowSorter();
        sorter.setComparator(1, new Comparator<Long>() {
            public int compare(Long l1, Long l2) {
                
                if(l1.longValue() > l2.longValue())
                    return 1;
                else if(l1.longValue() < l2.longValue())
                    return -1;
                
                return 0;
            }
        }
        );
        
        UtilityFunctions.setComponentFont(letterPanel.getJTable(), SanchayLanguages.getLangEncCode(langEnc, charset));
        
        letterJPanel.removeAll();
        letterJPanel.add(letterPanel, BorderLayout.CENTER);
    }
    
    private void addAksharTable() {
        SanchayTableModel table = fst.getAksharTable();
        table.setEditable(false);
        aksharPanel = SanchayTableJPanel.createTableDefaultJPanel(table, GlobalProperties.getIntlString("hin::utf8"));
        aksharPanel.setSortable(true);
        
        TableRowSorter<TableModel> sorter = (TableRowSorter<TableModel>) aksharPanel.getJTable().getRowSorter();
        sorter.setComparator(1, new Comparator<Long>() {
            public int compare(Long l1, Long l2) {
                
                if(l1.longValue() > l2.longValue())
                    return 1;
                else if(l1.longValue() < l2.longValue())
                    return -1;
                
                return 0;
            }
        }
        );
        
        UtilityFunctions.setComponentFont(aksharPanel.getJTable(), SanchayLanguages.getLangEncCode(langEnc, charset));
        
        aksharJPanel.removeAll();
        aksharJPanel.add(aksharPanel, BorderLayout.CENTER);
    }
    
    private void addLetterAffixTable(boolean reverse) {
        SanchayTableModel table = fst.getLetterAffixTable(reverse, letterSuffixDepth, letterSuffixFreq);
        
        table.setEditable(false);
        
        SanchayTableJPanel letterAffixPanel = null;
        
        letterAffixPanel = SanchayTableJPanel.createTableDefaultJPanel(table, GlobalProperties.getIntlString("hin::utf8"));
        letterAffixPanel.setSortable(true);
        
        TableRowSorter<TableModel> sorter = (TableRowSorter<TableModel>) letterAffixPanel.getJTable().getRowSorter();
        sorter.setComparator(1, new Comparator<Long>() {
            public int compare(Long l1, Long l2) {
                
                if(l1.longValue() > l2.longValue())
                    return 1;
                else if(l1.longValue() < l2.longValue())
                    return -1;
                
                return 0;
            }
        }
        );
        
        UtilityFunctions.setComponentFont(letterAffixPanel.getJTable(), SanchayLanguages.getLangEncCode(langEnc, charset));
        
        if(reverse) {
            letterSuffixJPanel.removeAll();
            letterSuffixJPanel.add(letterAffixPanel, BorderLayout.CENTER);
        } else {
            letterPrefixJPanel.removeAll();
            letterPrefixJPanel.add(letterAffixPanel, BorderLayout.CENTER);
        }
        
        if(reverse)
            letterSuffixPanel = letterAffixPanel;
        else
            letterPrefixPanel = letterAffixPanel;
    }
    
    private void addAksharAffixTable(boolean reverse) {
        SanchayTableModel table = fst.getAksharAffixTable(reverse, aksharSuffixDepth, aksharSuffixFreq);
        
        table.setEditable(false);
        
        SanchayTableJPanel aksharAffixPanel = null;
        
        aksharAffixPanel = SanchayTableJPanel.createTableDefaultJPanel(table, GlobalProperties.getIntlString("hin::utf8"));
        aksharAffixPanel.setSortable(true);
        
        TableRowSorter<TableModel> sorter = (TableRowSorter<TableModel>) aksharAffixPanel.getJTable().getRowSorter();
        sorter.setComparator(1, new Comparator<Long>() {
            public int compare(Long l1, Long l2) {
                
                if(l1.longValue() > l2.longValue())
                    return 1;
                else if(l1.longValue() < l2.longValue())
                    return -1;
                
                return 0;
            }
        }
        );
        
        UtilityFunctions.setComponentFont(aksharAffixPanel.getJTable(), SanchayLanguages.getLangEncCode(langEnc, charset));
        
        if(reverse) {
            aksharSuffixJPanel.removeAll();
            aksharSuffixJPanel.add(aksharAffixPanel, BorderLayout.CENTER);
        } else {
            aksharPrefixJPanel.removeAll();
            aksharPrefixJPanel.add(aksharAffixPanel, BorderLayout.CENTER);
        }
        
        if(reverse)
            aksharSuffixPanel = aksharAffixPanel;
        else
            aksharPrefixPanel = aksharAffixPanel;
    }
    
    private void addRootTable() {
        SanchayTableModel table = fst.getRootTable();
        table.setEditable(false);
        rootPanel = SanchayTableJPanel.createTableDefaultJPanel(table, GlobalProperties.getIntlString("hin::utf8"));
        rootPanel.setSortable(true);
        
        TableRowSorter<TableModel> sorter = (TableRowSorter<TableModel>) rootPanel.getJTable().getRowSorter();
        sorter.setComparator(1, new Comparator<Long>() {
            public int compare(Long l1, Long l2) {
                
                if(l1.longValue() > l2.longValue())
                    return 1;
                else if(l1.longValue() < l2.longValue())
                    return -1;
                
                return 0;
            }
        }
        );
        
        UtilityFunctions.setComponentFont(rootPanel.getJTable(), SanchayLanguages.getLangEncCode(langEnc, charset));
        
        rootsJPanel.removeAll();
        rootsJPanel.add(rootPanel, BorderLayout.CENTER);
    }
    
    private void addMorphemeTable() {
        SanchayTableModel table = fst.getMorphemeTable();
        table.setEditable(false);
        morphemePanel = SanchayTableJPanel.createTableDefaultJPanel(table, GlobalProperties.getIntlString("hin::utf8"));
        morphemePanel.setSortable(true);
        
        TableRowSorter<TableModel> sorter = (TableRowSorter<TableModel>) morphemePanel.getJTable().getRowSorter();
        sorter.setComparator(1, new Comparator<Long>() {
            public int compare(Long l1, Long l2) {
                
                if(l1.longValue() > l2.longValue())
                    return 1;
                else if(l1.longValue() < l2.longValue())
                    return -1;
                
                return 0;
            }
        }
        );
        
        UtilityFunctions.setComponentFont(morphemePanel.getJTable(), SanchayLanguages.getLangEncCode(langEnc, charset));
        
        morphemeJPanel.removeAll();
        morphemeJPanel.add(morphemePanel, BorderLayout.CENTER);
    }

    public String getLangEnc()
    {
        return langEnc;
    }

    public Frame getOwner() {
        return owner;
    }

    public void setOwner(Frame frame) {
        owner = (JFrame) frame;
    }

    public void setParentComponent(Component parentComponent)
    {
        this.parentComponent = parentComponent;
    }
    
    public void setDialog(JDialog dialog) {
        this.dialog = dialog;
    }

    public String getTitle() {
        return title;
    }
    
    public JMenuBar getJMenuBar() {
        return null;
    }
    
    public JPopupMenu getJPopupMenu() {
        return null;
    }
    
    public JToolBar getJToolBar() {
        return null;
    }
    
    private static void createAndShowGUI() {
        //Create and set up the window.
        JFrame frame = new JFrame(GlobalProperties.getIntlString("Dictionary_Data_Browser"));
        UtilityFunctions.setComponentFont(frame, GlobalProperties.getIntlString("hin::utf8"));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        //Create and set up the menu bar and content pane.
        DictionaryFSTJPanel demo = new DictionaryFSTJPanel();
        demo.setOpaque(true); //content panes must be opaque
        frame.setContentPane(demo);
        
        demo.setOwner(frame);
        
        //Display the window.
        frame.pack();
        
        int inset = 5;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setBounds(inset, inset,
                screenSize.width  - inset*2,
                screenSize.height - inset*9);
        
        frame.setVisible(true);
        
        demo.requestFocusInWindow();
    }
    
    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel aksharJPanel;
    private javax.swing.JPanel aksharPrefixJPanel;
    private javax.swing.JPanel aksharSuffixJPanel;
    private javax.swing.JPanel commandsJPanel;
    private javax.swing.JButton compileFileJButton;
    private javax.swing.JButton corpusFileJButton;
    private javax.swing.JCheckBox customAffixJCheckBox;
    private javax.swing.JComboBox customAffixJComboBox;
    private javax.swing.JLabel customAffixJLabel;
    private javax.swing.JPanel customAffixJPanel;
    private javax.swing.JButton dictFileJButton;
    private javax.swing.JLabel dictFileJLabel;
    private javax.swing.JPanel dictFileJPanel;
    private javax.swing.JTextField dictFileJTextField;
    private javax.swing.JPanel dictFilebuttonJPanel;
    private javax.swing.JPanel dictJPanel;
    private javax.swing.JPanel dictQueryJPanel;
    private javax.swing.JComboBox encodingJComboBox;
    private javax.swing.JLabel encodingJLabel;
    private javax.swing.JPanel encodingJPanel;
    private javax.swing.JList entriesJList;
    private javax.swing.JPanel entriesJPanel;
    private javax.swing.JScrollPane entriesJScrollPane;
    private javax.swing.JSplitPane entriesJSplitPane;
    private javax.swing.JPanel entriesListJPanel;
    private javax.swing.JScrollPane entriesTextJScrollPane;
    private javax.swing.JTextPane entriesTextJTextPane;
    private javax.swing.JButton forwardTreeJButton;
    private javax.swing.JButton inFileJButton;
    private javax.swing.JLabel inFileJLabel;
    private javax.swing.JTextField inFileJTextField;
    private javax.swing.JPanel lagEncJPanel;
    private javax.swing.JComboBox languageJComboBox;
    private javax.swing.JLabel languageJLabel;
    private javax.swing.JPanel languageJPanel;
    private javax.swing.JPanel letterJPanel;
    private javax.swing.JPanel letterPrefixJPanel;
    private javax.swing.JPanel letterSuffixJPanel;
    private javax.swing.JPanel loadJPanel;
    private javax.swing.JPanel mainCommandsJPanel;
    private javax.swing.JPanel mainJPanel;
    private javax.swing.JTabbedPane mainJTabbedPane;
    private javax.swing.JPanel morphemeJPanel;
    private javax.swing.JButton normalizeJButton;
    private javax.swing.JCheckBox recompileJCheckBox;
    private javax.swing.JButton reverseTreeJButton;
    private javax.swing.JPanel rootsJPanel;
    private javax.swing.JButton saveJButton;
    private javax.swing.JLabel scaledCutoffJLabel;
    private javax.swing.JTextField scaledCutoffJTextField;
    private javax.swing.JLabel searchDictJLabel;
    private javax.swing.JPanel searchDictJPanel;
    private javax.swing.JTextField searchDictJTextField;
    private javax.swing.JButton searchJButton;
    private javax.swing.JCheckBox surfaceSimilarityJCheckBox;
    private javax.swing.JLabel topNJLabel;
    private javax.swing.JTextField topNJTextField;
    private javax.swing.JLabel totalCutoffJLabel;
    private javax.swing.JTextField totalCutoffJTextField;
    private javax.swing.JButton viewPrefixTreeJButton;
    private javax.swing.JButton viewSuffixTreeJButton;
    // End of variables declaration//GEN-END:variables
    
}
