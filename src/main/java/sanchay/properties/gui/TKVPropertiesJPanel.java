/*
 * PropertyTokensJPanel.java
 *
 * Created on October 15, 2005, 8:30 PM
 */

package sanchay.properties.gui;

import java.io.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import sanchay.GlobalProperties;
import sanchay.common.types.*;

import sanchay.gui.*;
import sanchay.table.*;
import sanchay.table.TableSorter;
import sanchay.gui.common.*;

/**
 *
 * @author  anil
 */
public class TKVPropertiesJPanel extends javax.swing.JPanel
        implements DataStructureJPanelInterface {
    
    private JFrame owner;
    private JDialog dialog;
    
    private boolean sortable;
    
    public static final int EDIT_CMD = 0;

    public static final int SAVE_CMD = 1;
    public static final int SAVE_AS_CMD = 2;
    
    public static final int RESET_ALL_CMD = 3;
    public static final int CLEAR_ALL_CMD = 4;
    
    public static final int ADD_ITEM_CMD = 5;
    public static final int INSERT_ITEM_CMD = 6;
    public static final int DEL_ITEM_CMD = 7;

    public static final int MOVE_UP_CMD = 8;
    public static final int MOVE_DOWN_CMD = 9;
    
    private boolean allCommands[];
    private JMenuItem menuItems[];
            
    /** Creates new form PropertyTokensJPanel */
    public TKVPropertiesJPanel(String f, String charset, boolean sortable, int appliedCommands[])
            throws FileNotFoundException, IOException
    {
        this.sortable = sortable;

        initComponents();
        
        SanchayTableModel table = new SanchayTableModel(f, charset);
        tableJTable.setModel(table);

        if(sortable)
            setSortable(true);

        tableJTable.setPreferredScrollableViewportSize(new Dimension(500, 120));

        MouseListener popupListener = new PopupListener(propJPopupMenu);
        tableJTable.addMouseListener(popupListener);
        prepareCommands(appliedCommands);
    }

    public TKVPropertiesJPanel(SanchayTableModel table, boolean sortable, int appliedCommands[])
    {
        this.sortable = sortable;

        initComponents();
        
        tableJTable.setModel(table);

        if(sortable)
            setSortable(true);

        tableJTable.setPreferredScrollableViewportSize(new Dimension(500, 120));

        MouseListener popupListener = new PopupListener(propJPopupMenu);
        tableJTable.addMouseListener(popupListener);
        prepareCommands(appliedCommands);
    }

    public TKVPropertiesJPanel(PropertyType pt, boolean sortable, int appliedCommands[]) {
        this.sortable = sortable;
        
        initComponents();
        
        SanchayTableModel table = new SanchayTableModel();
        tableJTable.setModel(table);

        if(sortable)
            setSortable(true);

        tableJTable.setPreferredScrollableViewportSize(new Dimension(500, 120));

        MouseListener popupListener = new PopupListener(propJPopupMenu);
        tableJTable.addMouseListener(popupListener);
        prepareCommands(appliedCommands);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        propJPopupMenu = new javax.swing.JPopupMenu();
        editJMenuItem = new javax.swing.JMenuItem();
        saveJMenuItem = new javax.swing.JMenuItem();
        saveAsJMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        resetJMenuItem = new javax.swing.JMenuItem();
        clearJMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        addItemJMenuItem = new javax.swing.JMenuItem();
        insertItemJMenuItem = new javax.swing.JMenuItem();
        deleteItemJMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        moveUpJMenuItem = new javax.swing.JMenuItem();
        moveDownJMenuItem = new javax.swing.JMenuItem();
        talbeJScrollPane = new javax.swing.JScrollPane();
        tableJTable = new javax.swing.JTable();
        commandsJPanel = new javax.swing.JPanel();
        addJButton = new javax.swing.JButton();
        insertJButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        editJMenuItem.setText(bundle.getString("Edit")); // NOI18N
        editJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJMenuItemActionPerformed(evt);
            }
        });
        propJPopupMenu.add(editJMenuItem);

        saveJMenuItem.setText(bundle.getString("Save_Table")); // NOI18N
        saveJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJMenuItemActionPerformed(evt);
            }
        });
        propJPopupMenu.add(saveJMenuItem);

        saveAsJMenuItem.setText(bundle.getString("Save_As")); // NOI18N
        saveAsJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsJMenuItemActionPerformed(evt);
            }
        });
        propJPopupMenu.add(saveAsJMenuItem);
        propJPopupMenu.add(jSeparator1);

        resetJMenuItem.setText(bundle.getString("Reset_All")); // NOI18N
        resetJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetJMenuItemActionPerformed(evt);
            }
        });
        propJPopupMenu.add(resetJMenuItem);

        clearJMenuItem.setText(bundle.getString("Clear_All")); // NOI18N
        clearJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJMenuItemActionPerformed(evt);
            }
        });
        propJPopupMenu.add(clearJMenuItem);
        propJPopupMenu.add(jSeparator2);

        addItemJMenuItem.setText(bundle.getString("Add_Item")); // NOI18N
        addItemJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemJMenuItemActionPerformed(evt);
            }
        });
        propJPopupMenu.add(addItemJMenuItem);

        insertItemJMenuItem.setText(bundle.getString("Insert_Item")); // NOI18N
        insertItemJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertItemJMenuItemActionPerformed(evt);
            }
        });
        propJPopupMenu.add(insertItemJMenuItem);

        deleteItemJMenuItem.setText(bundle.getString("Delete_Item")); // NOI18N
        deleteItemJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemJMenuItemActionPerformed(evt);
            }
        });
        propJPopupMenu.add(deleteItemJMenuItem);
        propJPopupMenu.add(jSeparator3);

        moveUpJMenuItem.setText(bundle.getString("Move_Up")); // NOI18N
        moveUpJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpJMenuItemActionPerformed(evt);
            }
        });
        propJPopupMenu.add(moveUpJMenuItem);

        moveDownJMenuItem.setText(bundle.getString("Move_Down")); // NOI18N
        moveDownJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownJMenuItemActionPerformed(evt);
            }
        });
        propJPopupMenu.add(moveDownJMenuItem);

        setLayout(new java.awt.BorderLayout());

        tableJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        talbeJScrollPane.setViewportView(tableJTable);

        add(talbeJScrollPane, java.awt.BorderLayout.CENTER);

        commandsJPanel.setLayout(new java.awt.GridLayout(3, 0, 0, 4));

        addJButton.setText(bundle.getString("Add")); // NOI18N
        commandsJPanel.add(addJButton);

        insertJButton.setText(bundle.getString("Insert")); // NOI18N
        commandsJPanel.add(insertJButton);

        removeButton.setText(bundle.getString("Remove")); // NOI18N
        commandsJPanel.add(removeButton);

        add(commandsJPanel, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents

    private void moveDownJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownJMenuItemActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_moveDownJMenuItemActionPerformed

    private void moveUpJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpJMenuItemActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_moveUpJMenuItemActionPerformed

    private void deleteItemJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemJMenuItemActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_deleteItemJMenuItemActionPerformed

    private void insertItemJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertItemJMenuItemActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_insertItemJMenuItemActionPerformed

    private void addItemJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemJMenuItemActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_addItemJMenuItemActionPerformed

    private void clearJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJMenuItemActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_clearJMenuItemActionPerformed

    private void resetJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetJMenuItemActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_resetJMenuItemActionPerformed

    private void saveAsJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsJMenuItemActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_saveAsJMenuItemActionPerformed

    private void saveJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJMenuItemActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_saveJMenuItemActionPerformed

    private void editJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editJMenuItemActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_editJMenuItemActionPerformed

    public boolean getSortable()
    {
        return sortable;
    }

    public void setSortable(boolean s)
    {
        sortable = s;

        if(sortable)
        {
            SanchayTableModel table = (SanchayTableModel) tableJTable.getModel();
            TableSorter sorter = new TableSorter(table);
            tableJTable.setModel(sorter);
            sorter.setTableHeader(tableJTable.getTableHeader());
            //Set up tool tips for column headers.
            tableJTable.getTableHeader().setToolTipText(
                    GlobalProperties.getIntlString("Click_to_specify_sorting;_Control-Click_to_specify_secondary_sorting"));
        }
        else
        {
            TableSorter sorter = (TableSorter) tableJTable.getModel();
            SanchayTableModel table = (SanchayTableModel) sorter.getTableModel();
            tableJTable.setModel(table);
        }
    }

    private void prepareCommands(int appliedCommands[])
    {
        allCommands = new boolean[10];
        menuItems = new JMenuItem[10];
        
        for(int i = 0; i < allCommands.length; i++)
        {
            allCommands[i] = true;
            
            switch(i)
            {
                case EDIT_CMD:
                    menuItems[i] = editJMenuItem;
                    break;
                case SAVE_CMD:
                    menuItems[i] = saveJMenuItem;
                    break;
                case SAVE_AS_CMD:
                    menuItems[i] = saveAsJMenuItem;
                    break;
                case RESET_ALL_CMD:
                    menuItems[i] = resetJMenuItem;
                    break;
                case CLEAR_ALL_CMD:
                    menuItems[i] = clearJMenuItem;
                    break;
                case ADD_ITEM_CMD:
                    menuItems[i] = addItemJMenuItem;
                    break;
                case INSERT_ITEM_CMD:
                    menuItems[i] = insertItemJMenuItem;
                    break;
                case DEL_ITEM_CMD:
                    menuItems[i] = deleteItemJMenuItem;
                    break;
                case MOVE_UP_CMD:
                    menuItems[i] = moveUpJMenuItem;
                    break;
                case MOVE_DOWN_CMD:
                    menuItems[i] = moveDownJMenuItem;
                    break;
            }
        }

        if(appliedCommands != null)
        {
            for(int i = 0; i < allCommands.length; i++)
                allCommands[i] = false;
            
            for(int i = 0; i < appliedCommands.length; i++)
            {
                int cmd = appliedCommands[i];
                allCommands[cmd] = true;
            }
            
            for(int i = 0; i < allCommands.length; i++)
            {
                if(allCommands[i] == false)
                    menuItems[i].setEnabled(false);
            }
        }
    }
    
    public JFrame getOwner()
    {
        return owner;
    }
    
    public void setOwner(JFrame f)
    {
        owner = f;
    }
    
    public void setDialog(JDialog d)
    {
        dialog = d;
    }
    
    public void setModel(SanchayTableModel tbl)
    {
        ((TableSorter) tableJTable.getModel()).setTableModel(tbl);
    }

    public SanchayTableModel getModel()
    {
        return (SanchayTableModel) ((TableSorter) tableJTable.getModel()).getTableModel();
    }
    
    public JTable getJTable()
    {
        return tableJTable;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JMenuItem addItemJMenuItem;
    public javax.swing.JButton addJButton;
    public javax.swing.JMenuItem clearJMenuItem;
    public javax.swing.JPanel commandsJPanel;
    public javax.swing.JMenuItem deleteItemJMenuItem;
    public javax.swing.JMenuItem editJMenuItem;
    public javax.swing.JMenuItem insertItemJMenuItem;
    public javax.swing.JButton insertJButton;
    public javax.swing.JSeparator jSeparator1;
    public javax.swing.JSeparator jSeparator2;
    public javax.swing.JSeparator jSeparator3;
    public javax.swing.JMenuItem moveDownJMenuItem;
    public javax.swing.JMenuItem moveUpJMenuItem;
    public javax.swing.JPopupMenu propJPopupMenu;
    public javax.swing.JButton removeButton;
    public javax.swing.JMenuItem resetJMenuItem;
    public javax.swing.JMenuItem saveAsJMenuItem;
    public javax.swing.JMenuItem saveJMenuItem;
    public javax.swing.JTable tableJTable;
    public javax.swing.JScrollPane talbeJScrollPane;
    // End of variables declaration//GEN-END:variables
    
}
