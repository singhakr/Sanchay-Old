/*
 * ConnectToDBJPanel.java
 *
 * Created on July 25, 2008, 10:15 AM
 */

package sanchay.db.gui;

import java.awt.event.ActionEvent;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import sanchay.GlobalProperties;
import sanchay.common.types.DBDriverType;
import sanchay.gui.common.JPanelDialog;
import sanchay.db.DBConnection;

/**
 *
 * @author  eklavya
 */
public class ConnectToDBJPanel extends javax.swing.JPanel implements JPanelDialog
{
    protected JFrame owner;
    protected JDialog dialog;

    protected String dbURL;
    protected DBConnection connection;
    protected String tableName;
    
    protected boolean connected;

    private SanchayDatabaseEditorJPanel sanchayDatabaseEditorJPanel;
    
    protected DefaultComboBoxModel typesComboBoxModel;
    protected DefaultComboBoxModel userComboBoxModel;
    protected DefaultComboBoxModel passwordComboBoxModel;
    protected DefaultComboBoxModel sqlComboBoxModel;

    protected DefaultComboBoxModel tablesComboBoxModel;
    
    /** Creates new form ConnectToDBJPanel */
    public ConnectToDBJPanel() {
        initComponents();

        typesComboBoxModel = new DefaultComboBoxModel();
        userComboBoxModel = new DefaultComboBoxModel();
        passwordComboBoxModel = new DefaultComboBoxModel();
        sqlComboBoxModel = new DefaultComboBoxModel();
        
        typesJComboBox.setModel(typesComboBoxModel);
        userJComboBox.setModel(userComboBoxModel);
        passwordJComboBox.setModel(passwordComboBoxModel);
        sqlJComboBox.setModel(sqlComboBoxModel);
        
//        typesComboBoxModel.addElement("jdbc:derby:derbyDB;create=true");

        tablesComboBoxModel = new DefaultComboBoxModel();
        tablesJComboBox.setModel(tablesComboBoxModel);
        
//        connection = new DBConnection();
    }
    
    public void configure() {
        if(typesComboBoxModel != null)
            typesComboBoxModel.removeAllElements();
        
        Enumeration enm = DBDriverType.elements();
        while(enm.hasMoreElements()) {
            DBDriverType dbt = (DBDriverType) enm.nextElement();
            
            typesComboBoxModel.addElement(dbt);
        }
        
        typesJComboBox.setModel(typesComboBoxModel);
        
        typesJComboBox.setSelectedItem(DBDriverType.JDBS_SQLITE);
    }
    

    public SanchayDatabaseEditorJPanel getSanchayDatabaseEditorJPanel() {
        return sanchayDatabaseEditorJPanel;
    }

    public void setSanchayDatabaseEditorJPanel(SanchayDatabaseEditorJPanel sanchayDatabaseEditorJPanel) {
        this.sanchayDatabaseEditorJPanel = sanchayDatabaseEditorJPanel;

        configure();
    }

//    public ConnectToDBJPanel(String url, String user, String pwd) {
//        this();
//        
//        urlComboBoxModel.setSelectedItem(url);
//        userComboBoxModel.setSelectedItem(user);
//        passwordComboBoxModel.setSelectedItem(pwd);
//    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topJPanel = new javax.swing.JPanel();
        typeJPanel = new javax.swing.JPanel();
        typeJLabel = new javax.swing.JLabel();
        typesJComboBox = new javax.swing.JComboBox();
        userlJPanel = new javax.swing.JPanel();
        userJLabel = new javax.swing.JLabel();
        userJComboBox = new javax.swing.JComboBox();
        passwordJPanel = new javax.swing.JPanel();
        passwordJLabel = new javax.swing.JLabel();
        passwordJComboBox = new javax.swing.JComboBox();
        optionsJPanel = new javax.swing.JPanel();
        createDBJCheckBox = new javax.swing.JCheckBox();
        overwriteJCheckBox = new javax.swing.JCheckBox();
        urlJPanel = new javax.swing.JPanel();
        urlJLabel = new javax.swing.JLabel();
        urlTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        centerJPanel = new javax.swing.JPanel();
        tablesJPanel = new javax.swing.JPanel();
        tablesJComboBox = new javax.swing.JComboBox();
        tableButthonsJPanel = new javax.swing.JPanel();
        createTableJButton = new javax.swing.JButton();
        deleteTableJButton = new javax.swing.JButton();
        sqlJPanel = new javax.swing.JPanel();
        sqlQueryJPanel = new javax.swing.JPanel();
        sqlJLabel = new javax.swing.JLabel();
        sqlJComboBox = new javax.swing.JComboBox();
        statusJPanel = new javax.swing.JPanel();
        statusJLabel = new javax.swing.JLabel();
        bottomJPanel = new javax.swing.JPanel();
        row1ButtonsJPanel = new javax.swing.JPanel();
        connectJButton = new javax.swing.JButton();
        loadJButton = new javax.swing.JButton();
        sqlJButton = new javax.swing.JButton();
        row2ButtonsJPanel = new javax.swing.JPanel();
        updateJButton = new javax.swing.JButton();
        okJButton = new javax.swing.JButton();
        closeJButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        topJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Connect to a Databae"));
        topJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        typeJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("sanchay"); // NOI18N
        typeJLabel.setText(bundle.getString("Database_URL:")); // NOI18N
        typeJLabel.setPreferredSize(new java.awt.Dimension(100, 14));
        typeJPanel.add(typeJLabel);

        typesJComboBox.setEditable(true);
        typesJComboBox.setPreferredSize(new java.awt.Dimension(250, 20));
        typesJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typesJComboBoxActionPerformed(evt);
            }
        });
        typeJPanel.add(typesJComboBox);

        topJPanel.add(typeJPanel);

        userlJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        userJLabel.setText(bundle.getString("User:")); // NOI18N
        userJLabel.setPreferredSize(new java.awt.Dimension(100, 14));
        userlJPanel.add(userJLabel);

        userJComboBox.setEditable(true);
        userJComboBox.setPreferredSize(new java.awt.Dimension(250, 20));
        userlJPanel.add(userJComboBox);

        topJPanel.add(userlJPanel);

        passwordJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        passwordJLabel.setText(bundle.getString("Password:")); // NOI18N
        passwordJLabel.setPreferredSize(new java.awt.Dimension(100, 14));
        passwordJPanel.add(passwordJLabel);

        passwordJComboBox.setEditable(true);
        passwordJComboBox.setPreferredSize(new java.awt.Dimension(250, 20));
        passwordJPanel.add(passwordJComboBox);

        topJPanel.add(passwordJPanel);

        createDBJCheckBox.setText("Create Database");
        createDBJCheckBox.setToolTipText("Create new database file if does not exists.");
        optionsJPanel.add(createDBJCheckBox);

        overwriteJCheckBox.setText("Overwrite");
        overwriteJCheckBox.setToolTipText("Overwrite database file if already exists");
        optionsJPanel.add(overwriteJCheckBox);

        topJPanel.add(optionsJPanel);

        urlJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        urlJLabel.setText(bundle.getString("User:")); // NOI18N
        urlJLabel.setPreferredSize(new java.awt.Dimension(100, 14));
        urlJPanel.add(urlJLabel);

        urlTextField.setText("Database URL");
        urlTextField.setPreferredSize(new java.awt.Dimension(170, 20));
        urlTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                urlTextFieldMouseClicked(evt);
            }
        });
        urlTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlTextFieldActionPerformed(evt);
            }
        });
        urlJPanel.add(urlTextField);

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });
        urlJPanel.add(browseButton);

        topJPanel.add(urlJPanel);

        add(topJPanel, java.awt.BorderLayout.NORTH);

        centerJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tables"));
        centerJPanel.setLayout(new java.awt.BorderLayout());

        tablesJPanel.setLayout(new java.awt.BorderLayout());

        tablesJComboBox.setEditable(true);
        tablesJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tablesJComboBoxActionPerformed(evt);
            }
        });
        tablesJPanel.add(tablesJComboBox, java.awt.BorderLayout.NORTH);

        createTableJButton.setText("Create Table");
        createTableJButton.setToolTipText("");
        createTableJButton.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        createTableJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTableJButtonActionPerformed(evt);
            }
        });
        tableButthonsJPanel.add(createTableJButton);

        deleteTableJButton.setText("Delete Table");
        deleteTableJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTableJButtonActionPerformed(evt);
            }
        });
        tableButthonsJPanel.add(deleteTableJButton);

        tablesJPanel.add(tableButthonsJPanel, java.awt.BorderLayout.SOUTH);

        centerJPanel.add(tablesJPanel, java.awt.BorderLayout.CENTER);

        sqlJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("SQL Query"));
        sqlJPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 4));

        sqlQueryJPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        sqlJLabel.setText(bundle.getString("SQL_Query:")); // NOI18N
        sqlJLabel.setPreferredSize(new java.awt.Dimension(100, 14));
        sqlQueryJPanel.add(sqlJLabel);

        sqlJComboBox.setEditable(true);
        sqlJComboBox.setPreferredSize(new java.awt.Dimension(250, 20));
        sqlQueryJPanel.add(sqlJComboBox);

        sqlJPanel.add(sqlQueryJPanel);

        statusJPanel.setLayout(new java.awt.BorderLayout());

        statusJLabel.setText(bundle.getString("_")); // NOI18N
        statusJPanel.add(statusJLabel, java.awt.BorderLayout.CENTER);

        sqlJPanel.add(statusJPanel);

        centerJPanel.add(sqlJPanel, java.awt.BorderLayout.SOUTH);

        add(centerJPanel, java.awt.BorderLayout.CENTER);

        bottomJPanel.setLayout(new java.awt.GridLayout(2, 0, 4, 0));

        row1ButtonsJPanel.setLayout(new java.awt.GridLayout(1, 0));

        connectJButton.setText("Connect");
        connectJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectJButtonActionPerformed(evt);
            }
        });
        row1ButtonsJPanel.add(connectJButton);

        loadJButton.setText(bundle.getString("Load")); // NOI18N
        loadJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadJButtonActionPerformed(evt);
            }
        });
        row1ButtonsJPanel.add(loadJButton);

        sqlJButton.setText(bundle.getString("Execute_SQL")); // NOI18N
        sqlJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqlJButtonActionPerformed(evt);
            }
        });
        row1ButtonsJPanel.add(sqlJButton);

        bottomJPanel.add(row1ButtonsJPanel);

        row2ButtonsJPanel.setLayout(new java.awt.GridLayout(1, 0));

        updateJButton.setText(bundle.getString("Update_SQL")); // NOI18N
        updateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateJButtonActionPerformed(evt);
            }
        });
        row2ButtonsJPanel.add(updateJButton);

        okJButton.setLabel(bundle.getString("OK")); // NOI18N
        okJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okJButtonActionPerformed(evt);
            }
        });
        row2ButtonsJPanel.add(okJButton);

        closeJButton.setText("Close Connection");
        closeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeJButtonActionPerformed(evt);
            }
        });
        row2ButtonsJPanel.add(closeJButton);

        bottomJPanel.add(row2ButtonsJPanel);

        add(bottomJPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void updateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateJButtonActionPerformed
// TODO add your handling code here:
        if(connected == false)
            return;
        
        String query = (String) sqlJComboBox.getSelectedItem();
        
        try {
            connection.executeUpdate(query);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }        
    }//GEN-LAST:event_updateJButtonActionPerformed

    private void sqlJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqlJButtonActionPerformed
// TODO add your handling code here:
        if(connected == false)
            return;
        
        String query = (String) sqlJComboBox.getSelectedItem();
        
        try {
            connection.executeQuery(query);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_sqlJButtonActionPerformed

    private void loadJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadJButtonActionPerformed
// TODO add your handling code here:
        DBDriverType dbType = (DBDriverType) typesJComboBox.getSelectedItem();
        
        if(dbType == null)
        {
            JOptionPane.showMessageDialog(this, "Please select databse type.", "Error", JOptionPane.ERROR_MESSAGE);            

            return;            
        }

        if(connection == null || connection.getConnection() == null)
        {
            JOptionPane.showMessageDialog(this, "Please connect to the databse.", "Error", JOptionPane.ERROR_MESSAGE);            

            return;            
        }
            
        if(createDBJCheckBox.isSelected())
        {
//            dbURL = urlTextField.getText();
//            
//            if(dbURL == null || dbURL.equals(""))
//            {
//                JOptionPane.showMessageDialog(this, "Please connect to the databse.", "Error", JOptionPane.ERROR_MESSAGE);            
//
//                return;
//            }
//            
//            try {
//                DBConnection.createDatabase(connection.getConnection(), dbURL);
//            } catch (SQLException ex) {
//                Logger.getLogger(ConnectToDBJPanel.class.getName()).log(Level.SEVERE, null, ex);
//            }
        }
        else
        {
            fillTableNames();
        }
        
//        ResultSet resultSet = null;
//        
//        try {            
////            resultSet = connection.executeQuery("select count(*) from sys.systables");
//            int count = connection.executeUpdate("CREATE TABLE HY_Address (ID INT, StreetName VARCHAR(20)," + " City VARCHAR(20))");
//            
//            if (count > 0)
//                statusJLabel.setText(statusJLabel.getText() + " Table created.");
                

//            ResultSetMetaData resultSetMetaData = resultSet.getMetaData();
//            
//            int count = resultSetMetaData.getColumnCount();
//            
//            for (int i = 0; i < count; i++)
//            {
//                String cname = resultSetMetaData.getColumnName(i);
//                tablesListModel.addElement(cname);
//            }
            
//            while (resultSet.next())
//            {
//                tablesListModel.addElement();
//                tablesListModel.addElement(resultSet.getString("COLUMN_NAME"));
//            }
            
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
        
        tableName = (String) tablesJComboBox.getSelectedItem();
        
        connected = true;        
    }//GEN-LAST:event_loadJButtonActionPerformed

    private void closeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeJButtonActionPerformed
// TODO add your handling code here:
        closeConnection();
//        setVisible(false);
    }//GEN-LAST:event_closeJButtonActionPerformed

    private void okJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okJButtonActionPerformed
// TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_okJButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // TODO add your handling code here:
        String path = ".";
        
        JFileChooser chooser = null;
        
        if(path != null)
            chooser = new JFileChooser(path);
        else
            chooser = new JFileChooser();
        
        int returnVal = chooser.showSaveDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
//            dbURL = chooser.getSelectedFile().getPath();
            dbURL = chooser.getSelectedFile().getName();
            urlTextField.setText(dbURL);
        }
        
    }//GEN-LAST:event_browseButtonActionPerformed

    private void typesJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typesJComboBoxActionPerformed
        // TODO add your handling code here:
        DBDriverType dbType = (DBDriverType) typesJComboBox.getSelectedItem();
        
        connection = new DBConnection(dbType);
        
        sanchayDatabaseEditorJPanel.setConnection(connection);
    }//GEN-LAST:event_typesJComboBoxActionPerformed

    private void connectJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectJButtonActionPerformed
        // TODO add your handling code here:
        if(connection == null)
        {  
            typesJComboBoxActionPerformed(evt);
        }
        
        connection.setURL(urlTextField.getText());
        connection.setUser((String) userJComboBox.getSelectedItem());
        connection.setPassword((String) passwordJComboBox.getSelectedItem());
        
        connection.connect();
        
        statusJLabel.setText(GlobalProperties.getIntlString("Connected_to_the_database."));        
    }//GEN-LAST:event_connectJButtonActionPerformed

    private void createTableJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTableJButtonActionPerformed
        // TODO add your handling code here:
        sanchayDatabaseEditorJPanel.setCurrentTableName(tableName);
        sanchayDatabaseEditorJPanel.createNewTable();
    }//GEN-LAST:event_createTableJButtonActionPerformed

    private void tablesJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tablesJComboBoxActionPerformed
        // TODO add your handling code here:
        tableName = (String) tablesJComboBox.getSelectedItem();
        sanchayDatabaseEditorJPanel.setCurrentTableName(tableName);
    }//GEN-LAST:event_tablesJComboBoxActionPerformed

    private void deleteTableJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTableJButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteTableJButtonActionPerformed

    private void urlTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urlTextFieldActionPerformed
        // TODO add your handling code here:
//        browseButtonActionPerformed(evt);
    }//GEN-LAST:event_urlTextFieldActionPerformed

    private void urlTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_urlTextFieldMouseClicked
        // TODO add your handling code here:
        browseButtonActionPerformed(null);
    }//GEN-LAST:event_urlTextFieldMouseClicked
   
    private void fillTableNames()
    {
//        Statement stmt = null;
        
        try {
//            stmt = connection.getConnection().createStatement();
            
            DatabaseMetaData meta = connection.getConnection().getMetaData();
            
            ResultSet rs = meta.getTables(null, null,"%", null);
//            ResultSet rs = stmt.executeQuery("Show tables");
            
            while(rs.next()) {
                tablesComboBoxModel.addElement(rs.getString(3));
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(ConnectToDBJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        tableName = (String) tablesJComboBox.getSelectedItem();
        sanchayDatabaseEditorJPanel.setCurrentTableName(tableName);
    }
    
    public boolean closeConnection()
    {
        try {
            dbURL = null;
            tableName = null;
                        
            connection.getConnection().close();
            connection.closeConnection();
            
            connection = null;
            
            connected = false;
            
            tablesJComboBox.removeAllItems();
            
            userJComboBox.setSelectedIndex(-1);
            passwordJComboBox.setSelectedIndex(-1);
            
            urlTextField.setText("");
            
            createDBJCheckBox.setSelected(false);
            overwriteJCheckBox.setSelected(false);
            tablesJComboBox.setSelectedIndex(-1);
            sqlJComboBox.setSelectedIndex(-1);
            
            sanchayDatabaseEditorJPanel.clearTables();
            
        } catch (SQLException ex) {
            Logger.getLogger(ConnectToDBJPanel.class.getName()).log(Level.SEVERE, null, ex);

            return false;
        }

        return true;
    }
    
    public boolean isConnected()
    {
        return connected;
    }    
   
    public DBConnection getConnection()
    {
        return connection;
    }    
   
    public String getTableName()
    {
        tableName = (String) tablesJComboBox.getSelectedItem();
        return tableName;
    }    
    
    public void setInfo(String url, String user, String pwd)
    {
        typesComboBoxModel.setSelectedItem(url);
        userComboBoxModel.setSelectedItem(user);
        passwordComboBoxModel.setSelectedItem(pwd);        
    }
    
    public void setDialog(JDialog dialog) {
	this.dialog = dialog;
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomJPanel;
    private javax.swing.JButton browseButton;
    private javax.swing.JPanel centerJPanel;
    private javax.swing.JButton closeJButton;
    private javax.swing.JButton connectJButton;
    private javax.swing.JCheckBox createDBJCheckBox;
    private javax.swing.JButton createTableJButton;
    private javax.swing.JButton deleteTableJButton;
    private javax.swing.JButton loadJButton;
    private javax.swing.JButton okJButton;
    private javax.swing.JPanel optionsJPanel;
    private javax.swing.JCheckBox overwriteJCheckBox;
    private javax.swing.JComboBox passwordJComboBox;
    private javax.swing.JLabel passwordJLabel;
    private javax.swing.JPanel passwordJPanel;
    private javax.swing.JPanel row1ButtonsJPanel;
    private javax.swing.JPanel row2ButtonsJPanel;
    private javax.swing.JButton sqlJButton;
    private javax.swing.JComboBox sqlJComboBox;
    private javax.swing.JLabel sqlJLabel;
    private javax.swing.JPanel sqlJPanel;
    private javax.swing.JPanel sqlQueryJPanel;
    private javax.swing.JLabel statusJLabel;
    private javax.swing.JPanel statusJPanel;
    private javax.swing.JPanel tableButthonsJPanel;
    private javax.swing.JComboBox tablesJComboBox;
    private javax.swing.JPanel tablesJPanel;
    private javax.swing.JPanel topJPanel;
    private javax.swing.JLabel typeJLabel;
    private javax.swing.JPanel typeJPanel;
    private javax.swing.JComboBox typesJComboBox;
    private javax.swing.JButton updateJButton;
    private javax.swing.JLabel urlJLabel;
    private javax.swing.JPanel urlJPanel;
    private javax.swing.JTextField urlTextField;
    private javax.swing.JComboBox userJComboBox;
    private javax.swing.JLabel userJLabel;
    private javax.swing.JPanel userlJPanel;
    // End of variables declaration//GEN-END:variables
    
}
